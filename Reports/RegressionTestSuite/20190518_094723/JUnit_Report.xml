<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="RegressionTestSuite" time="726" tests="26" failures="0" errors="0">
   <testsuite name="RegressionTestSuite" tests="26" failures="0" errors="0" time="726" timestamp="2019-05-18 09:47:36" hostname="LAPTOP-AK5DO7TK$ - LAPTOP-AK5DO7TK" id="Test Suites/RegressionTestSuite">
      <properties>
         <property name="deviceName" value=""/>
         <property name="devicePlatform" value=""/>
         <property name="logFolder" value="C:\\Users\\fitim\\.git\\KatalonProject\\Reports\\RegressionTestSuite\\20190518_094723"/>
         <property name="logFiles" value="C:\\Users\\fitim\\.git\\KatalonProject\\Reports\\RegressionTestSuite\\20190518_094723\\execution0.log"/>
         <property name="attachments" value="C:\\Users\\fitim\\.git\\KatalonProject\\Reports\\RegressionTestSuite\\20190518_094723\\1558162214052.png, C:\\Users\\fitim\\Desktop\\Katalon Studio\\screenshots\\picture.png, C:\\Users\\fitim\\.git\\KatalonProject\\Reports\\RegressionTestSuite\\20190518_094723\\1558162371702.png"/>
         <property name="hostName" value="LAPTOP-AK5DO7TK$ - LAPTOP-AK5DO7TK"/>
         <property name="os" value="Windows 10 64bit"/>
         <property name="katalonVersion" value="6.1.2.2"/>
         <property name="browser" value="Chrome 74.0.3729.157"/>
         <property name="hostAddress" value="192.168.0.15"/>
         <property name="sessionId" value="c5d3dab6ac6e2360bcdc843fa8bc78b9"/>
         <property name="seleniumVersion" value="3.141.5"/>
         <property name="proxyInformation" value="ProxyInformation{proxyOption=NO_PROXY, proxyServerType=HTTP, password=, proxyServerAddress=, proxyServerPort=0}"/>
         <property name="platform" value="Windows 10"/>
      </properties>
      <testcase name="Test Cases/CucumberBDD/CucumberFeatureCall" classname="Test Cases/CucumberBDD/CucumberFeatureCall" status="PASSED">
         <system-out><![CDATA[2019-05-18 09:47:37 - [TEST_CASE][PASSED] - Test Cases/CucumberBDD/CucumberFeatureCall: Test Cases/CucumberBDD/CucumberFeatureCall

2019-05-18 09:47:38 - [TEST_STEP][PASSED] - Start listener action : sampleBeforeTestCase: null

2019-05-18 09:47:38 - [TEST_STEP][PASSED] - println(testCaseContext.getTestCaseId()): null

2019-05-18 09:47:38 - [TEST_STEP][PASSED] - println(testCaseContext.getTestCaseVariables()): null

2019-05-18 09:47:39 - [TEST_STEP][PASSED] - runFeatureFile("Include/features/NewFeatureFile.feature"): Feature file: 'Include/features/NewFeatureFile.feature' was passed

2019-05-18 09:47:40 - [MESSAGE][INFO] - Starting run keyword runFeatureFile: 'Include/features/NewFeatureFile.feature' and extract report to folder: 'C:\Users\fitim\.git\KatalonProject\Reports\RegressionTestSuite\20190518_094723/cucumber_report/1558162060443'...

2019-05-18 09:47:50 - [TEST_CASE][PASSED] - Start Test Case : SCENARIO Login with a valid credential: SCENARIO Login with a valid credential

2019-05-18 09:47:50 - [TEST_STEP][PASSED] - I navigate to Cura System homepage: I navigate to Cura System homepage

2019-05-18 09:47:53 - [MESSAGE][INFO] - Starting 'Chrome' driver

2019-05-18 09:47:53 - [MESSAGE][INFO] - User set preference: ['args', '[--disable-infobars, --no-sandbox]']

2019-05-18 09:47:54 - [MESSAGE][INFO] - Action delay is set to 0 seconds

2019-05-18 09:48:11 - [MESSAGE][PASSED] - Browser is opened with url: 'http://demoaut.katalon.com'

2019-05-18 09:48:11 - [MESSAGE][PASSED] - I navigate to Cura System homepage

2019-05-18 09:48:11 - [TEST_STEP][PASSED] - I click Make Appointment button: I click Make Appointment button

2019-05-18 09:48:12 - [MESSAGE][PASSED] - Object: 'Object Repository/katalon_5_3_katalon_demo/Page_CURAHealthcareService/a_MakeAppointment' is clicked on

2019-05-18 09:48:12 - [MESSAGE][PASSED] - I click Make Appointment button

2019-05-18 09:48:12 - [TEST_STEP][PASSED] - I enter username John Doe and password ThisIsNotAPassword: I enter username John Doe and password ThisIsNotAPassword

2019-05-18 09:48:13 - [MESSAGE][PASSED] - Text 'John Doe' is set on object 'Object Repository/katalon_5_3_katalon_demo/Page_CURAHealthcareService/input_username'

2019-05-18 09:48:14 - [MESSAGE][PASSED] - Text 'ThisIsNotAPassword' is set on object 'Object Repository/katalon_5_3_katalon_demo/Page_CURAHealthcareService/input_password'

2019-05-18 09:48:14 - [MESSAGE][PASSED] - I enter username John Doe and password ThisIsNotAPassword

2019-05-18 09:48:14 - [TEST_STEP][PASSED] - I click Log in button: I click Log in button

2019-05-18 09:48:14 - [MESSAGE][PASSED] - Object: 'Object Repository/katalon_5_3_katalon_demo/Page_CURAHealthcareService/button_Login' is clicked on

2019-05-18 09:48:14 - [MESSAGE][PASSED] - I click Log in button

2019-05-18 09:48:14 - [TEST_STEP][PASSED] - I should be able to login successfully: I should be able to login successfully

2019-05-18 09:48:15 - [MESSAGE][PASSED] - Browser is closed

2019-05-18 09:48:15 - [MESSAGE][PASSED] - I should be able to login successfully

2019-05-18 09:48:15 - [TEST_CASE][PASSED] - Start Test Case : SCENARIO Login with an invalid credential: SCENARIO Login with an invalid credential

2019-05-18 09:48:15 - [TEST_STEP][PASSED] - I navigate to Cura System homepage: I navigate to Cura System homepage

2019-05-18 09:48:15 - [MESSAGE][INFO] - Starting 'Chrome' driver

2019-05-18 09:48:15 - [MESSAGE][INFO] - User set preference: ['args', '[--disable-infobars, --no-sandbox]']

2019-05-18 09:48:22 - [MESSAGE][PASSED] - Browser is opened with url: 'http://demoaut.katalon.com'

2019-05-18 09:48:22 - [MESSAGE][PASSED] - I navigate to Cura System homepage

2019-05-18 09:48:22 - [TEST_STEP][PASSED] - I click Make Appointment button: I click Make Appointment button

2019-05-18 09:48:23 - [MESSAGE][PASSED] - Object: 'Object Repository/katalon_5_3_katalon_demo/Page_CURAHealthcareService/a_MakeAppointment' is clicked on

2019-05-18 09:48:23 - [MESSAGE][PASSED] - I click Make Appointment button

2019-05-18 09:48:23 - [TEST_STEP][PASSED] - I enter an invalid username Jane Doe and password ThisIsNotAPassword: I enter an invalid username Jane Doe and password ThisIsNotAPassword

2019-05-18 09:48:24 - [MESSAGE][PASSED] - Text 'Jane Doe' is set on object 'Object Repository/katalon_5_3_katalon_demo/Page_CURAHealthcareService/input_username'

2019-05-18 09:48:24 - [MESSAGE][PASSED] - Text 'ThisIsNotAPassword' is set on object 'Object Repository/katalon_5_3_katalon_demo/Page_CURAHealthcareService/input_password'

2019-05-18 09:48:24 - [MESSAGE][PASSED] - I enter an invalid username Jane Doe and password ThisIsNotAPassword

2019-05-18 09:48:24 - [TEST_STEP][PASSED] - I click Log in button: I click Log in button

2019-05-18 09:48:25 - [MESSAGE][PASSED] - Object: 'Object Repository/katalon_5_3_katalon_demo/Page_CURAHealthcareService/button_Login' is clicked on

2019-05-18 09:48:25 - [MESSAGE][PASSED] - I click Log in button

2019-05-18 09:48:25 - [TEST_STEP][PASSED] - I should NOT be able to login successfully: I should NOT be able to login successfully

2019-05-18 09:48:25 - [MESSAGE][PASSED] - Text 'Login failed! Please ensure the username and password are valid.' is present on page 

2019-05-18 09:48:26 - [MESSAGE][PASSED] - Browser is closed

2019-05-18 09:48:26 - [MESSAGE][PASSED] - I should NOT be able to login successfully

2019-05-18 09:48:26 - [MESSAGE][PASSED] - Feature file: 'Include/features/NewFeatureFile.feature' was passed]]></system-out>
         <system-err><![CDATA[]]></system-err>
      </testcase>
      <testcase name="Test Cases/Web Application/Data Driven Test case FOR LOOP" classname="Test Cases/Web Application/Data Driven Test case FOR LOOP" status="PASSED">
         <system-out><![CDATA[2019-05-18 09:48:26 - [TEST_CASE][PASSED] - Test Cases/Web Application/Data Driven Test case FOR LOOP: Test Cases/Web Application/Data Driven Test case FOR LOOP

2019-05-18 09:48:27 - [TEST_STEP][PASSED] - Start listener action : sampleBeforeTestCase: null

2019-05-18 09:48:27 - [TEST_STEP][PASSED] - println(testCaseContext.getTestCaseId()): null

2019-05-18 09:48:27 - [TEST_STEP][PASSED] - println(testCaseContext.getTestCaseVariables()): null

2019-05-18 09:48:27 - [TEST_STEP][PASSED] - data = findTestData("Login/LoginTestData"): null

2019-05-18 09:48:27 - [TEST_STEP][PASSED] - for (def index : (0..(data.getRowNumbers() - 1))): Browser is closed

2019-05-18 09:48:27 - [TEST_STEP][PASSED] - openBrowser(""): Browser is opened with url: ''

2019-05-18 09:48:27 - [MESSAGE][INFO] - Starting 'Chrome' driver

2019-05-18 09:48:27 - [MESSAGE][INFO] - User set preference: ['args', '[--disable-infobars, --no-sandbox]']

2019-05-18 09:48:31 - [MESSAGE][PASSED] - Browser is opened with url: ''

2019-05-18 09:48:31 - [TEST_STEP][PASSED] - navigateToUrl(URL_Application): Navigate to 'http://demoaut.katalon.com/' successfully

2019-05-18 09:48:42 - [MESSAGE][PASSED] - Navigate to 'http://demoaut.katalon.com/' successfully

2019-05-18 09:48:42 - [TEST_STEP][PASSED] - click(findTestObject("LoginPage-of-DemoApplication/a_MakeAppointment")): Object: 'Object Repository/LoginPage-of-DemoApplication/a_MakeAppointment' is clicked on

2019-05-18 09:48:43 - [MESSAGE][PASSED] - Object: 'Object Repository/LoginPage-of-DemoApplication/a_MakeAppointment' is clicked on

2019-05-18 09:48:43 - [TEST_STEP][PASSED] - setText(findTestObject("LoginPage-of-DemoApplication/input_username"), data.internallyGetValue("user", index)): Text 'John Doe' is set on object 'Object Repository/LoginPage-of-DemoApplication/input_username'

2019-05-18 09:48:44 - [MESSAGE][PASSED] - Text 'John Doe' is set on object 'Object Repository/LoginPage-of-DemoApplication/input_username'

2019-05-18 09:48:44 - [TEST_STEP][PASSED] - setText(findTestObject("LoginPage-of-DemoApplication/input_password"), data.internallyGetValue("pass", index)): Text 'ThisIsNotAPassword' is set on object 'Object Repository/LoginPage-of-DemoApplication/input_password'

2019-05-18 09:48:45 - [MESSAGE][PASSED] - Text 'ThisIsNotAPassword' is set on object 'Object Repository/LoginPage-of-DemoApplication/input_password'

2019-05-18 09:48:45 - [TEST_STEP][PASSED] - click(findTestObject("LoginPage-of-DemoApplication/button_Login")): Object: 'Object Repository/LoginPage-of-DemoApplication/button_Login' is clicked on

2019-05-18 09:48:45 - [MESSAGE][PASSED] - Object: 'Object Repository/LoginPage-of-DemoApplication/button_Login' is clicked on

2019-05-18 09:48:45 - [TEST_STEP][PASSED] - closeBrowser(): Browser is closed

2019-05-18 09:48:46 - [MESSAGE][PASSED] - Browser is closed

2019-05-18 09:48:46 - [TEST_STEP][PASSED] - openBrowser(""): Browser is opened with url: ''

2019-05-18 09:48:46 - [MESSAGE][INFO] - Starting 'Chrome' driver

2019-05-18 09:48:46 - [MESSAGE][INFO] - User set preference: ['args', '[--disable-infobars, --no-sandbox]']

2019-05-18 09:48:50 - [MESSAGE][PASSED] - Browser is opened with url: ''

2019-05-18 09:48:50 - [TEST_STEP][PASSED] - navigateToUrl(URL_Application): Navigate to 'http://demoaut.katalon.com/' successfully

2019-05-18 09:48:54 - [MESSAGE][PASSED] - Navigate to 'http://demoaut.katalon.com/' successfully

2019-05-18 09:48:54 - [TEST_STEP][PASSED] - click(findTestObject("LoginPage-of-DemoApplication/a_MakeAppointment")): Object: 'Object Repository/LoginPage-of-DemoApplication/a_MakeAppointment' is clicked on

2019-05-18 09:48:54 - [MESSAGE][PASSED] - Object: 'Object Repository/LoginPage-of-DemoApplication/a_MakeAppointment' is clicked on

2019-05-18 09:48:54 - [TEST_STEP][PASSED] - setText(findTestObject("LoginPage-of-DemoApplication/input_username"), data.internallyGetValue("user", index)): Text 'cat' is set on object 'Object Repository/LoginPage-of-DemoApplication/input_username'

2019-05-18 09:48:55 - [MESSAGE][PASSED] - Text 'cat' is set on object 'Object Repository/LoginPage-of-DemoApplication/input_username'

2019-05-18 09:48:55 - [TEST_STEP][PASSED] - setText(findTestObject("LoginPage-of-DemoApplication/input_password"), data.internallyGetValue("pass", index)): Text 'mat' is set on object 'Object Repository/LoginPage-of-DemoApplication/input_password'

2019-05-18 09:48:55 - [MESSAGE][PASSED] - Text 'mat' is set on object 'Object Repository/LoginPage-of-DemoApplication/input_password'

2019-05-18 09:48:55 - [TEST_STEP][PASSED] - click(findTestObject("LoginPage-of-DemoApplication/button_Login")): Object: 'Object Repository/LoginPage-of-DemoApplication/button_Login' is clicked on

2019-05-18 09:48:56 - [MESSAGE][PASSED] - Object: 'Object Repository/LoginPage-of-DemoApplication/button_Login' is clicked on

2019-05-18 09:48:56 - [TEST_STEP][PASSED] - closeBrowser(): Browser is closed

2019-05-18 09:48:57 - [MESSAGE][PASSED] - Browser is closed

2019-05-18 09:48:57 - [TEST_STEP][PASSED] - openBrowser(""): Browser is opened with url: ''

2019-05-18 09:48:57 - [MESSAGE][INFO] - Starting 'Chrome' driver

2019-05-18 09:48:57 - [MESSAGE][INFO] - User set preference: ['args', '[--disable-infobars, --no-sandbox]']

2019-05-18 09:49:00 - [MESSAGE][PASSED] - Browser is opened with url: ''

2019-05-18 09:49:00 - [TEST_STEP][PASSED] - navigateToUrl(URL_Application): Navigate to 'http://demoaut.katalon.com/' successfully

2019-05-18 09:49:04 - [MESSAGE][PASSED] - Navigate to 'http://demoaut.katalon.com/' successfully

2019-05-18 09:49:04 - [TEST_STEP][PASSED] - click(findTestObject("LoginPage-of-DemoApplication/a_MakeAppointment")): Object: 'Object Repository/LoginPage-of-DemoApplication/a_MakeAppointment' is clicked on

2019-05-18 09:49:05 - [MESSAGE][PASSED] - Object: 'Object Repository/LoginPage-of-DemoApplication/a_MakeAppointment' is clicked on

2019-05-18 09:49:05 - [TEST_STEP][PASSED] - setText(findTestObject("LoginPage-of-DemoApplication/input_username"), data.internallyGetValue("user", index)): Text 'John Doe' is set on object 'Object Repository/LoginPage-of-DemoApplication/input_username'

2019-05-18 09:49:06 - [MESSAGE][PASSED] - Text 'John Doe' is set on object 'Object Repository/LoginPage-of-DemoApplication/input_username'

2019-05-18 09:49:06 - [TEST_STEP][PASSED] - setText(findTestObject("LoginPage-of-DemoApplication/input_password"), data.internallyGetValue("pass", index)): Text 'ThisIsNotAPassword' is set on object 'Object Repository/LoginPage-of-DemoApplication/input_password'

2019-05-18 09:49:07 - [MESSAGE][PASSED] - Text 'ThisIsNotAPassword' is set on object 'Object Repository/LoginPage-of-DemoApplication/input_password'

2019-05-18 09:49:07 - [TEST_STEP][PASSED] - click(findTestObject("LoginPage-of-DemoApplication/button_Login")): Object: 'Object Repository/LoginPage-of-DemoApplication/button_Login' is clicked on

2019-05-18 09:49:08 - [MESSAGE][PASSED] - Object: 'Object Repository/LoginPage-of-DemoApplication/button_Login' is clicked on

2019-05-18 09:49:08 - [TEST_STEP][PASSED] - closeBrowser(): Browser is closed

2019-05-18 09:49:09 - [MESSAGE][PASSED] - Browser is closed]]></system-out>
         <system-err><![CDATA[]]></system-err>
      </testcase>
      <testcase name="Test Cases/Demo/demotest" classname="Test Cases/Demo/demotest" status="PASSED">
         <system-out><![CDATA[2019-05-18 09:49:09 - [TEST_CASE][PASSED] - Test Cases/Demo/demotest: Test Cases/Demo/demotest

2019-05-18 09:49:09 - [TEST_STEP][PASSED] - Start listener action : sampleBeforeTestCase: null

2019-05-18 09:49:09 - [TEST_STEP][PASSED] - println(testCaseContext.getTestCaseId()): null

2019-05-18 09:49:09 - [TEST_STEP][PASSED] - println(testCaseContext.getTestCaseVariables()): null

2019-05-18 09:49:11 - [TEST_STEP][PASSED] - c = Calendar.getInstance(): null

2019-05-18 09:49:11 - [TEST_STEP][PASSED] - monthMaxDays = c.getActualMaximum(DAY_OF_MONTH): null

2019-05-18 09:49:11 - [TEST_STEP][PASSED] - println("Current month count of dates: " + monthMaxDays): null

2019-05-18 09:49:11 - [TEST_STEP][PASSED] - day = c.get(DATE): null

2019-05-18 09:49:11 - [TEST_STEP][PASSED] - println("day " + day): null

2019-05-18 09:49:11 - [TEST_STEP][PASSED] - validDays = monthMaxDays - day: null

2019-05-18 09:49:11 - [TEST_STEP][PASSED] - println("Valid calendar days in month: " + validDays): null

2019-05-18 09:49:11 - [TEST_STEP][PASSED] - startDate = monthMaxDays - validDays: null

2019-05-18 09:49:11 - [TEST_STEP][PASSED] - strStartDate = startDate.toString(): null

2019-05-18 09:49:11 - [TEST_STEP][PASSED] - x = startDate: null

2019-05-18 09:49:11 - [TEST_STEP][PASSED] - (x++): null

2019-05-18 09:49:11 - [TEST_STEP][PASSED] - println("start date " + x): null

2019-05-18 09:49:11 - [TEST_STEP][PASSED] - openBrowser("https://www.katalon.com/"): Browser is opened with url: 'https://www.katalon.com/'

2019-05-18 09:49:11 - [MESSAGE][INFO] - Starting 'Chrome' driver

2019-05-18 09:49:11 - [MESSAGE][INFO] - User set preference: ['args', '[--disable-infobars, --no-sandbox]']

2019-05-18 09:49:24 - [MESSAGE][PASSED] - Browser is opened with url: 'https://www.katalon.com/'

2019-05-18 09:49:24 - [TEST_STEP][PASSED] - driver = getWebDriver(): null

2019-05-18 09:49:24 - [TEST_STEP][PASSED] - baseUrl = "https://www.katalon.com/": null

2019-05-18 09:49:24 - [TEST_STEP][PASSED] - selenium = new com.thoughtworks.selenium.webdriven.WebDriverBackedSelenium(driver, baseUrl): null

2019-05-18 09:49:25 - [TEST_STEP][PASSED] - selenium.open("https://katalon-demo-cura.herokuapp.com/"): null

2019-05-18 09:49:27 - [TEST_STEP][PASSED] - selenium.click("id=btn-make-appointment"): null

2019-05-18 09:49:28 - [TEST_STEP][PASSED] - selenium.type("id=txt-username", "John Doe"): null

2019-05-18 09:49:29 - [TEST_STEP][PASSED] - selenium.type("id=txt-password", "ThisIsNotAPassword"): null

2019-05-18 09:49:29 - [TEST_STEP][PASSED] - selenium.click("id=btn-login"): null

2019-05-18 09:49:30 - [TEST_STEP][PASSED] - selenium.click("id=combo_facility"): null

2019-05-18 09:49:30 - [TEST_STEP][PASSED] - selenium.select("id=combo_facility", "label=Hongkong CURA Healthcare Center"): null

2019-05-18 09:49:31 - [TEST_STEP][PASSED] - selenium.click("id=combo_facility"): null

2019-05-18 09:49:31 - [TEST_STEP][PASSED] - selenium.click("id=chk_hospotal_readmission"): null

2019-05-18 09:49:31 - [TEST_STEP][PASSED] - selenium.click("id=radio_program_medicaid"): null

2019-05-18 09:49:32 - [TEST_STEP][PASSED] - selenium.click("xpath=(.//*[normalize-space(text()) and normalize-space(.)='Visit Date (Required)'])[1]/following::span[1]"): null

2019-05-18 09:49:32 - [TEST_STEP][PASSED] - selenium.click("xpath=(.//*[normalize-space(text()) and normalize-space(.)='Visit Date (Required)'])[1]/following::span[1]"): null

2019-05-18 09:49:32 - [TEST_STEP][PASSED] - selenium.click("xpath=(.//*[normalize-space(text()) and normalize-space(.)='Sa'])[1]/following::td[" + x + "]"): null

2019-05-18 09:49:32 - [TEST_STEP][PASSED] - selenium.click("id=txt_comment"): null

2019-05-18 09:49:33 - [TEST_STEP][PASSED] - selenium.type("id=txt_comment", "python"): null

2019-05-18 09:49:33 - [TEST_STEP][PASSED] - Assert.assertEquals("Make Appointment", selenium.getText("xpath=(.//*[normalize-space(text()) and normalize-space(.)='Make Appointment'])[1]/following::h2[1]")): null

2019-05-18 09:49:33 - [TEST_STEP][PASSED] - selenium.click("id=btn-book-appointment"): null

2019-05-18 09:49:34 - [TEST_STEP][PASSED] - Assert.assertEquals("Appointment Confirmation", selenium.getText("xpath=(.//*[normalize-space(text()) and normalize-space(.)='Make Appointment'])[1]/following::h2[1]")): null

2019-05-18 09:49:34 - [TEST_STEP][PASSED] - selenium.click("link=Go to Homepage"): null

2019-05-18 09:49:35 - [TEST_STEP][PASSED] - selenium.click("xpath=(.//*[normalize-space(text()) and normalize-space(.)='CURA Healthcare'])[1]/preceding::i[2]"): null

2019-05-18 09:49:35 - [TEST_STEP][PASSED] - selenium.click("link=Logout"): null

2019-05-18 09:49:36 - [TEST_STEP][PASSED] - selenium.close(): null]]></system-out>
         <system-err><![CDATA[]]></system-err>
      </testcase>
      <testcase name="Test Cases/ReadPdf/pdfReader" classname="Test Cases/ReadPdf/pdfReader" status="PASSED">
         <system-out><![CDATA[2019-05-18 09:49:38 - [TEST_CASE][PASSED] - Test Cases/ReadPdf/pdfReader: Test Cases/ReadPdf/pdfReader

2019-05-18 09:49:38 - [TEST_STEP][PASSED] - Start listener action : sampleBeforeTestCase: null

2019-05-18 09:49:38 - [TEST_STEP][PASSED] - println(testCaseContext.getTestCaseId()): null

2019-05-18 09:49:38 - [TEST_STEP][PASSED] - println(testCaseContext.getTestCaseVariables()): null

2019-05-18 09:49:40 - [TEST_STEP][PASSED] - closeBrowser(): Browser is closed

2019-05-18 09:49:41 - [MESSAGE][PASSED] - Browser is closed

2019-05-18 09:49:41 - [TEST_STEP][PASSED] - openBrowser(""): Browser is opened with url: ''

2019-05-18 09:49:41 - [MESSAGE][INFO] - Starting 'Chrome' driver

2019-05-18 09:49:41 - [MESSAGE][INFO] - User set preference: ['args', '[--disable-infobars, --no-sandbox]']

2019-05-18 09:49:45 - [MESSAGE][PASSED] - Browser is opened with url: ''

2019-05-18 09:49:45 - [TEST_STEP][PASSED] - navigateToUrl("http://www.testingdiaries.com/selenium-webdriver-read-pdf-content/"): Navigate to 'http://www.testingdiaries.com/selenium-webdriver-read-pdf-content/' successfully

2019-05-18 09:49:56 - [MESSAGE][PASSED] - Navigate to 'http://www.testingdiaries.com/selenium-webdriver-read-pdf-content/' successfully

2019-05-18 09:49:56 - [TEST_STEP][PASSED] - click(findTestObject("Page_SeleniumWebDriverRead-PDF-Co/a_this-location")): Object: 'Object Repository/Page_SeleniumWebDriverRead-PDF-Co/a_this-location' is clicked on

2019-05-18 09:49:57 - [MESSAGE][PASSED] - Object: 'Object Repository/Page_SeleniumWebDriverRead-PDF-Co/a_this-location' is clicked on

2019-05-18 09:49:57 - [TEST_STEP][PASSED] - pdfContent = readPdfFile.verifyPdfContent.readPdfFileVerify("http://www.axmag.com/download/pdfurl-guide.pdf"): readPdfFile.verifyPdfContent.readPdfFileVerify is PASSED

2019-05-18 09:50:02 - [MESSAGE][PASSED] - readPdfFile.verifyPdfContent.readPdfFileVerify is PASSED

2019-05-18 09:50:02 - [TEST_STEP][PASSED] - Assert.assertTrue(pdfContent.contains("Open the setting.xml, you can see it is like this:")): null

2019-05-18 09:50:02 - [TEST_STEP][PASSED] - Assert.assertTrue(pdfContent.contains("Please add the following sentence in setting.xml before")): null

2019-05-18 09:50:02 - [TEST_STEP][PASSED] - Assert.assertTrue(pdfContent.contains("You can see that I have modified the setting.xml, and if open the file in IE, it is like this:")): null

2019-05-18 09:50:02 - [TEST_STEP][PASSED] - println("PDF IS GOOD TO GO..."): null

2019-05-18 09:50:02 - [TEST_STEP][PASSED] - closeBrowser(): Browser is closed

2019-05-18 09:50:03 - [MESSAGE][PASSED] - Browser is closed]]></system-out>
         <system-err><![CDATA[]]></system-err>
      </testcase>
      <testcase name="Test Cases/Demo/withoutWhiteSpaces" classname="Test Cases/Demo/withoutWhiteSpaces" status="PASSED">
         <system-out><![CDATA[2019-05-18 09:50:03 - [TEST_CASE][PASSED] - Test Cases/Demo/withoutWhiteSpaces: Test Cases/Demo/withoutWhiteSpaces

2019-05-18 09:50:03 - [TEST_STEP][PASSED] - Start listener action : sampleBeforeTestCase: null

2019-05-18 09:50:03 - [TEST_STEP][PASSED] - println(testCaseContext.getTestCaseId()): null

2019-05-18 09:50:03 - [TEST_STEP][PASSED] - println(testCaseContext.getTestCaseVariables()): null

2019-05-18 09:50:04 - [TEST_STEP][PASSED] - openBrowser(""): Browser is opened with url: ''

2019-05-18 09:50:04 - [MESSAGE][INFO] - Starting 'Chrome' driver

2019-05-18 09:50:04 - [MESSAGE][INFO] - User set preference: ['args', '[--disable-infobars, --no-sandbox]']

2019-05-18 09:50:08 - [MESSAGE][PASSED] - Browser is opened with url: ''

2019-05-18 09:50:08 - [TEST_STEP][PASSED] - log = new com.kms.katalon.core.logging.KeywordLogger(): null

2019-05-18 09:50:08 - [TEST_STEP][PASSED] - log.logInfo("yourMsg"): yourMsg

2019-05-18 09:50:08 - [MESSAGE][INFO] - yourMsg

2019-05-18 09:50:08 - [TEST_STEP][PASSED] - comment("myMessage"): myMessage

2019-05-18 09:50:08 - [MESSAGE][INFO] - myMessage

2019-05-18 09:50:08 - [TEST_STEP][PASSED] - navigateToUrl("https://katalon-demo-cura.herokuapp.com/"): Navigate to 'https://katalon-demo-cura.herokuapp.com/' successfully

2019-05-18 09:50:11 - [MESSAGE][PASSED] - Navigate to 'https://katalon-demo-cura.herokuapp.com/' successfully

2019-05-18 09:50:11 - [TEST_STEP][PASSED] - click(findTestObject("Object Repository/withoutSpaces/Page_CURAHealthcareService/a_MakeAppointment")): Object: 'Object Repository/withoutSpaces/Page_CURAHealthcareService/a_MakeAppointment' is clicked on

2019-05-18 09:50:12 - [MESSAGE][PASSED] - Object: 'Object Repository/withoutSpaces/Page_CURAHealthcareService/a_MakeAppointment' is clicked on

2019-05-18 09:50:12 - [TEST_STEP][PASSED] - delay(1): Delayed 1 second(s)

2019-05-18 09:50:13 - [MESSAGE][PASSED] - Delayed 1 second(s)

2019-05-18 09:50:13 - [TEST_STEP][PASSED] - element = findWebElement(findTestObject("Object Repository/withoutSpaces/Page_CURAHealthcareService/input_Username_username"), 30): null

2019-05-18 09:50:13 - [TEST_STEP][PASSED] - executeJavaScript("arguments[0].value='John Doe';", Arrays.asList(element)): Execute JavaScript 'arguments[0].value='John Doe';' successfully

2019-05-18 09:50:13 - [MESSAGE][PASSED] - Execute JavaScript 'arguments[0].value='John Doe';' successfully

2019-05-18 09:50:13 - [TEST_STEP][PASSED] - x = executeJavaScript("return document.getElementById('txt-username').readOnly=true;", null): Execute JavaScript 'return document.getElementById('txt-username').readOnly=true;' successfully

2019-05-18 09:50:13 - [MESSAGE][PASSED] - Execute JavaScript 'return document.getElementById('txt-username').readOnly=true;' successfully

2019-05-18 09:50:13 - [TEST_STEP][PASSED] - println("DEBUG readOnly value x " + x): null

2019-05-18 09:50:13 - [TEST_STEP][PASSED] - y = executeJavaScript("return document.getElementsByClassName('form-control')[0].readOnly=false;", null): Execute JavaScript 'return document.getElementsByClassName('form-control')[0].readOnly=false;' successfully

2019-05-18 09:50:13 - [MESSAGE][PASSED] - Execute JavaScript 'return document.getElementsByClassName('form-control')[0].readOnly=false;' successfully

2019-05-18 09:50:13 - [TEST_STEP][PASSED] - println("DEBUG readOnly value y " + y): null

2019-05-18 09:50:13 - [TEST_STEP][PASSED] - z = executeJavaScript("return document.getElementsByClassName('form-control')[0].readOnly;", null): Execute JavaScript 'return document.getElementsByClassName('form-control')[0].readOnly;' successfully

2019-05-18 09:50:13 - [MESSAGE][PASSED] - Execute JavaScript 'return document.getElementsByClassName('form-control')[0].readOnly;' successfully

2019-05-18 09:50:13 - [TEST_STEP][PASSED] - if (z): null

2019-05-18 09:50:13 - [TEST_STEP][PASSED] - else: null

2019-05-18 09:50:13 - [TEST_STEP][PASSED] - println("DEBUG object is editable " + z): null

2019-05-18 09:50:13 - [TEST_STEP][PASSED] - notEditable = setText(findTestObject("Object Repository/withoutSpaces/Page_CURAHealthcareService/input_Username_username"), "John Doe", OPTIONAL): Unable to set text 'John Doe' of object 'Object Repository/withoutSpaces/Page_CURAHealthcareService/input_Username_username' (Root cause: com.kms.katalon.core.exception.StepFailedException: Unable to set text 'John Doe' of object 'Object Repository/withoutSpaces/Page_CURAHealthcareService/input_Username_username'
	at com.kms.katalon.core.webui.keyword.internal.WebUIKeywordMain.stepFailed(WebUIKeywordMain.groovy:64)
	at com.kms.katalon.core.webui.keyword.internal.WebUIKeywordMain.runKeyword(WebUIKeywordMain.groovy:26)
	at com.kms.katalon.core.webui.keyword.builtin.SetTextKeyword.setText(SetTextKeyword.groovy:66)
	at com.kms.katalon.core.webui.keyword.builtin.SetTextKeyword.execute(SetTextKeyword.groovy:37)
	at com.kms.katalon.core.keyword.internal.KeywordExecutor.executeKeywordForPlatform(KeywordExecutor.groovy:56)
	at com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords.setText(WebUiBuiltInKeywords.groovy:936)
	at com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords$setText$6.call(Unknown Source)
	at withoutWhiteSpaces.run(withoutWhiteSpaces:51)
	at com.kms.katalon.core.main.ScriptEngine.run(ScriptEngine.java:194)
	at com.kms.katalon.core.main.ScriptEngine.runScriptAsRawText(ScriptEngine.java:119)
	at com.kms.katalon.core.main.TestCaseExecutor.runScript(TestCaseExecutor.java:336)
	at com.kms.katalon.core.main.TestCaseExecutor.doExecute(TestCaseExecutor.java:327)
	at com.kms.katalon.core.main.TestCaseExecutor.processExecutionPhase(TestCaseExecutor.java:306)
	at com.kms.katalon.core.main.TestCaseExecutor.accessMainPhase(TestCaseExecutor.java:298)
	at com.kms.katalon.core.main.TestCaseExecutor.execute(TestCaseExecutor.java:232)
	at com.kms.katalon.core.main.TestSuiteExecutor.accessTestCaseMainPhase(TestSuiteExecutor.java:129)
	at com.kms.katalon.core.main.TestSuiteExecutor.accessTestSuiteMainPhase(TestSuiteExecutor.java:112)
	at com.kms.katalon.core.main.TestSuiteExecutor.execute(TestSuiteExecutor.java:81)
	at com.kms.katalon.core.main.TestCaseMain.startTestSuite(TestCaseMain.java:157)
	at com.kms.katalon.core.main.TestCaseMain$startTestSuite$0.call(Unknown Source)
	at TempTestSuite1558162044048.run(TempTestSuite1558162044048.groovy:35)
Caused by: org.openqa.selenium.InvalidElementStateException: invalid element state: Element must be user-editable in order to clear it.
  (Session info: chrome=74.0.3729.157)
  (Driver info: chromedriver=74.0.3729.6 (255758eccf3d244491b8a1317aa76e1ce10d57e9-refs/branch-heads/3729@{#29}),platform=Windows NT 10.0.17134 x86_64) (WARNING: The server did not provide any stacktrace information)
Command duration or timeout: 0 milliseconds
Build info: version: '3.141.5', revision: 'd54ebd709a', time: '2018-11-06T11:58:47'
System info: host: 'LAPTOP-AK5DO7TK', ip: '192.168.0.15', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '1.8.0_181'
Driver info: com.kms.katalon.selenium.driver.CChromeDriver
Capabilities {acceptInsecureCerts: false, acceptSslCerts: false, applicationCacheEnabled: false, browserConnectionEnabled: false, browserName: chrome, chrome: {chromedriverVersion: 74.0.3729.6 (255758eccf3d24..., userDataDir: C:\WINDOWS\TEMP\scoped_dir1...}, cssSelectorsEnabled: true, databaseEnabled: false, goog:chromeOptions: {debuggerAddress: localhost:25169}, handlesAlerts: true, hasTouchScreen: false, javascriptEnabled: true, locationContextEnabled: true, mobileEmulationEnabled: false, nativeEvents: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: XP, platformName: XP, proxy: Proxy(direct), rotatable: false, setWindowRect: true, strictFileInteractability: false, takesHeapSnapshot: true, takesScreenshot: true, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unexpectedAlertBehaviour: ignore, unhandledPromptBehavior: ignore, version: 74.0.3729.157, webStorageEnabled: true}
Session ID: 931c0039da9b27404e8ccce8bac2ce36
	at org.openqa.selenium.remote.ErrorHandler.createThrowable(ErrorHandler.java:214)
	at org.openqa.selenium.remote.ErrorHandler.throwIfResponseFailed(ErrorHandler.java:166)
	at org.openqa.selenium.remote.http.JsonHttpResponseCodec.reconstructValue(JsonHttpResponseCodec.java:40)
	at org.openqa.selenium.remote.http.AbstractHttpResponseCodec.decode(AbstractHttpResponseCodec.java:80)
	at org.openqa.selenium.remote.http.AbstractHttpResponseCodec.decode(AbstractHttpResponseCodec.java:44)
	at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
	at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)
	at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)
	at com.kms.katalon.selenium.driver.CChromeDriver.execute(CChromeDriver.java:20)
	at org.openqa.selenium.remote.RemoteWebElement.execute(RemoteWebElement.java:285)
	at org.openqa.selenium.remote.RemoteWebElement.clear(RemoteWebElement.java:124)
	at com.kms.katalon.core.webui.keyword.builtin.SetTextKeyword$_setText_closure1.doCall(SetTextKeyword.groovy:53)
	at com.kms.katalon.core.webui.keyword.builtin.SetTextKeyword$_setText_closure1.call(SetTextKeyword.groovy)
	at com.kms.katalon.core.webui.keyword.internal.WebUIKeywordMain.runKeyword(WebUIKeywordMain.groovy:20)
	at com.kms.katalon.core.webui.keyword.builtin.SetTextKeyword.setText(SetTextKeyword.groovy:66)
	at com.kms.katalon.core.webui.keyword.builtin.SetTextKeyword.execute(SetTextKeyword.groovy:37)
	at com.kms.katalon.core.keyword.internal.KeywordExecutor.executeKeywordForPlatform(KeywordExecutor.groovy:56)
	at com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords.setText(WebUiBuiltInKeywords.groovy:936)
	at com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords$setText$6.call(Unknown Source)
	at Script1544094037877.run(Script1544094037877.groovy:51)
	... 13 more
)

2019-05-18 09:50:14 - [MESSAGE][WARNING] - Unable to set text 'John Doe' of object 'Object Repository/withoutSpaces/Page_CURAHealthcareService/input_Username_username' (Root cause: com.kms.katalon.core.exception.StepFailedException: Unable to set text 'John Doe' of object 'Object Repository/withoutSpaces/Page_CURAHealthcareService/input_Username_username'
	at com.kms.katalon.core.webui.keyword.internal.WebUIKeywordMain.stepFailed(WebUIKeywordMain.groovy:64)
	at com.kms.katalon.core.webui.keyword.internal.WebUIKeywordMain.runKeyword(WebUIKeywordMain.groovy:26)
	at com.kms.katalon.core.webui.keyword.builtin.SetTextKeyword.setText(SetTextKeyword.groovy:66)
	at com.kms.katalon.core.webui.keyword.builtin.SetTextKeyword.execute(SetTextKeyword.groovy:37)
	at com.kms.katalon.core.keyword.internal.KeywordExecutor.executeKeywordForPlatform(KeywordExecutor.groovy:56)
	at com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords.setText(WebUiBuiltInKeywords.groovy:936)
	at com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords$setText$6.call(Unknown Source)
	at withoutWhiteSpaces.run(withoutWhiteSpaces:51)
	at com.kms.katalon.core.main.ScriptEngine.run(ScriptEngine.java:194)
	at com.kms.katalon.core.main.ScriptEngine.runScriptAsRawText(ScriptEngine.java:119)
	at com.kms.katalon.core.main.TestCaseExecutor.runScript(TestCaseExecutor.java:336)
	at com.kms.katalon.core.main.TestCaseExecutor.doExecute(TestCaseExecutor.java:327)
	at com.kms.katalon.core.main.TestCaseExecutor.processExecutionPhase(TestCaseExecutor.java:306)
	at com.kms.katalon.core.main.TestCaseExecutor.accessMainPhase(TestCaseExecutor.java:298)
	at com.kms.katalon.core.main.TestCaseExecutor.execute(TestCaseExecutor.java:232)
	at com.kms.katalon.core.main.TestSuiteExecutor.accessTestCaseMainPhase(TestSuiteExecutor.java:129)
	at com.kms.katalon.core.main.TestSuiteExecutor.accessTestSuiteMainPhase(TestSuiteExecutor.java:112)
	at com.kms.katalon.core.main.TestSuiteExecutor.execute(TestSuiteExecutor.java:81)
	at com.kms.katalon.core.main.TestCaseMain.startTestSuite(TestCaseMain.java:157)
	at com.kms.katalon.core.main.TestCaseMain$startTestSuite$0.call(Unknown Source)
	at TempTestSuite1558162044048.run(TempTestSuite1558162044048.groovy:35)
Caused by: org.openqa.selenium.InvalidElementStateException: invalid element state: Element must be user-editable in order to clear it.
  (Session info: chrome=74.0.3729.157)
  (Driver info: chromedriver=74.0.3729.6 (255758eccf3d244491b8a1317aa76e1ce10d57e9-refs/branch-heads/3729@{#29}),platform=Windows NT 10.0.17134 x86_64) (WARNING: The server did not provide any stacktrace information)
Command duration or timeout: 0 milliseconds
Build info: version: '3.141.5', revision: 'd54ebd709a', time: '2018-11-06T11:58:47'
System info: host: 'LAPTOP-AK5DO7TK', ip: '192.168.0.15', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '1.8.0_181'
Driver info: com.kms.katalon.selenium.driver.CChromeDriver
Capabilities {acceptInsecureCerts: false, acceptSslCerts: false, applicationCacheEnabled: false, browserConnectionEnabled: false, browserName: chrome, chrome: {chromedriverVersion: 74.0.3729.6 (255758eccf3d24..., userDataDir: C:\WINDOWS\TEMP\scoped_dir1...}, cssSelectorsEnabled: true, databaseEnabled: false, goog:chromeOptions: {debuggerAddress: localhost:25169}, handlesAlerts: true, hasTouchScreen: false, javascriptEnabled: true, locationContextEnabled: true, mobileEmulationEnabled: false, nativeEvents: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: XP, platformName: XP, proxy: Proxy(direct), rotatable: false, setWindowRect: true, strictFileInteractability: false, takesHeapSnapshot: true, takesScreenshot: true, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unexpectedAlertBehaviour: ignore, unhandledPromptBehavior: ignore, version: 74.0.3729.157, webStorageEnabled: true}
Session ID: 931c0039da9b27404e8ccce8bac2ce36
	at org.openqa.selenium.remote.ErrorHandler.createThrowable(ErrorHandler.java:214)
	at org.openqa.selenium.remote.ErrorHandler.throwIfResponseFailed(ErrorHandler.java:166)
	at org.openqa.selenium.remote.http.JsonHttpResponseCodec.reconstructValue(JsonHttpResponseCodec.java:40)
	at org.openqa.selenium.remote.http.AbstractHttpResponseCodec.decode(AbstractHttpResponseCodec.java:80)
	at org.openqa.selenium.remote.http.AbstractHttpResponseCodec.decode(AbstractHttpResponseCodec.java:44)
	at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
	at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)
	at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)
	at com.kms.katalon.selenium.driver.CChromeDriver.execute(CChromeDriver.java:20)
	at org.openqa.selenium.remote.RemoteWebElement.execute(RemoteWebElement.java:285)
	at org.openqa.selenium.remote.RemoteWebElement.clear(RemoteWebElement.java:124)
	at com.kms.katalon.core.webui.keyword.builtin.SetTextKeyword$_setText_closure1.doCall(SetTextKeyword.groovy:53)
	at com.kms.katalon.core.webui.keyword.builtin.SetTextKeyword$_setText_closure1.call(SetTextKeyword.groovy)
	at com.kms.katalon.core.webui.keyword.internal.WebUIKeywordMain.runKeyword(WebUIKeywordMain.groovy:20)
	at com.kms.katalon.core.webui.keyword.builtin.SetTextKeyword.setText(SetTextKeyword.groovy:66)
	at com.kms.katalon.core.webui.keyword.builtin.SetTextKeyword.execute(SetTextKeyword.groovy:37)
	at com.kms.katalon.core.keyword.internal.KeywordExecutor.executeKeywordForPlatform(KeywordExecutor.groovy:56)
	at com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords.setText(WebUiBuiltInKeywords.groovy:936)
	at com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords$setText$6.call(Unknown Source)
	at Script1544094037877.run(Script1544094037877.groovy:51)
	... 13 more
)
[[ATTACHMENT|C:\\Users\\fitim\\.git\\KatalonProject\\Reports\\RegressionTestSuite\\20190518_094723\\1558162214052.png]]

2019-05-18 09:50:14 - [TEST_STEP][PASSED] - println("DEBUG boolean value " + notEditable): null

2019-05-18 09:50:14 - [TEST_STEP][PASSED] - setEncryptedText(findTestObject("Object Repository/withoutSpaces/Page_CURAHealthcareService/input_Password_password"), "g3/DOGG74jC3Flrr3yH+3D/yKbOqqUNM"): Text ****** has been set on object 'Object Repository/withoutSpaces/Page_CURAHealthcareService/input_Password_password'

2019-05-18 09:50:15 - [MESSAGE][PASSED] - Text ****** has been set on object 'Object Repository/withoutSpaces/Page_CURAHealthcareService/input_Password_password'

2019-05-18 09:50:15 - [TEST_STEP][PASSED] - click(findTestObject("Object Repository/withoutSpaces/Page_CURAHealthcareService/button_Login")): Object: 'Object Repository/withoutSpaces/Page_CURAHealthcareService/button_Login' is clicked on

2019-05-18 09:50:17 - [MESSAGE][PASSED] - Object: 'Object Repository/withoutSpaces/Page_CURAHealthcareService/button_Login' is clicked on

2019-05-18 09:50:17 - [TEST_STEP][PASSED] - selectOptionByValue(findTestObject("Object Repository/withoutSpaces/Page_CURAHealthcareService/select_TokyoCURAHealthcareC"), "Seoul CURA Healthcare Center", true): All options with value 'Seoul CURA Healthcare Center' are selected in object 'Object Repository/withoutSpaces/Page_CURAHealthcareService/select_TokyoCURAHealthcareC'  using regular expression

2019-05-18 09:50:17 - [MESSAGE][PASSED] - All options with value 'Seoul CURA Healthcare Center' are selected in object 'Object Repository/withoutSpaces/Page_CURAHealthcareService/select_TokyoCURAHealthcareC'  using regular expression

2019-05-18 09:50:17 - [TEST_STEP][PASSED] - click(findTestObject("Object Repository/withoutSpaces/Page_CURAHealthcareService/input_Applyforhospitalreadm")): Object: 'Object Repository/withoutSpaces/Page_CURAHealthcareService/input_Applyforhospitalreadm' is clicked on

2019-05-18 09:50:17 - [MESSAGE][PASSED] - Object: 'Object Repository/withoutSpaces/Page_CURAHealthcareService/input_Applyforhospitalreadm' is clicked on

2019-05-18 09:50:17 - [TEST_STEP][PASSED] - click(findTestObject("Object Repository/withoutSpaces/Page_CURAHealthcareService/input_Medicaid_programs")): Object: 'Object Repository/withoutSpaces/Page_CURAHealthcareService/input_Medicaid_programs' is clicked on

2019-05-18 09:50:18 - [MESSAGE][PASSED] - Object: 'Object Repository/withoutSpaces/Page_CURAHealthcareService/input_Medicaid_programs' is clicked on

2019-05-18 09:50:18 - [TEST_STEP][PASSED] - click(findTestObject("Object Repository/withoutSpaces/Page_CURAHealthcareService/div_VisitDate(Required)_inpu")): Object: 'Object Repository/withoutSpaces/Page_CURAHealthcareService/div_VisitDate(Required)_inpu' is clicked on

2019-05-18 09:50:18 - [MESSAGE][PASSED] - Object: 'Object Repository/withoutSpaces/Page_CURAHealthcareService/div_VisitDate(Required)_inpu' is clicked on

2019-05-18 09:50:18 - [TEST_STEP][PASSED] - setText(findTestObject("Object Repository/withoutSpaces/Page_CURAHealthcareService/input_VisitDate(Required)_vi"), "15/02/2090"): Text '15/02/2090' is set on object 'Object Repository/withoutSpaces/Page_CURAHealthcareService/input_VisitDate(Required)_vi'

2019-05-18 09:50:19 - [MESSAGE][PASSED] - Text '15/02/2090' is set on object 'Object Repository/withoutSpaces/Page_CURAHealthcareService/input_VisitDate(Required)_vi'

2019-05-18 09:50:19 - [TEST_STEP][PASSED] - setText(findTestObject("Object Repository/withoutSpaces/Page_CURAHealthcareService/textarea_Comment_comment"), "moi"): Text 'moi' is set on object 'Object Repository/withoutSpaces/Page_CURAHealthcareService/textarea_Comment_comment'

2019-05-18 09:50:19 - [MESSAGE][PASSED] - Text 'moi' is set on object 'Object Repository/withoutSpaces/Page_CURAHealthcareService/textarea_Comment_comment'

2019-05-18 09:50:19 - [TEST_STEP][PASSED] - verifyElementPresent(findTestObject("Object Repository/withoutSpaces/Page_CURAHealthcareService/button_BookAppointment"), 30, CONTINUE_ON_FAILURE): Object 'Object Repository/withoutSpaces/Page_CURAHealthcareService/button_BookAppointment' is present

2019-05-18 09:50:19 - [MESSAGE][PASSED] - Object 'Object Repository/withoutSpaces/Page_CURAHealthcareService/button_BookAppointment' is present

2019-05-18 09:50:19 - [TEST_STEP][PASSED] - click(findTestObject("Object Repository/withoutSpaces/Page_CURAHealthcareService/button_BookAppointment")): Object: 'Object Repository/withoutSpaces/Page_CURAHealthcareService/button_BookAppointment' is clicked on

2019-05-18 09:50:20 - [MESSAGE][PASSED] - Object: 'Object Repository/withoutSpaces/Page_CURAHealthcareService/button_BookAppointment' is clicked on

2019-05-18 09:50:20 - [TEST_STEP][PASSED] - click(findTestObject("Object Repository/withoutSpaces/Page_CURAHealthcareService/a_GotoHomepage")): Object: 'Object Repository/withoutSpaces/Page_CURAHealthcareService/a_GotoHomepage' is clicked on

2019-05-18 09:50:21 - [MESSAGE][PASSED] - Object: 'Object Repository/withoutSpaces/Page_CURAHealthcareService/a_GotoHomepage' is clicked on

2019-05-18 09:50:21 - [TEST_STEP][PASSED] - closeBrowser(): Browser is closed

2019-05-18 09:50:21 - [MESSAGE][PASSED] - Browser is closed]]></system-out>
         <system-err><![CDATA[]]></system-err>
      </testcase>
      <testcase name="Test Cases/Web Application/datePicker" classname="Test Cases/Web Application/datePicker" status="PASSED">
         <system-out><![CDATA[2019-05-18 09:50:22 - [TEST_CASE][PASSED] - Test Cases/Web Application/datePicker: Test Cases/Web Application/datePicker

2019-05-18 09:50:22 - [TEST_STEP][PASSED] - Start listener action : sampleBeforeTestCase: null

2019-05-18 09:50:22 - [TEST_STEP][PASSED] - println(testCaseContext.getTestCaseId()): null

2019-05-18 09:50:22 - [TEST_STEP][PASSED] - println(testCaseContext.getTestCaseVariables()): null

2019-05-18 09:50:22 - [TEST_STEP][PASSED] - openBrowser(""): Browser is opened with url: ''

2019-05-18 09:50:22 - [MESSAGE][INFO] - Starting 'Chrome' driver

2019-05-18 09:50:22 - [MESSAGE][INFO] - User set preference: ['args', '[--disable-infobars, --no-sandbox]']

2019-05-18 09:50:25 - [MESSAGE][PASSED] - Browser is opened with url: ''

2019-05-18 09:50:25 - [TEST_STEP][PASSED] - navigateToUrl("https://jqueryui.com/datepicker/"): Navigate to 'https://jqueryui.com/datepicker/' successfully

2019-05-18 09:50:31 - [MESSAGE][PASSED] - Navigate to 'https://jqueryui.com/datepicker/' successfully

2019-05-18 09:50:31 - [TEST_STEP][PASSED] - waitForJQueryLoad(5): jQuery is ready.

2019-05-18 09:50:31 - [MESSAGE][PASSED] - jQuery is ready.

2019-05-18 09:50:31 - [TEST_STEP][PASSED] - switchToFrame(findTestObject("DatePicker/Page_Datepicker_ jQueryUI2/iframe_demo-frame"), 10): null

2019-05-18 09:50:31 - [TEST_STEP][PASSED] - click(findTestObject("DatePicker/Page_Datepicker_ jQueryUI2/input_datepicker")): Object: 'Object Repository/DatePicker/Page_Datepicker_ jQueryUI2/input_datepicker' is clicked on

2019-05-18 09:50:32 - [MESSAGE][PASSED] - Object: 'Object Repository/DatePicker/Page_Datepicker_ jQueryUI2/input_datepicker' is clicked on

2019-05-18 09:50:32 - [TEST_STEP][PASSED] - click(findTestObject("DatePicker/Page_Datepicker jQueryUI/a_20")): Object: 'Object Repository/DatePicker/Page_Datepicker jQueryUI/a_20' is clicked on

2019-05-18 09:50:32 - [MESSAGE][PASSED] - Object: 'Object Repository/DatePicker/Page_Datepicker jQueryUI/a_20' is clicked on

2019-05-18 09:50:32 - [TEST_STEP][PASSED] - datePicker.ReadOnly.readOnlyTrue(): datePicker.ReadOnly.readOnlyTrue is PASSED

2019-05-18 09:50:32 - [MESSAGE][WARNING] - A browser is already opened. Closing browser and opening a new one

2019-05-18 09:50:33 - [MESSAGE][INFO] - Starting 'Chrome' driver

2019-05-18 09:50:33 - [MESSAGE][INFO] - User set preference: ['args', '[--disable-infobars, --no-sandbox]']

2019-05-18 09:50:37 - [MESSAGE][PASSED] - Browser is opened with url: ''

2019-05-18 09:50:39 - [MESSAGE][PASSED] - Navigate to 'https://jqueryui.com/datepicker/' successfully

2019-05-18 09:50:40 - [MESSAGE][PASSED] - Object: 'Object Repository/DatePicker/Page_Datepicker_ jQueryUI2/input_datepicker' is clicked on

2019-05-18 09:50:41 - [MESSAGE][PASSED] - Object: 'Object Repository/DatePicker/Page_Datepicker jQueryUI/a_20' is clicked on

2019-05-18 09:50:41 - [MESSAGE][PASSED] - datePicker.ReadOnly.readOnlyTrue is PASSED

2019-05-18 09:50:41 - [TEST_STEP][PASSED] - txt = getText(findTestObject("DatePicker/Page_Datepicker_ jQueryUI2/input_datepicker")): Text of object 'Object Repository/DatePicker/Page_Datepicker_ jQueryUI2/input_datepicker' is: ''

2019-05-18 09:50:41 - [MESSAGE][PASSED] - Text of object 'Object Repository/DatePicker/Page_Datepicker_ jQueryUI2/input_datepicker' is: ''

2019-05-18 09:50:41 - [TEST_STEP][PASSED] - println("date is " + txt): null

2019-05-18 09:50:41 - [TEST_STEP][PASSED] - verifyTextPresent(txt, false): Text '' is present on page 

2019-05-18 09:50:41 - [MESSAGE][PASSED] - Text '' is present on page 

2019-05-18 09:50:41 - [TEST_STEP][PASSED] - closeBrowser(): Browser is closed

2019-05-18 09:50:43 - [MESSAGE][PASSED] - Browser is closed]]></system-out>
         <system-err><![CDATA[]]></system-err>
      </testcase>
      <testcase name="Test Cases/Web Application/jQueryDatePicker" classname="Test Cases/Web Application/jQueryDatePicker" status="PASSED">
         <system-out><![CDATA[2019-05-18 09:50:43 - [TEST_CASE][PASSED] - Test Cases/Web Application/jQueryDatePicker: Test Cases/Web Application/jQueryDatePicker

2019-05-18 09:50:43 - [TEST_STEP][PASSED] - Start listener action : sampleBeforeTestCase: null

2019-05-18 09:50:43 - [TEST_STEP][PASSED] - println(testCaseContext.getTestCaseId()): null

2019-05-18 09:50:43 - [TEST_STEP][PASSED] - println(testCaseContext.getTestCaseVariables()): null

2019-05-18 09:50:43 - [TEST_STEP][PASSED] - openBrowser(""): Browser is opened with url: ''

2019-05-18 09:50:43 - [MESSAGE][INFO] - Starting 'Chrome' driver

2019-05-18 09:50:43 - [MESSAGE][INFO] - User set preference: ['args', '[--disable-infobars, --no-sandbox]']

2019-05-18 09:50:47 - [MESSAGE][PASSED] - Browser is opened with url: ''

2019-05-18 09:50:47 - [TEST_STEP][PASSED] - c = Calendar.getInstance(): null

2019-05-18 09:50:47 - [TEST_STEP][PASSED] - monthMaxDays = c.getActualMaximum(DAY_OF_MONTH): null

2019-05-18 09:50:47 - [TEST_STEP][PASSED] - println("Current month count of dates: " + monthMaxDays): null

2019-05-18 09:50:47 - [TEST_STEP][PASSED] - day = c.get(DATE): null

2019-05-18 09:50:47 - [TEST_STEP][PASSED] - validDays = monthMaxDays - day: null

2019-05-18 09:50:47 - [TEST_STEP][PASSED] - println("Valid calendar days in month: " + validDays): null

2019-05-18 09:50:47 - [TEST_STEP][PASSED] - startDate = monthMaxDays - validDays: null

2019-05-18 09:50:47 - [TEST_STEP][PASSED] - strStartDate = startDate.toString(): null

2019-05-18 09:50:47 - [TEST_STEP][PASSED] - x = startDate: null

2019-05-18 09:50:47 - [TEST_STEP][PASSED] - y = startDate: null

2019-05-18 09:50:47 - [TEST_STEP][PASSED] - txtval2 = y: null

2019-05-18 09:50:47 - [TEST_STEP][PASSED] - txtval2 = 24: null

2019-05-18 09:50:47 - [TEST_STEP][PASSED] - navigateToUrl("http://2008.kelvinluck.com/assets/jquery/datePicker/v2/demo/datePicker.html"): Navigate to 'http://2008.kelvinluck.com/assets/jquery/datePicker/v2/demo/datePicker.html' successfully

2019-05-18 09:50:49 - [MESSAGE][PASSED] - Navigate to 'http://2008.kelvinluck.com/assets/jquery/datePicker/v2/demo/datePicker.html' successfully

2019-05-18 09:50:49 - [TEST_STEP][PASSED] - myNewObject = new com.kms.katalon.core.testobject.TestObject(myNewObject): null

2019-05-18 09:50:49 - [TEST_STEP][PASSED] - paths = new java.util.ArrayList(): null

2019-05-18 09:50:49 - [TEST_STEP][PASSED] - path25 = "//div[@id='dp-popup']/div[3]/table/tbody/tr[5]/td": null

2019-05-18 09:50:49 - [TEST_STEP][PASSED] - path26 = "//div[@id='dp-popup']/div[3]/table/tbody/tr[5]/td[2]": null

2019-05-18 09:50:49 - [TEST_STEP][PASSED] - path27 = "//div[@id='dp-popup']/div[3]/table/tbody/tr[5]/td[3]": null

2019-05-18 09:50:49 - [TEST_STEP][PASSED] - path28 = "//div[@id='dp-popup']/div[3]/table/tbody/tr[5]/td[4]": null

2019-05-18 09:50:49 - [TEST_STEP][PASSED] - path29 = "//div[@id='dp-popup']/div[3]/table/tbody/tr[5]/td[5]": null

2019-05-18 09:50:49 - [TEST_STEP][PASSED] - path30 = "//div[@id='dp-popup']/div[3]/table/tbody/tr[5]/td[6]": null

2019-05-18 09:50:49 - [TEST_STEP][PASSED] - path31 = "//div[@id='dp-popup']/div[3]/table/tbody/tr[5]/td[7]": null

2019-05-18 09:50:49 - [TEST_STEP][PASSED] - paths.add(path26): null

2019-05-18 09:50:49 - [TEST_STEP][PASSED] - paths.add(path27): null

2019-05-18 09:50:49 - [TEST_STEP][PASSED] - paths.add(path28): null

2019-05-18 09:50:49 - [TEST_STEP][PASSED] - paths.add(path29): null

2019-05-18 09:50:49 - [TEST_STEP][PASSED] - paths.add(path30): null

2019-05-18 09:50:49 - [TEST_STEP][PASSED] - paths.add(path31): null

2019-05-18 09:50:49 - [TEST_STEP][PASSED] - p = 0: null

2019-05-18 09:50:49 - [TEST_STEP][PASSED] - l = new java.util.ArrayList(): null

2019-05-18 09:50:49 - [TEST_STEP][PASSED] - txtval = x: null

2019-05-18 09:50:49 - [TEST_STEP][PASSED] - for ([z = 0, z < validDays + 1, (z++)]): null

2019-05-18 09:50:49 - [TEST_STEP][PASSED] - txtval = (x++): null

2019-05-18 09:50:49 - [TEST_STEP][PASSED] - println(txtval): null

2019-05-18 09:50:49 - [TEST_STEP][PASSED] - click(findTestObject("jQueryDatePicker/Page_jQuery-datePicker/Choose-date")): Object: 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/Choose-date' is clicked on

2019-05-18 09:50:49 - [MESSAGE][PASSED] - Object: 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/Choose-date' is clicked on

2019-05-18 09:50:49 - [TEST_STEP][PASSED] - if (Integer.parseInt(txtval) < 25): Object: 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/day' is clicked on

2019-05-18 09:50:49 - [TEST_STEP][PASSED] - LinkToSearch = modifyObjectProperty(findTestObject("jQueryDatePicker/Page_jQuery-datePicker/day"), "text", "equals", txtval, true): Modify property of object successfully

2019-05-18 09:50:49 - [MESSAGE][PASSED] - Modify property of object successfully

2019-05-18 09:50:49 - [TEST_STEP][PASSED] - click(LinkToSearch, OPTIONAL): Object: 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/day' is clicked on

2019-05-18 09:50:50 - [MESSAGE][PASSED] - Object: 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/day' is clicked on

2019-05-18 09:50:50 - [TEST_STEP][PASSED] - if (Integer.parseInt(txtval) == 25): null

2019-05-18 09:50:50 - [TEST_STEP][PASSED] - if (Integer.parseInt(txtval) > 25): null

2019-05-18 09:50:50 - [TEST_STEP][PASSED] - date = getAttribute(findTestObject("jQueryDatePicker/Page_jQuery-datePicker/getDate"), "value"): Attribute 'value' of object 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/getDate' is: '18/05/2019'

2019-05-18 09:50:50 - [MESSAGE][PASSED] - Attribute 'value' of object 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/getDate' is: '18/05/2019'

2019-05-18 09:50:50 - [TEST_STEP][PASSED] - l.add(date): null

2019-05-18 09:50:50 - [TEST_STEP][PASSED] - txtval = (x++): null

2019-05-18 09:50:50 - [TEST_STEP][PASSED] - println(txtval): null

2019-05-18 09:50:50 - [TEST_STEP][PASSED] - click(findTestObject("jQueryDatePicker/Page_jQuery-datePicker/Choose-date")): Object: 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/Choose-date' is clicked on

2019-05-18 09:50:50 - [MESSAGE][PASSED] - Object: 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/Choose-date' is clicked on

2019-05-18 09:50:50 - [TEST_STEP][PASSED] - if (Integer.parseInt(txtval) < 25): Object: 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/day' is clicked on

2019-05-18 09:50:50 - [TEST_STEP][PASSED] - LinkToSearch = modifyObjectProperty(findTestObject("jQueryDatePicker/Page_jQuery-datePicker/day"), "text", "equals", txtval, true): Modify property of object successfully

2019-05-18 09:50:50 - [MESSAGE][PASSED] - Modify property of object successfully

2019-05-18 09:50:50 - [TEST_STEP][PASSED] - click(LinkToSearch, OPTIONAL): Object: 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/day' is clicked on

2019-05-18 09:50:50 - [MESSAGE][PASSED] - Object: 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/day' is clicked on

2019-05-18 09:50:50 - [TEST_STEP][PASSED] - if (Integer.parseInt(txtval) == 25): null

2019-05-18 09:50:50 - [TEST_STEP][PASSED] - if (Integer.parseInt(txtval) > 25): null

2019-05-18 09:50:50 - [TEST_STEP][PASSED] - date = getAttribute(findTestObject("jQueryDatePicker/Page_jQuery-datePicker/getDate"), "value"): Attribute 'value' of object 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/getDate' is: '19/05/2019'

2019-05-18 09:50:50 - [MESSAGE][PASSED] - Attribute 'value' of object 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/getDate' is: '19/05/2019'

2019-05-18 09:50:50 - [TEST_STEP][PASSED] - l.add(date): null

2019-05-18 09:50:50 - [TEST_STEP][PASSED] - txtval = (x++): null

2019-05-18 09:50:50 - [TEST_STEP][PASSED] - println(txtval): null

2019-05-18 09:50:50 - [TEST_STEP][PASSED] - click(findTestObject("jQueryDatePicker/Page_jQuery-datePicker/Choose-date")): Object: 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/Choose-date' is clicked on

2019-05-18 09:50:50 - [MESSAGE][PASSED] - Object: 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/Choose-date' is clicked on

2019-05-18 09:50:50 - [TEST_STEP][PASSED] - if (Integer.parseInt(txtval) < 25): Object: 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/day' is clicked on

2019-05-18 09:50:50 - [TEST_STEP][PASSED] - LinkToSearch = modifyObjectProperty(findTestObject("jQueryDatePicker/Page_jQuery-datePicker/day"), "text", "equals", txtval, true): Modify property of object successfully

2019-05-18 09:50:50 - [MESSAGE][PASSED] - Modify property of object successfully

2019-05-18 09:50:50 - [TEST_STEP][PASSED] - click(LinkToSearch, OPTIONAL): Object: 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/day' is clicked on

2019-05-18 09:50:51 - [MESSAGE][PASSED] - Object: 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/day' is clicked on

2019-05-18 09:50:51 - [TEST_STEP][PASSED] - if (Integer.parseInt(txtval) == 25): null

2019-05-18 09:50:51 - [TEST_STEP][PASSED] - if (Integer.parseInt(txtval) > 25): null

2019-05-18 09:50:51 - [TEST_STEP][PASSED] - date = getAttribute(findTestObject("jQueryDatePicker/Page_jQuery-datePicker/getDate"), "value"): Attribute 'value' of object 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/getDate' is: '20/05/2019'

2019-05-18 09:50:51 - [MESSAGE][PASSED] - Attribute 'value' of object 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/getDate' is: '20/05/2019'

2019-05-18 09:50:51 - [TEST_STEP][PASSED] - l.add(date): null

2019-05-18 09:50:51 - [TEST_STEP][PASSED] - txtval = (x++): null

2019-05-18 09:50:51 - [TEST_STEP][PASSED] - println(txtval): null

2019-05-18 09:50:51 - [TEST_STEP][PASSED] - click(findTestObject("jQueryDatePicker/Page_jQuery-datePicker/Choose-date")): Object: 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/Choose-date' is clicked on

2019-05-18 09:50:51 - [MESSAGE][PASSED] - Object: 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/Choose-date' is clicked on

2019-05-18 09:50:51 - [TEST_STEP][PASSED] - if (Integer.parseInt(txtval) < 25): Object: 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/day' is clicked on

2019-05-18 09:50:51 - [TEST_STEP][PASSED] - LinkToSearch = modifyObjectProperty(findTestObject("jQueryDatePicker/Page_jQuery-datePicker/day"), "text", "equals", txtval, true): Modify property of object successfully

2019-05-18 09:50:51 - [MESSAGE][PASSED] - Modify property of object successfully

2019-05-18 09:50:51 - [TEST_STEP][PASSED] - click(LinkToSearch, OPTIONAL): Object: 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/day' is clicked on

2019-05-18 09:50:51 - [MESSAGE][PASSED] - Object: 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/day' is clicked on

2019-05-18 09:50:51 - [TEST_STEP][PASSED] - if (Integer.parseInt(txtval) == 25): null

2019-05-18 09:50:51 - [TEST_STEP][PASSED] - if (Integer.parseInt(txtval) > 25): null

2019-05-18 09:50:51 - [TEST_STEP][PASSED] - date = getAttribute(findTestObject("jQueryDatePicker/Page_jQuery-datePicker/getDate"), "value"): Attribute 'value' of object 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/getDate' is: '21/05/2019'

2019-05-18 09:50:51 - [MESSAGE][PASSED] - Attribute 'value' of object 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/getDate' is: '21/05/2019'

2019-05-18 09:50:51 - [TEST_STEP][PASSED] - l.add(date): null

2019-05-18 09:50:51 - [TEST_STEP][PASSED] - txtval = (x++): null

2019-05-18 09:50:51 - [TEST_STEP][PASSED] - println(txtval): null

2019-05-18 09:50:51 - [TEST_STEP][PASSED] - click(findTestObject("jQueryDatePicker/Page_jQuery-datePicker/Choose-date")): Object: 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/Choose-date' is clicked on

2019-05-18 09:50:51 - [MESSAGE][PASSED] - Object: 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/Choose-date' is clicked on

2019-05-18 09:50:51 - [TEST_STEP][PASSED] - if (Integer.parseInt(txtval) < 25): Object: 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/day' is clicked on

2019-05-18 09:50:51 - [TEST_STEP][PASSED] - LinkToSearch = modifyObjectProperty(findTestObject("jQueryDatePicker/Page_jQuery-datePicker/day"), "text", "equals", txtval, true): Modify property of object successfully

2019-05-18 09:50:51 - [MESSAGE][PASSED] - Modify property of object successfully

2019-05-18 09:50:51 - [TEST_STEP][PASSED] - click(LinkToSearch, OPTIONAL): Object: 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/day' is clicked on

2019-05-18 09:50:52 - [MESSAGE][PASSED] - Object: 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/day' is clicked on

2019-05-18 09:50:52 - [TEST_STEP][PASSED] - if (Integer.parseInt(txtval) == 25): null

2019-05-18 09:50:52 - [TEST_STEP][PASSED] - if (Integer.parseInt(txtval) > 25): null

2019-05-18 09:50:52 - [TEST_STEP][PASSED] - date = getAttribute(findTestObject("jQueryDatePicker/Page_jQuery-datePicker/getDate"), "value"): Attribute 'value' of object 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/getDate' is: '22/05/2019'

2019-05-18 09:50:52 - [MESSAGE][PASSED] - Attribute 'value' of object 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/getDate' is: '22/05/2019'

2019-05-18 09:50:52 - [TEST_STEP][PASSED] - l.add(date): null

2019-05-18 09:50:52 - [TEST_STEP][PASSED] - txtval = (x++): null

2019-05-18 09:50:52 - [TEST_STEP][PASSED] - println(txtval): null

2019-05-18 09:50:52 - [TEST_STEP][PASSED] - click(findTestObject("jQueryDatePicker/Page_jQuery-datePicker/Choose-date")): Object: 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/Choose-date' is clicked on

2019-05-18 09:50:52 - [MESSAGE][PASSED] - Object: 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/Choose-date' is clicked on

2019-05-18 09:50:52 - [TEST_STEP][PASSED] - if (Integer.parseInt(txtval) < 25): Object: 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/day' is clicked on

2019-05-18 09:50:52 - [TEST_STEP][PASSED] - LinkToSearch = modifyObjectProperty(findTestObject("jQueryDatePicker/Page_jQuery-datePicker/day"), "text", "equals", txtval, true): Modify property of object successfully

2019-05-18 09:50:52 - [MESSAGE][PASSED] - Modify property of object successfully

2019-05-18 09:50:52 - [TEST_STEP][PASSED] - click(LinkToSearch, OPTIONAL): Object: 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/day' is clicked on

2019-05-18 09:50:52 - [MESSAGE][PASSED] - Object: 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/day' is clicked on

2019-05-18 09:50:52 - [TEST_STEP][PASSED] - if (Integer.parseInt(txtval) == 25): null

2019-05-18 09:50:52 - [TEST_STEP][PASSED] - if (Integer.parseInt(txtval) > 25): null

2019-05-18 09:50:52 - [TEST_STEP][PASSED] - date = getAttribute(findTestObject("jQueryDatePicker/Page_jQuery-datePicker/getDate"), "value"): Attribute 'value' of object 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/getDate' is: '23/05/2019'

2019-05-18 09:50:52 - [MESSAGE][PASSED] - Attribute 'value' of object 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/getDate' is: '23/05/2019'

2019-05-18 09:50:52 - [TEST_STEP][PASSED] - l.add(date): null

2019-05-18 09:50:52 - [TEST_STEP][PASSED] - txtval = (x++): null

2019-05-18 09:50:52 - [TEST_STEP][PASSED] - println(txtval): null

2019-05-18 09:50:52 - [TEST_STEP][PASSED] - click(findTestObject("jQueryDatePicker/Page_jQuery-datePicker/Choose-date")): Object: 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/Choose-date' is clicked on

2019-05-18 09:50:52 - [MESSAGE][PASSED] - Object: 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/Choose-date' is clicked on

2019-05-18 09:50:52 - [TEST_STEP][PASSED] - if (Integer.parseInt(txtval) < 25): Object: 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/day' is clicked on

2019-05-18 09:50:52 - [TEST_STEP][PASSED] - LinkToSearch = modifyObjectProperty(findTestObject("jQueryDatePicker/Page_jQuery-datePicker/day"), "text", "equals", txtval, true): Modify property of object successfully

2019-05-18 09:50:52 - [MESSAGE][PASSED] - Modify property of object successfully

2019-05-18 09:50:52 - [TEST_STEP][PASSED] - click(LinkToSearch, OPTIONAL): Object: 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/day' is clicked on

2019-05-18 09:50:53 - [MESSAGE][PASSED] - Object: 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/day' is clicked on

2019-05-18 09:50:53 - [TEST_STEP][PASSED] - if (Integer.parseInt(txtval) == 25): null

2019-05-18 09:50:53 - [TEST_STEP][PASSED] - if (Integer.parseInt(txtval) > 25): null

2019-05-18 09:50:53 - [TEST_STEP][PASSED] - date = getAttribute(findTestObject("jQueryDatePicker/Page_jQuery-datePicker/getDate"), "value"): Attribute 'value' of object 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/getDate' is: '24/05/2019'

2019-05-18 09:50:53 - [MESSAGE][PASSED] - Attribute 'value' of object 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/getDate' is: '24/05/2019'

2019-05-18 09:50:53 - [TEST_STEP][PASSED] - l.add(date): null

2019-05-18 09:50:53 - [TEST_STEP][PASSED] - txtval = (x++): null

2019-05-18 09:50:53 - [TEST_STEP][PASSED] - println(txtval): null

2019-05-18 09:50:53 - [TEST_STEP][PASSED] - click(findTestObject("jQueryDatePicker/Page_jQuery-datePicker/Choose-date")): Object: 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/Choose-date' is clicked on

2019-05-18 09:50:53 - [MESSAGE][PASSED] - Object: 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/Choose-date' is clicked on

2019-05-18 09:50:53 - [TEST_STEP][PASSED] - if (Integer.parseInt(txtval) < 25): null

2019-05-18 09:50:53 - [TEST_STEP][PASSED] - if (Integer.parseInt(txtval) == 25): Object: 'myNewObject' is clicked on

2019-05-18 09:50:53 - [TEST_STEP][PASSED] - myNewObject.addProperty("xpath", EQUALS, path25, true): null

2019-05-18 09:50:53 - [TEST_STEP][PASSED] - click(myNewObject): Object: 'myNewObject' is clicked on

2019-05-18 09:50:53 - [MESSAGE][PASSED] - Object: 'myNewObject' is clicked on

2019-05-18 09:50:53 - [TEST_STEP][PASSED] - if (Integer.parseInt(txtval) > 25): null

2019-05-18 09:50:53 - [TEST_STEP][PASSED] - date = getAttribute(findTestObject("jQueryDatePicker/Page_jQuery-datePicker/getDate"), "value"): Attribute 'value' of object 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/getDate' is: '27/05/2019'

2019-05-18 09:50:53 - [MESSAGE][PASSED] - Attribute 'value' of object 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/getDate' is: '27/05/2019'

2019-05-18 09:50:53 - [TEST_STEP][PASSED] - l.add(date): null

2019-05-18 09:50:53 - [TEST_STEP][PASSED] - txtval = (x++): null

2019-05-18 09:50:53 - [TEST_STEP][PASSED] - println(txtval): null

2019-05-18 09:50:53 - [TEST_STEP][PASSED] - click(findTestObject("jQueryDatePicker/Page_jQuery-datePicker/Choose-date")): Object: 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/Choose-date' is clicked on

2019-05-18 09:50:53 - [MESSAGE][PASSED] - Object: 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/Choose-date' is clicked on

2019-05-18 09:50:53 - [TEST_STEP][PASSED] - if (Integer.parseInt(txtval) < 25): null

2019-05-18 09:50:53 - [TEST_STEP][PASSED] - if (Integer.parseInt(txtval) == 25): null

2019-05-18 09:50:53 - [TEST_STEP][PASSED] - if (Integer.parseInt(txtval) > 25): Object: 'myNewObject' is clicked on

2019-05-18 09:50:53 - [TEST_STEP][PASSED] - myNewObject.addProperty("xpath", EQUALS, paths.get((p++)), true): null

2019-05-18 09:50:53 - [TEST_STEP][PASSED] - click(myNewObject): Object: 'myNewObject' is clicked on

2019-05-18 09:50:53 - [MESSAGE][PASSED] - Object: 'myNewObject' is clicked on

2019-05-18 09:50:53 - [TEST_STEP][PASSED] - date = getAttribute(findTestObject("jQueryDatePicker/Page_jQuery-datePicker/getDate"), "value"): Attribute 'value' of object 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/getDate' is: '28/05/2019'

2019-05-18 09:50:54 - [MESSAGE][PASSED] - Attribute 'value' of object 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/getDate' is: '28/05/2019'

2019-05-18 09:50:54 - [TEST_STEP][PASSED] - l.add(date): null

2019-05-18 09:50:54 - [TEST_STEP][PASSED] - txtval = (x++): null

2019-05-18 09:50:54 - [TEST_STEP][PASSED] - println(txtval): null

2019-05-18 09:50:54 - [TEST_STEP][PASSED] - click(findTestObject("jQueryDatePicker/Page_jQuery-datePicker/Choose-date")): Object: 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/Choose-date' is clicked on

2019-05-18 09:50:54 - [MESSAGE][PASSED] - Object: 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/Choose-date' is clicked on

2019-05-18 09:50:54 - [TEST_STEP][PASSED] - if (Integer.parseInt(txtval) < 25): null

2019-05-18 09:50:54 - [TEST_STEP][PASSED] - if (Integer.parseInt(txtval) == 25): null

2019-05-18 09:50:54 - [TEST_STEP][PASSED] - if (Integer.parseInt(txtval) > 25): Object: 'myNewObject' is clicked on

2019-05-18 09:50:54 - [TEST_STEP][PASSED] - myNewObject.addProperty("xpath", EQUALS, paths.get((p++)), true): null

2019-05-18 09:50:54 - [TEST_STEP][PASSED] - click(myNewObject): Object: 'myNewObject' is clicked on

2019-05-18 09:50:54 - [MESSAGE][PASSED] - Object: 'myNewObject' is clicked on

2019-05-18 09:50:54 - [TEST_STEP][PASSED] - date = getAttribute(findTestObject("jQueryDatePicker/Page_jQuery-datePicker/getDate"), "value"): Attribute 'value' of object 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/getDate' is: '29/05/2019'

2019-05-18 09:50:54 - [MESSAGE][PASSED] - Attribute 'value' of object 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/getDate' is: '29/05/2019'

2019-05-18 09:50:54 - [TEST_STEP][PASSED] - l.add(date): null

2019-05-18 09:50:54 - [TEST_STEP][PASSED] - txtval = (x++): null

2019-05-18 09:50:54 - [TEST_STEP][PASSED] - println(txtval): null

2019-05-18 09:50:54 - [TEST_STEP][PASSED] - click(findTestObject("jQueryDatePicker/Page_jQuery-datePicker/Choose-date")): Object: 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/Choose-date' is clicked on

2019-05-18 09:50:54 - [MESSAGE][PASSED] - Object: 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/Choose-date' is clicked on

2019-05-18 09:50:54 - [TEST_STEP][PASSED] - if (Integer.parseInt(txtval) < 25): null

2019-05-18 09:50:54 - [TEST_STEP][PASSED] - if (Integer.parseInt(txtval) == 25): null

2019-05-18 09:50:54 - [TEST_STEP][PASSED] - if (Integer.parseInt(txtval) > 25): Object: 'myNewObject' is clicked on

2019-05-18 09:50:54 - [TEST_STEP][PASSED] - myNewObject.addProperty("xpath", EQUALS, paths.get((p++)), true): null

2019-05-18 09:50:54 - [TEST_STEP][PASSED] - click(myNewObject): Object: 'myNewObject' is clicked on

2019-05-18 09:50:54 - [MESSAGE][PASSED] - Object: 'myNewObject' is clicked on

2019-05-18 09:50:54 - [TEST_STEP][PASSED] - date = getAttribute(findTestObject("jQueryDatePicker/Page_jQuery-datePicker/getDate"), "value"): Attribute 'value' of object 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/getDate' is: '30/05/2019'

2019-05-18 09:50:55 - [MESSAGE][PASSED] - Attribute 'value' of object 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/getDate' is: '30/05/2019'

2019-05-18 09:50:55 - [TEST_STEP][PASSED] - l.add(date): null

2019-05-18 09:50:55 - [TEST_STEP][PASSED] - txtval = (x++): null

2019-05-18 09:50:55 - [TEST_STEP][PASSED] - println(txtval): null

2019-05-18 09:50:55 - [TEST_STEP][PASSED] - click(findTestObject("jQueryDatePicker/Page_jQuery-datePicker/Choose-date")): Object: 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/Choose-date' is clicked on

2019-05-18 09:50:55 - [MESSAGE][PASSED] - Object: 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/Choose-date' is clicked on

2019-05-18 09:50:55 - [TEST_STEP][PASSED] - if (Integer.parseInt(txtval) < 25): null

2019-05-18 09:50:55 - [TEST_STEP][PASSED] - if (Integer.parseInt(txtval) == 25): null

2019-05-18 09:50:55 - [TEST_STEP][PASSED] - if (Integer.parseInt(txtval) > 25): Object: 'myNewObject' is clicked on

2019-05-18 09:50:55 - [TEST_STEP][PASSED] - myNewObject.addProperty("xpath", EQUALS, paths.get((p++)), true): null

2019-05-18 09:50:55 - [TEST_STEP][PASSED] - click(myNewObject): Object: 'myNewObject' is clicked on

2019-05-18 09:50:55 - [MESSAGE][PASSED] - Object: 'myNewObject' is clicked on

2019-05-18 09:50:55 - [TEST_STEP][PASSED] - date = getAttribute(findTestObject("jQueryDatePicker/Page_jQuery-datePicker/getDate"), "value"): Attribute 'value' of object 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/getDate' is: '31/05/2019'

2019-05-18 09:50:55 - [MESSAGE][PASSED] - Attribute 'value' of object 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/getDate' is: '31/05/2019'

2019-05-18 09:50:55 - [TEST_STEP][PASSED] - l.add(date): null

2019-05-18 09:50:55 - [TEST_STEP][PASSED] - txtval = (x++): null

2019-05-18 09:50:55 - [TEST_STEP][PASSED] - println(txtval): null

2019-05-18 09:50:55 - [TEST_STEP][PASSED] - click(findTestObject("jQueryDatePicker/Page_jQuery-datePicker/Choose-date")): Object: 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/Choose-date' is clicked on

2019-05-18 09:50:55 - [MESSAGE][PASSED] - Object: 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/Choose-date' is clicked on

2019-05-18 09:50:55 - [TEST_STEP][PASSED] - if (Integer.parseInt(txtval) < 25): null

2019-05-18 09:50:55 - [TEST_STEP][PASSED] - if (Integer.parseInt(txtval) == 25): null

2019-05-18 09:50:55 - [TEST_STEP][PASSED] - if (Integer.parseInt(txtval) > 25): Object: 'myNewObject' is clicked on

2019-05-18 09:50:55 - [TEST_STEP][PASSED] - myNewObject.addProperty("xpath", EQUALS, paths.get((p++)), true): null

2019-05-18 09:50:55 - [TEST_STEP][PASSED] - click(myNewObject): Object: 'myNewObject' is clicked on

2019-05-18 09:50:56 - [MESSAGE][PASSED] - Object: 'myNewObject' is clicked on

2019-05-18 09:50:56 - [TEST_STEP][PASSED] - date = getAttribute(findTestObject("jQueryDatePicker/Page_jQuery-datePicker/getDate"), "value"): Attribute 'value' of object 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/getDate' is: '01/06/2019'

2019-05-18 09:50:56 - [MESSAGE][PASSED] - Attribute 'value' of object 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/getDate' is: '01/06/2019'

2019-05-18 09:50:56 - [TEST_STEP][PASSED] - l.add(date): null

2019-05-18 09:50:56 - [TEST_STEP][PASSED] - txtval = (x++): null

2019-05-18 09:50:56 - [TEST_STEP][PASSED] - println(txtval): null

2019-05-18 09:50:56 - [TEST_STEP][PASSED] - click(findTestObject("jQueryDatePicker/Page_jQuery-datePicker/Choose-date")): Object: 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/Choose-date' is clicked on

2019-05-18 09:50:56 - [MESSAGE][PASSED] - Object: 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/Choose-date' is clicked on

2019-05-18 09:50:56 - [TEST_STEP][PASSED] - if (Integer.parseInt(txtval) < 25): null

2019-05-18 09:50:56 - [TEST_STEP][PASSED] - if (Integer.parseInt(txtval) == 25): null

2019-05-18 09:50:56 - [TEST_STEP][PASSED] - if (Integer.parseInt(txtval) > 25): Object: 'myNewObject' is clicked on

2019-05-18 09:50:56 - [TEST_STEP][PASSED] - myNewObject.addProperty("xpath", EQUALS, paths.get((p++)), true): null

2019-05-18 09:50:56 - [TEST_STEP][PASSED] - click(myNewObject): Object: 'myNewObject' is clicked on

2019-05-18 09:50:56 - [MESSAGE][PASSED] - Object: 'myNewObject' is clicked on

2019-05-18 09:50:56 - [TEST_STEP][PASSED] - date = getAttribute(findTestObject("jQueryDatePicker/Page_jQuery-datePicker/getDate"), "value"): Attribute 'value' of object 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/getDate' is: '02/06/2019'

2019-05-18 09:50:56 - [MESSAGE][PASSED] - Attribute 'value' of object 'Object Repository/jQueryDatePicker/Page_jQuery-datePicker/getDate' is: '02/06/2019'

2019-05-18 09:50:56 - [TEST_STEP][PASSED] - l.add(date): null

2019-05-18 09:50:56 - [TEST_STEP][PASSED] - println("DEBUG list of dates: " + l): null

2019-05-18 09:50:56 - [TEST_STEP][PASSED] - closeBrowser(): Browser is closed

2019-05-18 09:50:57 - [MESSAGE][PASSED] - Browser is closed]]></system-out>
         <system-err><![CDATA[]]></system-err>
      </testcase>
      <testcase name="Test Cases/Web Application/kendo datepicker" classname="Test Cases/Web Application/kendo datepicker" status="PASSED">
         <system-out><![CDATA[2019-05-18 09:50:57 - [TEST_CASE][PASSED] - Test Cases/Web Application/kendo datepicker: Test Cases/Web Application/kendo datepicker

2019-05-18 09:50:57 - [TEST_STEP][PASSED] - Start listener action : sampleBeforeTestCase: null

2019-05-18 09:50:57 - [TEST_STEP][PASSED] - println(testCaseContext.getTestCaseId()): null

2019-05-18 09:50:57 - [TEST_STEP][PASSED] - println(testCaseContext.getTestCaseVariables()): null

2019-05-18 09:50:58 - [TEST_STEP][PASSED] - openBrowser(""): Browser is opened with url: ''

2019-05-18 09:50:58 - [MESSAGE][INFO] - Starting 'Chrome' driver

2019-05-18 09:50:58 - [MESSAGE][INFO] - User set preference: ['args', '[--disable-infobars, --no-sandbox]']

2019-05-18 09:51:02 - [MESSAGE][PASSED] - Browser is opened with url: ''

2019-05-18 09:51:02 - [TEST_STEP][PASSED] - navigateToUrl("http://demos.telerik.com/kendo-ui/datetimepicker/index"): Navigate to 'http://demos.telerik.com/kendo-ui/datetimepicker/index' successfully

2019-05-18 09:51:13 - [MESSAGE][PASSED] - Navigate to 'http://demos.telerik.com/kendo-ui/datetimepicker/index' successfully

2019-05-18 09:51:13 - [TEST_STEP][PASSED] - takeScreenshot("C:\Users\fitim\Desktop\Katalon Studio\screenshots\picture.png"): Taking screenshot successfully

2019-05-18 09:51:14 - [MESSAGE][PASSED] - Taking screenshot successfully
[[ATTACHMENT|C:\\Users\\fitim\\Desktop\\Katalon Studio\\screenshots\\picture.png]]

2019-05-18 09:51:14 - [TEST_STEP][PASSED] - closeBrowser(): Browser is closed

2019-05-18 09:51:16 - [MESSAGE][PASSED] - Browser is closed]]></system-out>
         <system-err><![CDATA[]]></system-err>
      </testcase>
      <testcase name="Test Cases/WebServiceTest/webService" classname="Test Cases/WebServiceTest/webService" status="PASSED">
         <system-out><![CDATA[2019-05-18 09:51:16 - [TEST_CASE][PASSED] - Test Cases/WebServiceTest/webService: Test Cases/WebServiceTest/webService

2019-05-18 09:51:16 - [TEST_STEP][PASSED] - Start listener action : sampleBeforeTestCase: null

2019-05-18 09:51:16 - [TEST_STEP][PASSED] - println(testCaseContext.getTestCaseId()): null

2019-05-18 09:51:16 - [TEST_STEP][PASSED] - println(testCaseContext.getTestCaseVariables()): null

2019-05-18 09:51:17 - [TEST_STEP][PASSED] - response = sendRequest(findTestObject("WebServiceReqs/webRequest")): Send request successfully

2019-05-18 09:51:21 - [MESSAGE][INFO] - HAR: C:\Users\fitim\.git\KatalonProject\Reports\RegressionTestSuite\20190518_094723\requests\main\null.har

2019-05-18 09:51:22 - [MESSAGE][PASSED] - Send request successfully

2019-05-18 09:51:22 - [TEST_STEP][PASSED] - responseText = response.getResponseText(): null

2019-05-18 09:51:22 - [TEST_STEP][PASSED] - println(JsonOutput.prettyPrint(responseText)): null

2019-05-18 09:51:22 - [TEST_STEP][PASSED] - jsonSlurper = new groovy.json.JsonSlurper(): null

2019-05-18 09:51:22 - [TEST_STEP][PASSED] - object = jsonSlurper.parseText(responseText): null

2019-05-18 09:51:22 - [TEST_STEP][PASSED] - jsonSize = circuitId.size(): null

2019-05-18 09:51:22 - [TEST_STEP][PASSED] - log = new com.kms.katalon.core.logging.KeywordLogger(): null

2019-05-18 09:51:22 - [TEST_STEP][PASSED] - log.logInfo("count of json side " + jsonSize): count of json side 20

2019-05-18 09:51:22 - [MESSAGE][INFO] - count of json side 20

2019-05-18 09:51:22 - [TEST_STEP][PASSED] - data = new java.util.ArrayList(): null

2019-05-18 09:51:22 - [TEST_STEP][PASSED] - for ([i = 0, i < jsonSize, (i++)]): null

2019-05-18 09:51:22 - [TEST_STEP][PASSED] - println(circuitId[i]): null

2019-05-18 09:51:22 - [TEST_STEP][PASSED] - data.add(circuitId[i].toString()): null

2019-05-18 09:51:22 - [TEST_STEP][PASSED] - println(circuitId[i]): null

2019-05-18 09:51:22 - [TEST_STEP][PASSED] - data.add(circuitId[i].toString()): null

2019-05-18 09:51:22 - [TEST_STEP][PASSED] - println(circuitId[i]): null

2019-05-18 09:51:22 - [TEST_STEP][PASSED] - data.add(circuitId[i].toString()): null

2019-05-18 09:51:22 - [TEST_STEP][PASSED] - println(circuitId[i]): null

2019-05-18 09:51:22 - [TEST_STEP][PASSED] - data.add(circuitId[i].toString()): null

2019-05-18 09:51:22 - [TEST_STEP][PASSED] - println(circuitId[i]): null

2019-05-18 09:51:22 - [TEST_STEP][PASSED] - data.add(circuitId[i].toString()): null

2019-05-18 09:51:22 - [TEST_STEP][PASSED] - println(circuitId[i]): null

2019-05-18 09:51:22 - [TEST_STEP][PASSED] - data.add(circuitId[i].toString()): null

2019-05-18 09:51:22 - [TEST_STEP][PASSED] - println(circuitId[i]): null

2019-05-18 09:51:22 - [TEST_STEP][PASSED] - data.add(circuitId[i].toString()): null

2019-05-18 09:51:22 - [TEST_STEP][PASSED] - println(circuitId[i]): null

2019-05-18 09:51:22 - [TEST_STEP][PASSED] - data.add(circuitId[i].toString()): null

2019-05-18 09:51:22 - [TEST_STEP][PASSED] - println(circuitId[i]): null

2019-05-18 09:51:22 - [TEST_STEP][PASSED] - data.add(circuitId[i].toString()): null

2019-05-18 09:51:22 - [TEST_STEP][PASSED] - println(circuitId[i]): null

2019-05-18 09:51:22 - [TEST_STEP][PASSED] - data.add(circuitId[i].toString()): null

2019-05-18 09:51:22 - [TEST_STEP][PASSED] - println(circuitId[i]): null

2019-05-18 09:51:22 - [TEST_STEP][PASSED] - data.add(circuitId[i].toString()): null

2019-05-18 09:51:22 - [TEST_STEP][PASSED] - println(circuitId[i]): null

2019-05-18 09:51:22 - [TEST_STEP][PASSED] - data.add(circuitId[i].toString()): null

2019-05-18 09:51:22 - [TEST_STEP][PASSED] - println(circuitId[i]): null

2019-05-18 09:51:22 - [TEST_STEP][PASSED] - data.add(circuitId[i].toString()): null

2019-05-18 09:51:22 - [TEST_STEP][PASSED] - println(circuitId[i]): null

2019-05-18 09:51:22 - [TEST_STEP][PASSED] - data.add(circuitId[i].toString()): null

2019-05-18 09:51:22 - [TEST_STEP][PASSED] - println(circuitId[i]): null

2019-05-18 09:51:22 - [TEST_STEP][PASSED] - data.add(circuitId[i].toString()): null

2019-05-18 09:51:22 - [TEST_STEP][PASSED] - println(circuitId[i]): null

2019-05-18 09:51:22 - [TEST_STEP][PASSED] - data.add(circuitId[i].toString()): null

2019-05-18 09:51:22 - [TEST_STEP][PASSED] - println(circuitId[i]): null

2019-05-18 09:51:22 - [TEST_STEP][PASSED] - data.add(circuitId[i].toString()): null

2019-05-18 09:51:22 - [TEST_STEP][PASSED] - println(circuitId[i]): null

2019-05-18 09:51:22 - [TEST_STEP][PASSED] - data.add(circuitId[i].toString()): null

2019-05-18 09:51:22 - [TEST_STEP][PASSED] - println(circuitId[i]): null

2019-05-18 09:51:22 - [TEST_STEP][PASSED] - data.add(circuitId[i].toString()): null

2019-05-18 09:51:22 - [TEST_STEP][PASSED] - println(circuitId[i]): null

2019-05-18 09:51:22 - [TEST_STEP][PASSED] - data.add(circuitId[i].toString()): null

2019-05-18 09:51:22 - [TEST_STEP][PASSED] - spreadsheet.WriteToFile.writeToExcelJsonData(data, 1, 2): spreadsheet.WriteToFile.writeToExcelJsonData is PASSED

2019-05-18 09:51:23 - [MESSAGE][PASSED] - spreadsheet.WriteToFile.writeToExcelJsonData is PASSED

2019-05-18 09:51:23 - [TEST_STEP][PASSED] - for ([x = 0, x < circuitName.size(), (x++)]): null

2019-05-18 09:51:23 - [TEST_STEP][PASSED] - println(circuitName[x]): null

2019-05-18 09:51:23 - [TEST_STEP][PASSED] - println(circuitName[x]): null

2019-05-18 09:51:23 - [TEST_STEP][PASSED] - println(circuitName[x]): null

2019-05-18 09:51:23 - [TEST_STEP][PASSED] - println(circuitName[x]): null

2019-05-18 09:51:23 - [TEST_STEP][PASSED] - println(circuitName[x]): null

2019-05-18 09:51:23 - [TEST_STEP][PASSED] - println(circuitName[x]): null

2019-05-18 09:51:23 - [TEST_STEP][PASSED] - println(circuitName[x]): null

2019-05-18 09:51:23 - [TEST_STEP][PASSED] - println(circuitName[x]): null

2019-05-18 09:51:23 - [TEST_STEP][PASSED] - println(circuitName[x]): null

2019-05-18 09:51:23 - [TEST_STEP][PASSED] - println(circuitName[x]): null

2019-05-18 09:51:23 - [TEST_STEP][PASSED] - println(circuitName[x]): null

2019-05-18 09:51:23 - [TEST_STEP][PASSED] - println(circuitName[x]): null

2019-05-18 09:51:23 - [TEST_STEP][PASSED] - println(circuitName[x]): null

2019-05-18 09:51:23 - [TEST_STEP][PASSED] - println(circuitName[x]): null

2019-05-18 09:51:23 - [TEST_STEP][PASSED] - println(circuitName[x]): null

2019-05-18 09:51:23 - [TEST_STEP][PASSED] - println(circuitName[x]): null

2019-05-18 09:51:23 - [TEST_STEP][PASSED] - println(circuitName[x]): null

2019-05-18 09:51:23 - [TEST_STEP][PASSED] - println(circuitName[x]): null

2019-05-18 09:51:23 - [TEST_STEP][PASSED] - println(circuitName[x]): null

2019-05-18 09:51:23 - [TEST_STEP][PASSED] - println(circuitName[x]): null

2019-05-18 09:51:23 - [TEST_STEP][PASSED] - for ([y = 0, y < circuitName.size(), (y++)]): null

2019-05-18 09:51:23 - [TEST_STEP][PASSED] - println(country[y]): null

2019-05-18 09:51:23 - [TEST_STEP][PASSED] - println(country[y]): null

2019-05-18 09:51:23 - [TEST_STEP][PASSED] - println(country[y]): null

2019-05-18 09:51:23 - [TEST_STEP][PASSED] - println(country[y]): null

2019-05-18 09:51:23 - [TEST_STEP][PASSED] - println(country[y]): null

2019-05-18 09:51:23 - [TEST_STEP][PASSED] - println(country[y]): null

2019-05-18 09:51:23 - [TEST_STEP][PASSED] - println(country[y]): null

2019-05-18 09:51:23 - [TEST_STEP][PASSED] - println(country[y]): null

2019-05-18 09:51:23 - [TEST_STEP][PASSED] - println(country[y]): null

2019-05-18 09:51:23 - [TEST_STEP][PASSED] - println(country[y]): null

2019-05-18 09:51:23 - [TEST_STEP][PASSED] - println(country[y]): null

2019-05-18 09:51:23 - [TEST_STEP][PASSED] - println(country[y]): null

2019-05-18 09:51:23 - [TEST_STEP][PASSED] - println(country[y]): null

2019-05-18 09:51:23 - [TEST_STEP][PASSED] - println(country[y]): null

2019-05-18 09:51:23 - [TEST_STEP][PASSED] - println(country[y]): null

2019-05-18 09:51:23 - [TEST_STEP][PASSED] - println(country[y]): null

2019-05-18 09:51:23 - [TEST_STEP][PASSED] - println(country[y]): null

2019-05-18 09:51:23 - [TEST_STEP][PASSED] - println(country[y]): null

2019-05-18 09:51:23 - [TEST_STEP][PASSED] - println(country[y]): null

2019-05-18 09:51:23 - [TEST_STEP][PASSED] - println(country[y]): null

2019-05-18 09:51:23 - [TEST_STEP][PASSED] - json = JsonSlurper().parseText("{"applications":[{"name":"test123","id":"c1257c5","description":"test","type":"generic","version":"0.1"},{"name":"Asset_1","id":"a9e0bce","description":"sfsdgdg","type":"generic","version":"0.1"},{"name":"Asset_2","id":"a9e0cd2","description":"sffgdgf","type":"generic","version":"0.1"}]}"): null

2019-05-18 09:51:23 - [TEST_STEP][PASSED] - println(id): null

2019-05-18 09:51:23 - [TEST_STEP][PASSED] - println(response: $response): null

2019-05-18 09:51:23 - [TEST_STEP][PASSED] - cookiez = response.getHeaderFields()["Set-Cookie"]: null

2019-05-18 09:51:23 - [TEST_STEP][PASSED] - println(cookiez): null

2019-05-18 09:51:23 - [TEST_STEP][PASSED] - verifyResponseStatusCode(response, 200): Verify response status code successfully

2019-05-18 09:51:23 - [MESSAGE][PASSED] - Verify response status code successfully

2019-05-18 09:51:23 - [TEST_STEP][PASSED] - containsString(response, "Bahrain International Circuit", false): Check contain string successfully

2019-05-18 09:51:23 - [MESSAGE][PASSED] - Check contain string successfully]]></system-out>
         <system-err><![CDATA[]]></system-err>
      </testcase>
      <testcase name="Test Cases/XPATH Locator/xpath-locator" classname="Test Cases/XPATH Locator/xpath-locator" status="PASSED">
         <system-out><![CDATA[2019-05-18 09:51:23 - [TEST_CASE][PASSED] - Test Cases/XPATH Locator/xpath-locator: Test Cases/XPATH Locator/xpath-locator

2019-05-18 09:51:23 - [TEST_STEP][PASSED] - Start listener action : sampleBeforeTestCase: null

2019-05-18 09:51:23 - [TEST_STEP][PASSED] - println(testCaseContext.getTestCaseId()): null

2019-05-18 09:51:23 - [TEST_STEP][PASSED] - println(testCaseContext.getTestCaseVariables()): null

2019-05-18 09:51:25 - [TEST_STEP][PASSED] - openBrowser(""): Browser is opened with url: ''

2019-05-18 09:51:25 - [MESSAGE][INFO] - Starting 'Chrome' driver

2019-05-18 09:51:25 - [MESSAGE][INFO] - User set preference: ['args', '[--disable-infobars, --no-sandbox]']

2019-05-18 09:51:28 - [MESSAGE][PASSED] - Browser is opened with url: ''

2019-05-18 09:51:28 - [TEST_STEP][PASSED] - navigateToUrl("https://katalon-demo-cura.herokuapp.com/"): Navigate to 'https://katalon-demo-cura.herokuapp.com/' successfully

2019-05-18 09:51:31 - [MESSAGE][PASSED] - Navigate to 'https://katalon-demo-cura.herokuapp.com/' successfully

2019-05-18 09:51:31 - [TEST_STEP][PASSED] - myPredefinedObject = findTestObject("xpathTestRepository/Page_CURA-HealthcareService/xpath"): null

2019-05-18 09:51:31 - [TEST_STEP][PASSED] - println("**********DEBUG*************" + myPredefinedObject): null

2019-05-18 09:51:31 - [TEST_STEP][PASSED] - myPredefinedObject2 = findTestObject("xpathTestRepository/Page_CURA-HealthcareService/a_MakeAppointment"): null

2019-05-18 09:51:31 - [TEST_STEP][PASSED] - properties = myPredefinedObject2.getXpaths(): null

2019-05-18 09:51:31 - [TEST_STEP][PASSED] - println("**********DEBUG XPATH PROPERTIES*************" + properties): null

2019-05-18 09:51:31 - [TEST_STEP][PASSED] - for (def prop : properties): null

2019-05-18 09:51:31 - [TEST_STEP][PASSED] - println("name: " + name + "  value " + value): null

2019-05-18 09:51:31 - [TEST_STEP][PASSED] - println("name: " + name + "  value " + value): null

2019-05-18 09:51:31 - [TEST_STEP][PASSED] - println("name: " + name + "  value " + value): null

2019-05-18 09:51:31 - [TEST_STEP][PASSED] - println("name: " + name + "  value " + value): null

2019-05-18 09:51:31 - [TEST_STEP][PASSED] - println("name: " + name + "  value " + value): null

2019-05-18 09:51:31 - [TEST_STEP][PASSED] - println("name: " + name + "  value " + value): null

2019-05-18 09:51:31 - [TEST_STEP][PASSED] - println("name: " + name + "  value " + value): null

2019-05-18 09:51:31 - [TEST_STEP][PASSED] - println("name: " + name + "  value " + value): null

2019-05-18 09:51:31 - [TEST_STEP][PASSED] - println("name: " + name + "  value " + value): null

2019-05-18 09:51:31 - [TEST_STEP][PASSED] - println("**********DEBUG PROPERTIES*************" + properties): null

2019-05-18 09:51:31 - [TEST_STEP][PASSED] - attributes = properties: null

2019-05-18 09:51:31 - [TEST_STEP][PASSED] - for (def att : attributes): null

2019-05-18 09:51:31 - [TEST_STEP][PASSED] - println("name: " + name + "  value " + value): null

2019-05-18 09:51:31 - [TEST_STEP][PASSED] - println("name: " + name + "  value " + value): null

2019-05-18 09:51:31 - [TEST_STEP][PASSED] - println("name: " + name + "  value " + value): null

2019-05-18 09:51:31 - [TEST_STEP][PASSED] - println("name: " + name + "  value " + value): null

2019-05-18 09:51:31 - [TEST_STEP][PASSED] - println("name: " + name + "  value " + value): null

2019-05-18 09:51:31 - [TEST_STEP][PASSED] - println("name: " + name + "  value " + value): null

2019-05-18 09:51:31 - [TEST_STEP][PASSED] - myNewObject = new com.kms.katalon.core.testobject.TestObject(myNewObject): null

2019-05-18 09:51:31 - [TEST_STEP][PASSED] - myNewObject.addProperty("xpath", EQUALS, "//header[@id='top']/div/a", true): null

2019-05-18 09:51:31 - [TEST_STEP][PASSED] - click(myNewObject): Object: 'myNewObject' is clicked on

2019-05-18 09:51:32 - [MESSAGE][PASSED] - Object: 'myNewObject' is clicked on

2019-05-18 09:51:32 - [TEST_STEP][PASSED] - setText(findTestObject("xpathTestRepository/Page_CURA-HealthcareService/input_Username_username"), "John Doe"): Text 'John Doe' is set on object 'Object Repository/xpathTestRepository/Page_CURA-HealthcareService/input_Username_username'

2019-05-18 09:51:33 - [MESSAGE][PASSED] - Text 'John Doe' is set on object 'Object Repository/xpathTestRepository/Page_CURA-HealthcareService/input_Username_username'

2019-05-18 09:51:33 - [TEST_STEP][PASSED] - setEncryptedText(findTestObject("xpathTestRepository/Page_CURA-HealthcareService/input_Password_password"), "g3/DOGG74jC3Flrr3yH+3D/yKbOqqUNM"): Text ****** has been set on object 'Object Repository/xpathTestRepository/Page_CURA-HealthcareService/input_Password_password'

2019-05-18 09:51:33 - [MESSAGE][PASSED] - Text ****** has been set on object 'Object Repository/xpathTestRepository/Page_CURA-HealthcareService/input_Password_password'

2019-05-18 09:51:33 - [TEST_STEP][PASSED] - click(findTestObject("xpathTestRepository/Page_CURA-HealthcareService/button_Login")): Object: 'Object Repository/xpathTestRepository/Page_CURA-HealthcareService/button_Login' is clicked on

2019-05-18 09:51:34 - [MESSAGE][PASSED] - Object: 'Object Repository/xpathTestRepository/Page_CURA-HealthcareService/button_Login' is clicked on

2019-05-18 09:51:34 - [TEST_STEP][PASSED] - selectOptionByValue(findTestObject("xpathTestRepository/Page_CURA-HealthcareService/select_TokyoCURA-HealthcareC"), "Hongkong CURA Healthcare Center", true): All options with value 'Hongkong CURA Healthcare Center' are selected in object 'Object Repository/xpathTestRepository/Page_CURA-HealthcareService/select_TokyoCURA-HealthcareC'  using regular expression

2019-05-18 09:51:35 - [MESSAGE][PASSED] - All options with value 'Hongkong CURA Healthcare Center' are selected in object 'Object Repository/xpathTestRepository/Page_CURA-HealthcareService/select_TokyoCURA-HealthcareC'  using regular expression

2019-05-18 09:51:35 - [TEST_STEP][PASSED] - click(findTestObject("xpathTestRepository/Page_CURA-HealthcareService/input_Apply-for-hospital-readm")): Object: 'Object Repository/xpathTestRepository/Page_CURA-HealthcareService/input_Apply-for-hospital-readm' is clicked on

2019-05-18 09:51:35 - [MESSAGE][PASSED] - Object: 'Object Repository/xpathTestRepository/Page_CURA-HealthcareService/input_Apply-for-hospital-readm' is clicked on

2019-05-18 09:51:35 - [TEST_STEP][PASSED] - click(findTestObject("xpathTestRepository/Page_CURA-HealthcareService/input_Medicaid_programs")): Object: 'Object Repository/xpathTestRepository/Page_CURA-HealthcareService/input_Medicaid_programs' is clicked on

2019-05-18 09:51:35 - [MESSAGE][PASSED] - Object: 'Object Repository/xpathTestRepository/Page_CURA-HealthcareService/input_Medicaid_programs' is clicked on

2019-05-18 09:51:35 - [TEST_STEP][PASSED] - click(findTestObject("xpathTestRepository/Page_CURA-HealthcareService/div_VisitDate(Required)_inpu")): Object: 'Object Repository/xpathTestRepository/Page_CURA-HealthcareService/div_VisitDate(Required)_inpu' is clicked on

2019-05-18 09:51:36 - [MESSAGE][PASSED] - Object: 'Object Repository/xpathTestRepository/Page_CURA-HealthcareService/div_VisitDate(Required)_inpu' is clicked on

2019-05-18 09:51:36 - [TEST_STEP][PASSED] - click(findTestObject("xpathTestRepository/Page_CURA-HealthcareService/td_30")): Object: 'Object Repository/xpathTestRepository/Page_CURA-HealthcareService/td_30' is clicked on

2019-05-18 09:51:36 - [MESSAGE][PASSED] - Object: 'Object Repository/xpathTestRepository/Page_CURA-HealthcareService/td_30' is clicked on

2019-05-18 09:51:36 - [TEST_STEP][PASSED] - setText(findTestObject("xpathTestRepository/Page_CURA-HealthcareService/textarea_Comment_comment"), "this is comment"): Text 'this is comment' is set on object 'Object Repository/xpathTestRepository/Page_CURA-HealthcareService/textarea_Comment_comment'

2019-05-18 09:51:36 - [MESSAGE][PASSED] - Text 'this is comment' is set on object 'Object Repository/xpathTestRepository/Page_CURA-HealthcareService/textarea_Comment_comment'

2019-05-18 09:51:36 - [TEST_STEP][PASSED] - click(findTestObject("xpathTestRepository/Page_CURA-HealthcareService/button_BookAppointment")): Object: 'Object Repository/xpathTestRepository/Page_CURA-HealthcareService/button_BookAppointment' is clicked on

2019-05-18 09:51:37 - [MESSAGE][PASSED] - Object: 'Object Repository/xpathTestRepository/Page_CURA-HealthcareService/button_BookAppointment' is clicked on

2019-05-18 09:51:37 - [TEST_STEP][PASSED] - click(findTestObject("xpathTestRepository/Page_CURA-HealthcareService/h2_AppointmentConfirmation")): Object: 'Object Repository/xpathTestRepository/Page_CURA-HealthcareService/h2_AppointmentConfirmation' is clicked on

2019-05-18 09:51:38 - [MESSAGE][PASSED] - Object: 'Object Repository/xpathTestRepository/Page_CURA-HealthcareService/h2_AppointmentConfirmation' is clicked on

2019-05-18 09:51:38 - [TEST_STEP][PASSED] - verifyTextPresent("Make Appointment", false, CONTINUE_ON_FAILURE): Text 'Make Appointment' is present on page 

2019-05-18 09:51:38 - [MESSAGE][PASSED] - Text 'Make Appointment' is present on page 

2019-05-18 09:51:38 - [TEST_STEP][PASSED] - closeBrowser(): Browser is closed

2019-05-18 09:51:39 - [MESSAGE][PASSED] - Browser is closed]]></system-out>
         <system-err><![CDATA[]]></system-err>
      </testcase>
      <testcase name="Test Cases/WriteToExcel(SpreadSheet)/write-to-excel-spreadsheet" classname="Test Cases/WriteToExcel(SpreadSheet)/write-to-excel-spreadsheet" status="PASSED">
         <system-out><![CDATA[2019-05-18 09:51:39 - [TEST_CASE][PASSED] - Test Cases/WriteToExcel(SpreadSheet)/write-to-excel-spreadsheet: Test Cases/WriteToExcel(SpreadSheet)/write-to-excel-spreadsheet

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - Start listener action : sampleBeforeTestCase: null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - println(testCaseContext.getTestCaseId()): null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - println(testCaseContext.getTestCaseVariables()): null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - excel = new java.util.ArrayList(): null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - excel.add("First"): null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - excel.add("Second"): null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - excel.add("Third"): null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - excel.add("Fourth"): null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - excel.add("Fifth"): null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - excel.add("number"): null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - excel2 = new java.util.ArrayList(): null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - r = new java.util.Random(): null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - low = 1000: null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - high = 9999: null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - val = 0: null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - for ([i = 0, i < 10, (i++)]): null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - val = r.nextInt(high - low) + low: null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - excel2.add(String.valueOf(val)): null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - val = r.nextInt(high - low) + low: null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - excel2.add(String.valueOf(val)): null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - val = r.nextInt(high - low) + low: null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - excel2.add(String.valueOf(val)): null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - val = r.nextInt(high - low) + low: null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - excel2.add(String.valueOf(val)): null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - val = r.nextInt(high - low) + low: null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - excel2.add(String.valueOf(val)): null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - val = r.nextInt(high - low) + low: null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - excel2.add(String.valueOf(val)): null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - val = r.nextInt(high - low) + low: null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - excel2.add(String.valueOf(val)): null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - val = r.nextInt(high - low) + low: null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - excel2.add(String.valueOf(val)): null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - val = r.nextInt(high - low) + low: null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - excel2.add(String.valueOf(val)): null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - val = r.nextInt(high - low) + low: null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - excel2.add(String.valueOf(val)): null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - x = 100000000: null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - y = 999999999: null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - hmap = new java.util.HashMap(): null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - for ([l = 0, l < 15, (l++)]): null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - val = r.nextInt(high - low) + low: null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - number = x + r.nextDouble() * y - x: null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - hmap.put(String.valueOf(number), String.valueOf(val)): null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - val = r.nextInt(high - low) + low: null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - number = x + r.nextDouble() * y - x: null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - hmap.put(String.valueOf(number), String.valueOf(val)): null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - val = r.nextInt(high - low) + low: null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - number = x + r.nextDouble() * y - x: null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - hmap.put(String.valueOf(number), String.valueOf(val)): null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - val = r.nextInt(high - low) + low: null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - number = x + r.nextDouble() * y - x: null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - hmap.put(String.valueOf(number), String.valueOf(val)): null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - val = r.nextInt(high - low) + low: null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - number = x + r.nextDouble() * y - x: null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - hmap.put(String.valueOf(number), String.valueOf(val)): null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - val = r.nextInt(high - low) + low: null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - number = x + r.nextDouble() * y - x: null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - hmap.put(String.valueOf(number), String.valueOf(val)): null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - val = r.nextInt(high - low) + low: null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - number = x + r.nextDouble() * y - x: null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - hmap.put(String.valueOf(number), String.valueOf(val)): null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - val = r.nextInt(high - low) + low: null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - number = x + r.nextDouble() * y - x: null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - hmap.put(String.valueOf(number), String.valueOf(val)): null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - val = r.nextInt(high - low) + low: null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - number = x + r.nextDouble() * y - x: null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - hmap.put(String.valueOf(number), String.valueOf(val)): null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - val = r.nextInt(high - low) + low: null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - number = x + r.nextDouble() * y - x: null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - hmap.put(String.valueOf(number), String.valueOf(val)): null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - val = r.nextInt(high - low) + low: null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - number = x + r.nextDouble() * y - x: null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - hmap.put(String.valueOf(number), String.valueOf(val)): null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - val = r.nextInt(high - low) + low: null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - number = x + r.nextDouble() * y - x: null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - hmap.put(String.valueOf(number), String.valueOf(val)): null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - val = r.nextInt(high - low) + low: null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - number = x + r.nextDouble() * y - x: null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - hmap.put(String.valueOf(number), String.valueOf(val)): null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - val = r.nextInt(high - low) + low: null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - number = x + r.nextDouble() * y - x: null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - hmap.put(String.valueOf(number), String.valueOf(val)): null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - val = r.nextInt(high - low) + low: null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - number = x + r.nextDouble() * y - x: null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - hmap.put(String.valueOf(number), String.valueOf(val)): null

2019-05-18 09:51:39 - [TEST_STEP][PASSED] - spreadsheet.WriteToFile.updateNumberValueXlsx(hmap, 0, 7): spreadsheet.WriteToFile.updateNumberValueXlsx is PASSED

2019-05-18 09:51:43 - [MESSAGE][PASSED] - spreadsheet.WriteToFile.updateNumberValueXlsx is PASSED]]></system-out>
         <system-err><![CDATA[]]></system-err>
      </testcase>
      <testcase name="Test Cases/LogInKatalon/Call Test Case Login" classname="Test Cases/LogInKatalon/Call Test Case Login" status="PASSED">
         <system-out><![CDATA[2019-05-18 09:51:43 - [TEST_CASE][PASSED] - Test Cases/LogInKatalon/Call Test Case Login: Test Cases/LogInKatalon/Call Test Case Login

2019-05-18 09:51:43 - [TEST_STEP][PASSED] - Start listener action : sampleBeforeTestCase: null

2019-05-18 09:51:43 - [TEST_STEP][PASSED] - println(testCaseContext.getTestCaseId()): null

2019-05-18 09:51:43 - [TEST_STEP][PASSED] - println(testCaseContext.getTestCaseVariables()): null

2019-05-18 09:51:44 - [TEST_STEP][PASSED] - callTestCase(findTestCase("LogInKatalon/Login"), ["username":"John Doe", "pass":pass], CONTINUE_ON_FAILURE): Call Test Case 'Test Cases/LogInKatalon/Login' successfully

2019-05-18 09:51:45 - [TEST_CASE][PASSED] - Test Cases/LogInKatalon/Login: Test Cases/LogInKatalon/Login

2019-05-18 09:51:46 - [TEST_STEP][PASSED] - variableFromTestCase1 = name: null

2019-05-18 09:51:46 - [TEST_STEP][PASSED] - openBrowser(""): Browser is opened with url: ''

2019-05-18 09:51:46 - [MESSAGE][INFO] - Starting 'Chrome' driver

2019-05-18 09:51:46 - [MESSAGE][INFO] - User set preference: ['args', '[--disable-infobars, --no-sandbox]']

2019-05-18 09:51:50 - [MESSAGE][PASSED] - Browser is opened with url: ''

2019-05-18 09:51:50 - [TEST_STEP][PASSED] - navigateToUrl("http://demoaut.katalon.com/"): Navigate to 'http://demoaut.katalon.com/' successfully

2019-05-18 09:51:56 - [MESSAGE][PASSED] - Navigate to 'http://demoaut.katalon.com/' successfully

2019-05-18 09:51:56 - [TEST_STEP][PASSED] - click(findTestObject("katalon_5_3_katalon_demo/Page_CURAHealthcareService/a_MakeAppointment")): Object: 'Object Repository/katalon_5_3_katalon_demo/Page_CURAHealthcareService/a_MakeAppointment' is clicked on

2019-05-18 09:51:57 - [MESSAGE][PASSED] - Object: 'Object Repository/katalon_5_3_katalon_demo/Page_CURAHealthcareService/a_MakeAppointment' is clicked on

2019-05-18 09:51:57 - [TEST_STEP][PASSED] - setText(findTestObject("katalon_5_3_katalon_demo/Page_CURAHealthcareService/input_username"), username): Text 'John Doe' is set on object 'Object Repository/katalon_5_3_katalon_demo/Page_CURAHealthcareService/input_username'

2019-05-18 09:51:57 - [MESSAGE][PASSED] - Text 'John Doe' is set on object 'Object Repository/katalon_5_3_katalon_demo/Page_CURAHealthcareService/input_username'

2019-05-18 09:51:57 - [TEST_STEP][PASSED] - setEncryptedText(findTestObject("katalon_5_3_katalon_demo/Page_CURAHealthcareService/input_password"), pass): Text ****** has been set on object 'Object Repository/katalon_5_3_katalon_demo/Page_CURAHealthcareService/input_password'

2019-05-18 09:51:58 - [MESSAGE][PASSED] - Text ****** has been set on object 'Object Repository/katalon_5_3_katalon_demo/Page_CURAHealthcareService/input_password'

2019-05-18 09:51:58 - [TEST_STEP][PASSED] - click(findTestObject("katalon_5_3_katalon_demo/Page_CURAHealthcareService/button_Login")): Object: 'Object Repository/katalon_5_3_katalon_demo/Page_CURAHealthcareService/button_Login' is clicked on

2019-05-18 09:51:58 - [MESSAGE][PASSED] - Object: 'Object Repository/katalon_5_3_katalon_demo/Page_CURAHealthcareService/button_Login' is clicked on

2019-05-18 09:51:58 - [TEST_STEP][PASSED] - return variableFromTestCase1: null

2019-05-18 09:51:58 - [MESSAGE][PASSED] - Call Test Case 'Test Cases/LogInKatalon/Login' successfully

2019-05-18 09:51:58 - [TEST_STEP][PASSED] - closeBrowser(): Browser is closed

2019-05-18 09:51:59 - [MESSAGE][PASSED] - Browser is closed

2019-05-18 09:51:59 - [TEST_STEP][PASSED] - callTestCase(findTestCase("LogInKatalon/Login"), ["username":"John Doe", "pass":"g3/DOGG74jC3Flrr3yH+3D/yKbOqqUNM"], CONTINUE_ON_FAILURE): Call Test Case 'Test Cases/LogInKatalon/Login' successfully

2019-05-18 09:51:59 - [TEST_CASE][PASSED] - Test Cases/LogInKatalon/Login: Test Cases/LogInKatalon/Login

2019-05-18 09:51:59 - [TEST_STEP][PASSED] - variableFromTestCase1 = name: null

2019-05-18 09:51:59 - [TEST_STEP][PASSED] - openBrowser(""): Browser is opened with url: ''

2019-05-18 09:51:59 - [MESSAGE][INFO] - Starting 'Chrome' driver

2019-05-18 09:51:59 - [MESSAGE][INFO] - User set preference: ['args', '[--disable-infobars, --no-sandbox]']

2019-05-18 09:52:03 - [MESSAGE][PASSED] - Browser is opened with url: ''

2019-05-18 09:52:03 - [TEST_STEP][PASSED] - navigateToUrl("http://demoaut.katalon.com/"): Navigate to 'http://demoaut.katalon.com/' successfully

2019-05-18 09:52:08 - [MESSAGE][PASSED] - Navigate to 'http://demoaut.katalon.com/' successfully

2019-05-18 09:52:08 - [TEST_STEP][PASSED] - click(findTestObject("katalon_5_3_katalon_demo/Page_CURAHealthcareService/a_MakeAppointment")): Object: 'Object Repository/katalon_5_3_katalon_demo/Page_CURAHealthcareService/a_MakeAppointment' is clicked on

2019-05-18 09:52:10 - [MESSAGE][PASSED] - Object: 'Object Repository/katalon_5_3_katalon_demo/Page_CURAHealthcareService/a_MakeAppointment' is clicked on

2019-05-18 09:52:10 - [TEST_STEP][PASSED] - setText(findTestObject("katalon_5_3_katalon_demo/Page_CURAHealthcareService/input_username"), username): Text 'John Doe' is set on object 'Object Repository/katalon_5_3_katalon_demo/Page_CURAHealthcareService/input_username'

2019-05-18 09:52:10 - [MESSAGE][PASSED] - Text 'John Doe' is set on object 'Object Repository/katalon_5_3_katalon_demo/Page_CURAHealthcareService/input_username'

2019-05-18 09:52:10 - [TEST_STEP][PASSED] - setEncryptedText(findTestObject("katalon_5_3_katalon_demo/Page_CURAHealthcareService/input_password"), pass): Text ****** has been set on object 'Object Repository/katalon_5_3_katalon_demo/Page_CURAHealthcareService/input_password'

2019-05-18 09:52:11 - [MESSAGE][PASSED] - Text ****** has been set on object 'Object Repository/katalon_5_3_katalon_demo/Page_CURAHealthcareService/input_password'

2019-05-18 09:52:11 - [TEST_STEP][PASSED] - click(findTestObject("katalon_5_3_katalon_demo/Page_CURAHealthcareService/button_Login")): Object: 'Object Repository/katalon_5_3_katalon_demo/Page_CURAHealthcareService/button_Login' is clicked on

2019-05-18 09:52:12 - [MESSAGE][PASSED] - Object: 'Object Repository/katalon_5_3_katalon_demo/Page_CURAHealthcareService/button_Login' is clicked on

2019-05-18 09:52:12 - [TEST_STEP][PASSED] - return variableFromTestCase1: null

2019-05-18 09:52:12 - [MESSAGE][PASSED] - Call Test Case 'Test Cases/LogInKatalon/Login' successfully

2019-05-18 09:52:12 - [TEST_STEP][PASSED] - closeBrowser(): Browser is closed

2019-05-18 09:52:13 - [MESSAGE][PASSED] - Browser is closed

2019-05-18 09:52:13 - [TEST_STEP][PASSED] - generatedString = RandomStringUtils.randomAlphanumeric(10): null

2019-05-18 09:52:13 - [TEST_STEP][PASSED] - name = generatedString: null

2019-05-18 09:52:13 - [TEST_STEP][PASSED] - message = callTestCase(findTestCase("LogInKatalon/Login"), ["name":name], CONTINUE_ON_FAILURE): Call Test Case 'Test Cases/LogInKatalon/Login' successfully

2019-05-18 09:52:13 - [TEST_CASE][PASSED] - Test Cases/LogInKatalon/Login: Test Cases/LogInKatalon/Login

2019-05-18 09:52:13 - [TEST_STEP][PASSED] - variableFromTestCase1 = name: null

2019-05-18 09:52:13 - [TEST_STEP][PASSED] - openBrowser(""): Browser is opened with url: ''

2019-05-18 09:52:13 - [MESSAGE][INFO] - Starting 'Chrome' driver

2019-05-18 09:52:13 - [MESSAGE][INFO] - User set preference: ['args', '[--disable-infobars, --no-sandbox]']

2019-05-18 09:52:17 - [MESSAGE][PASSED] - Browser is opened with url: ''

2019-05-18 09:52:17 - [TEST_STEP][PASSED] - navigateToUrl("http://demoaut.katalon.com/"): Navigate to 'http://demoaut.katalon.com/' successfully

2019-05-18 09:52:22 - [MESSAGE][PASSED] - Navigate to 'http://demoaut.katalon.com/' successfully

2019-05-18 09:52:22 - [TEST_STEP][PASSED] - click(findTestObject("katalon_5_3_katalon_demo/Page_CURAHealthcareService/a_MakeAppointment")): Object: 'Object Repository/katalon_5_3_katalon_demo/Page_CURAHealthcareService/a_MakeAppointment' is clicked on

2019-05-18 09:52:22 - [MESSAGE][PASSED] - Object: 'Object Repository/katalon_5_3_katalon_demo/Page_CURAHealthcareService/a_MakeAppointment' is clicked on

2019-05-18 09:52:22 - [TEST_STEP][PASSED] - setText(findTestObject("katalon_5_3_katalon_demo/Page_CURAHealthcareService/input_username"), username): Text 'John Doe' is set on object 'Object Repository/katalon_5_3_katalon_demo/Page_CURAHealthcareService/input_username'

2019-05-18 09:52:23 - [MESSAGE][PASSED] - Text 'John Doe' is set on object 'Object Repository/katalon_5_3_katalon_demo/Page_CURAHealthcareService/input_username'

2019-05-18 09:52:23 - [TEST_STEP][PASSED] - setEncryptedText(findTestObject("katalon_5_3_katalon_demo/Page_CURAHealthcareService/input_password"), pass): Text ****** has been set on object 'Object Repository/katalon_5_3_katalon_demo/Page_CURAHealthcareService/input_password'

2019-05-18 09:52:23 - [MESSAGE][PASSED] - Text ****** has been set on object 'Object Repository/katalon_5_3_katalon_demo/Page_CURAHealthcareService/input_password'

2019-05-18 09:52:23 - [TEST_STEP][PASSED] - click(findTestObject("katalon_5_3_katalon_demo/Page_CURAHealthcareService/button_Login")): Object: 'Object Repository/katalon_5_3_katalon_demo/Page_CURAHealthcareService/button_Login' is clicked on

2019-05-18 09:52:24 - [MESSAGE][PASSED] - Object: 'Object Repository/katalon_5_3_katalon_demo/Page_CURAHealthcareService/button_Login' is clicked on

2019-05-18 09:52:24 - [TEST_STEP][PASSED] - return variableFromTestCase1: null

2019-05-18 09:52:24 - [MESSAGE][PASSED] - Call Test Case 'Test Cases/LogInKatalon/Login' successfully

2019-05-18 09:52:24 - [TEST_STEP][PASSED] - println("DEBUG returned string is***************" + message): null

2019-05-18 09:52:24 - [TEST_STEP][PASSED] - var = callTestCase(findTestCase("ReadTxtFile/read-txt-file"), ["hello":"Timo"], CONTINUE_ON_FAILURE): Call Test Case 'Test Cases/ReadTxtFile/read-txt-file' successfully

2019-05-18 09:52:24 - [TEST_CASE][PASSED] - Test Cases/ReadTxtFile/read-txt-file: Test Cases/ReadTxtFile/read-txt-file

2019-05-18 09:52:25 - [TEST_STEP][PASSED] - path = System.getProperty("user.dir") + "\demoData.txt": null

2019-05-18 09:52:25 - [TEST_STEP][PASSED] - l = readFile.read.readFileInList(path): readFile.read.readFileInList is PASSED

2019-05-18 09:52:25 - [MESSAGE][PASSED] - readFile.read.readFileInList is PASSED

2019-05-18 09:52:25 - [TEST_STEP][PASSED] - s = l.get(1): null

2019-05-18 09:52:25 - [TEST_STEP][PASSED] - log = new com.kms.katalon.core.logging.KeywordLogger(): null

2019-05-18 09:52:25 - [TEST_STEP][PASSED] - log.logInfo("DEBUG value is " + s): DEBUG value is two

2019-05-18 09:52:25 - [MESSAGE][INFO] - DEBUG value is two

2019-05-18 09:52:25 - [TEST_STEP][PASSED] - itr = l.iterator(): null

2019-05-18 09:52:25 - [TEST_STEP][PASSED] - while (itr.hasNext()): null

2019-05-18 09:52:25 - [TEST_STEP][PASSED] - out.println(itr.next()): null

2019-05-18 09:52:25 - [TEST_STEP][PASSED] - out.println(itr.next()): null

2019-05-18 09:52:25 - [TEST_STEP][PASSED] - out.println(itr.next()): null

2019-05-18 09:52:25 - [TEST_STEP][PASSED] - out.println(itr.next()): null

2019-05-18 09:52:25 - [TEST_STEP][PASSED] - out.println(itr.next()): null

2019-05-18 09:52:25 - [TEST_STEP][PASSED] - return s: null

2019-05-18 09:52:25 - [MESSAGE][PASSED] - Call Test Case 'Test Cases/ReadTxtFile/read-txt-file' successfully

2019-05-18 09:52:25 - [TEST_STEP][PASSED] - println("DEBUG returned value is***************" + var): null]]></system-out>
         <system-err><![CDATA[]]></system-err>
      </testcase>
      <testcase name="Test Cases/LogInKatalon/Login" classname="Test Cases/LogInKatalon/Login" status="PASSED">
         <system-out><![CDATA[2019-05-18 09:52:25 - [TEST_CASE][PASSED] - Test Cases/LogInKatalon/Login: Test Cases/LogInKatalon/Login

2019-05-18 09:52:25 - [TEST_STEP][PASSED] - Start listener action : sampleBeforeTestCase: null

2019-05-18 09:52:25 - [TEST_STEP][PASSED] - println(testCaseContext.getTestCaseId()): null

2019-05-18 09:52:25 - [TEST_STEP][PASSED] - println(testCaseContext.getTestCaseVariables()): null

2019-05-18 09:52:25 - [TEST_STEP][PASSED] - variableFromTestCase1 = name: null

2019-05-18 09:52:25 - [TEST_STEP][PASSED] - openBrowser(""): Browser is opened with url: ''

2019-05-18 09:52:25 - [MESSAGE][WARNING] - A browser is already opened. Closing browser and opening a new one

2019-05-18 09:52:26 - [MESSAGE][INFO] - Starting 'Chrome' driver

2019-05-18 09:52:26 - [MESSAGE][INFO] - User set preference: ['args', '[--disable-infobars, --no-sandbox]']

2019-05-18 09:52:31 - [MESSAGE][PASSED] - Browser is opened with url: ''

2019-05-18 09:52:31 - [TEST_STEP][PASSED] - navigateToUrl("http://demoaut.katalon.com/"): Navigate to 'http://demoaut.katalon.com/' successfully

2019-05-18 09:52:35 - [MESSAGE][PASSED] - Navigate to 'http://demoaut.katalon.com/' successfully

2019-05-18 09:52:35 - [TEST_STEP][PASSED] - click(findTestObject("katalon_5_3_katalon_demo/Page_CURAHealthcareService/a_MakeAppointment")): Object: 'Object Repository/katalon_5_3_katalon_demo/Page_CURAHealthcareService/a_MakeAppointment' is clicked on

2019-05-18 09:52:35 - [MESSAGE][PASSED] - Object: 'Object Repository/katalon_5_3_katalon_demo/Page_CURAHealthcareService/a_MakeAppointment' is clicked on

2019-05-18 09:52:35 - [TEST_STEP][PASSED] - setText(findTestObject("katalon_5_3_katalon_demo/Page_CURAHealthcareService/input_username"), username): Text 'John Doe' is set on object 'Object Repository/katalon_5_3_katalon_demo/Page_CURAHealthcareService/input_username'

2019-05-18 09:52:36 - [MESSAGE][PASSED] - Text 'John Doe' is set on object 'Object Repository/katalon_5_3_katalon_demo/Page_CURAHealthcareService/input_username'

2019-05-18 09:52:36 - [TEST_STEP][PASSED] - setEncryptedText(findTestObject("katalon_5_3_katalon_demo/Page_CURAHealthcareService/input_password"), pass): Text ****** has been set on object 'Object Repository/katalon_5_3_katalon_demo/Page_CURAHealthcareService/input_password'

2019-05-18 09:52:36 - [MESSAGE][PASSED] - Text ****** has been set on object 'Object Repository/katalon_5_3_katalon_demo/Page_CURAHealthcareService/input_password'

2019-05-18 09:52:36 - [TEST_STEP][PASSED] - click(findTestObject("katalon_5_3_katalon_demo/Page_CURAHealthcareService/button_Login")): Object: 'Object Repository/katalon_5_3_katalon_demo/Page_CURAHealthcareService/button_Login' is clicked on

2019-05-18 09:52:37 - [MESSAGE][PASSED] - Object: 'Object Repository/katalon_5_3_katalon_demo/Page_CURAHealthcareService/button_Login' is clicked on

2019-05-18 09:52:37 - [TEST_STEP][PASSED] - return variableFromTestCase1: null]]></system-out>
         <system-err><![CDATA[]]></system-err>
      </testcase>
      <testcase name="Test Cases/SpamData/spamDataCheck" classname="Test Cases/SpamData/spamDataCheck" status="PASSED">
         <system-out><![CDATA[2019-05-18 09:52:37 - [TEST_CASE][PASSED] - Test Cases/SpamData/spamDataCheck: Test Cases/SpamData/spamDataCheck

2019-05-18 09:52:37 - [TEST_STEP][PASSED] - Start listener action : sampleBeforeTestCase: null

2019-05-18 09:52:37 - [TEST_STEP][PASSED] - println(testCaseContext.getTestCaseId()): null

2019-05-18 09:52:37 - [TEST_STEP][PASSED] - println(testCaseContext.getTestCaseVariables()): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - price = new java.math.BigDecimal(9.99): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - tax = new java.math.BigDecimal(0.30): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - total = price.add(tax): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - println(total): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - data = findTestData("SpamData/someSpamTestData"): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - colNames = columnNames: null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - println("column names " + colNames): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - ro = data.getRowNumbers(): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - log = new com.kms.katalon.core.util.KeywordUtil(): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - lists = new java.util.ArrayList(): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - for ([i = 0, i < ro, (i++)]): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - list = new java.util.ArrayList(): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - lists.add(list): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - list = new java.util.ArrayList(): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - lists.add(list): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - list = new java.util.ArrayList(): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - lists.add(list): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - list = new java.util.ArrayList(): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - lists.add(list): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - row = 1: null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - colCount = 0: null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - for (def index : (0..(data.getRowNumbers() - 1))): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - for (String col : colNames): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - if (getValue(col, row).equals("")): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - else: null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - println("column: " + col + " row: " + row + " value: " + data.getValue(col, row)): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - get(colCount).add(data.getValue(col, row)): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - println(colCount): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - if (getValue(col, row).equals("")): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - else: null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - println("column: " + col + " row: " + row + " value: " + data.getValue(col, row)): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - get(colCount).add(data.getValue(col, row)): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - println(colCount): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - if (getValue(col, row).equals("")): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - else: null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - println("column: " + col + " row: " + row + " value: " + data.getValue(col, row)): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - get(colCount).add(data.getValue(col, row)): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - println(colCount): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - if (getValue(col, row).equals("")): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - else: null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - println("column: " + col + " row: " + row + " value: " + data.getValue(col, row)): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - get(colCount).add(data.getValue(col, row)): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - println(colCount): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - (colCount++): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - (row++): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - for (String col : colNames): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - if (getValue(col, row).equals("")): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - else: null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - println("column: " + col + " row: " + row + " value: " + data.getValue(col, row)): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - get(colCount).add(data.getValue(col, row)): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - println(colCount): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - if (getValue(col, row).equals("")): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - else: null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - println("column: " + col + " row: " + row + " value: " + data.getValue(col, row)): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - get(colCount).add(data.getValue(col, row)): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - println(colCount): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - if (getValue(col, row).equals("")): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - else: null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - println("column: " + col + " row: " + row + " value: " + data.getValue(col, row)): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - get(colCount).add(data.getValue(col, row)): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - println(colCount): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - if (getValue(col, row).equals("")): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - else: null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - println("column: " + col + " row: " + row + " value: " + data.getValue(col, row)): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - get(colCount).add(data.getValue(col, row)): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - println(colCount): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - (colCount++): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - (row++): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - for (String col : colNames): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - if (getValue(col, row).equals("")): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - else: null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - println("column: " + col + " row: " + row + " value: " + data.getValue(col, row)): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - get(colCount).add(data.getValue(col, row)): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - println(colCount): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - if (getValue(col, row).equals("")): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - else: null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - println("column: " + col + " row: " + row + " value: " + data.getValue(col, row)): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - get(colCount).add(data.getValue(col, row)): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - println(colCount): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - if (getValue(col, row).equals("")): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - else: null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - println("column: " + col + " row: " + row + " value: " + data.getValue(col, row)): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - get(colCount).add(data.getValue(col, row)): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - println(colCount): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - if (getValue(col, row).equals("")): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - println("column: " + col + " has not value!!!! " + data.getValue(col, row) + " row: " + row): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - log.markWarning("column: " + col + " has not value!!!! " + data.getValue(col, row) + " row: " + row): column: fourth has not value!!!!  row: 3

2019-05-18 09:52:38 - [MESSAGE][WARNING] - column: fourth has not value!!!!  row: 3

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - get(colCount).add(data.getValue(col, row)): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - (colCount++): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - (row++): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - for (String col : colNames): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - if (getValue(col, row).equals("")): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - println("column: " + col + " has not value!!!! " + data.getValue(col, row) + " row: " + row): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - log.markWarning("column: " + col + " has not value!!!! " + data.getValue(col, row) + " row: " + row): column: first has not value!!!!  row: 4

2019-05-18 09:52:38 - [MESSAGE][WARNING] - column: first has not value!!!!  row: 4

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - get(colCount).add(data.getValue(col, row)): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - if (getValue(col, row).equals("")): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - else: null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - println("column: " + col + " row: " + row + " value: " + data.getValue(col, row)): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - get(colCount).add(data.getValue(col, row)): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - println(colCount): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - if (getValue(col, row).equals("")): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - else: null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - println("column: " + col + " row: " + row + " value: " + data.getValue(col, row)): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - get(colCount).add(data.getValue(col, row)): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - println(colCount): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - if (getValue(col, row).equals("")): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - println("column: " + col + " has not value!!!! " + data.getValue(col, row) + " row: " + row): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - log.markWarning("column: " + col + " has not value!!!! " + data.getValue(col, row) + " row: " + row): column: fourth has not value!!!!  row: 4

2019-05-18 09:52:38 - [MESSAGE][WARNING] - column: fourth has not value!!!!  row: 4

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - get(colCount).add(data.getValue(col, row)): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - (colCount++): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - (row++): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - colRows1 = new java.util.ArrayList(): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - colRows2 = new java.util.ArrayList(): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - colRows3 = new java.util.ArrayList(): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - colRows4 = new java.util.ArrayList(): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - for (ArrayList s : lists): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - colRows1.add(0, s.get(0)): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - colRows1.add(0, s.get(0)): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - colRows1.add(0, s.get(0)): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - colRows1.add(0, s.get(0)): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - for (ArrayList s : lists): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - colRows2.add(0, s.get(1)): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - colRows2.add(0, s.get(1)): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - colRows2.add(0, s.get(1)): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - colRows2.add(0, s.get(1)): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - for (ArrayList s : lists): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - colRows3.add(0, s.get(2)): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - colRows3.add(0, s.get(2)): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - colRows3.add(0, s.get(2)): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - colRows3.add(0, s.get(2)): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - for (ArrayList s : lists): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - colRows4.add(0, s.get(3)): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - colRows4.add(0, s.get(3)): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - colRows4.add(0, s.get(3)): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - colRows4.add(0, s.get(3)): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - colRows1.removeAll(Arrays.asList("")): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - colRows2.removeAll(Arrays.asList("")): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - colRows3.removeAll(Arrays.asList("")): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - colRows4.removeAll(Arrays.asList("")): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - println(colRows1): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - println(colRows2): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - println(colRows3): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - println(colRows4): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - println("count of rows in column name first: " + colRows1.size()): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - println("count of rows in column name second: " + colRows2.size()): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - println("count of rows in column name third: " + colRows3.size()): null

2019-05-18 09:52:38 - [TEST_STEP][PASSED] - println("count of rows in column name fourth: " + colRows4.size()): null]]></system-out>
         <system-err><![CDATA[]]></system-err>
      </testcase>
      <testcase name="Test Cases/CygwinSSH/cygwinSsh" classname="Test Cases/CygwinSSH/cygwinSsh" status="PASSED">
         <system-out><![CDATA[2019-05-18 09:52:38 - [TEST_CASE][PASSED] - Test Cases/CygwinSSH/cygwinSsh: Test Cases/CygwinSSH/cygwinSsh

2019-05-18 09:52:39 - [TEST_STEP][PASSED] - Start listener action : sampleBeforeTestCase: null

2019-05-18 09:52:39 - [TEST_STEP][PASSED] - println(testCaseContext.getTestCaseId()): null

2019-05-18 09:52:39 - [TEST_STEP][PASSED] - println(testCaseContext.getTestCaseVariables()): null

2019-05-18 09:52:40 - [TEST_STEP][PASSED] - log = new com.kms.katalon.core.util.KeywordUtil(): null

2019-05-18 09:52:40 - [TEST_STEP][PASSED] - expectedValue = "height=176": null

2019-05-18 09:52:40 - [TEST_STEP][PASSED] - arr = new java.util.ArrayList(): null

2019-05-18 09:52:40 - [TEST_STEP][PASSED] - command1 = "less": null

2019-05-18 09:52:40 - [TEST_STEP][PASSED] - command2 = "/home/myinifile.ini": null

2019-05-18 09:52:40 - [TEST_STEP][PASSED] - bash = new BashRunner(): null

2019-05-18 09:52:40 - [TEST_STEP][PASSED] - arr = bash.getIniFile(command1, command2): null

2019-05-18 09:52:40 - [TEST_STEP][PASSED] - joinedString = Arrays.toString(arr): null

2019-05-18 09:52:40 - [TEST_STEP][PASSED] - ans = joinedString.contains(expectedValue): null

2019-05-18 09:52:40 - [TEST_STEP][PASSED] - if (ans): The list contains expected value: height=176

2019-05-18 09:52:40 - [TEST_STEP][PASSED] - out.println("The list contains expected value: " + expectedValue): null

2019-05-18 09:52:40 - [TEST_STEP][PASSED] - log.markPassed("The list contains expected value: " + expectedValue): The list contains expected value: height=176

2019-05-18 09:52:40 - [MESSAGE][PASSED] - The list contains expected value: height=176]]></system-out>
         <system-err><![CDATA[]]></system-err>
      </testcase>
      <testcase name="Test Cases/CaptureAlert/alertCapture" classname="Test Cases/CaptureAlert/alertCapture" status="PASSED">
         <system-out><![CDATA[2019-05-18 09:52:40 - [TEST_CASE][PASSED] - Test Cases/CaptureAlert/alertCapture: Test Cases/CaptureAlert/alertCapture

2019-05-18 09:52:40 - [TEST_STEP][PASSED] - Start listener action : sampleBeforeTestCase: null

2019-05-18 09:52:40 - [TEST_STEP][PASSED] - println(testCaseContext.getTestCaseId()): null

2019-05-18 09:52:40 - [TEST_STEP][PASSED] - println(testCaseContext.getTestCaseVariables()): null

2019-05-18 09:52:41 - [TEST_STEP][PASSED] - logger = new com.kms.katalon.core.logging.KeywordLogger(): null

2019-05-18 09:52:41 - [TEST_STEP][PASSED] - openBrowser("http://www.google.com"): Browser is opened with url: 'http://www.google.com'

2019-05-18 09:52:41 - [MESSAGE][WARNING] - A browser is already opened. Closing browser and opening a new one

2019-05-18 09:52:42 - [MESSAGE][INFO] - Starting 'Chrome' driver

2019-05-18 09:52:42 - [MESSAGE][INFO] - User set preference: ['args', '[--disable-infobars, --no-sandbox]']

2019-05-18 09:52:49 - [MESSAGE][PASSED] - Browser is opened with url: 'http://www.google.com'

2019-05-18 09:52:49 - [TEST_STEP][PASSED] - maximizeWindow(): Current window maximized

2019-05-18 09:52:51 - [MESSAGE][PASSED] - Current window maximized

2019-05-18 09:52:51 - [TEST_STEP][PASSED] - path = takeScreenshot(): Taking screenshot successfully

2019-05-18 09:52:52 - [MESSAGE][PASSED] - Taking screenshot successfully
[[ATTACHMENT|C:\\Users\\fitim\\.git\\KatalonProject\\Reports\\RegressionTestSuite\\20190518_094723\\1558162371702.png]]

2019-05-18 09:52:52 - [TEST_STEP][PASSED] - err.println(path): null

2019-05-18 09:52:52 - [TEST_STEP][PASSED] - delay(2): Delayed 2 second(s)

2019-05-18 09:52:54 - [MESSAGE][PASSED] - Delayed 2 second(s)

2019-05-18 09:52:54 - [TEST_STEP][PASSED] - executeJavaScript("alert('*****This is an alert***** ')", null): Execute JavaScript 'alert('*****This is an alert***** ')' successfully

2019-05-18 09:52:54 - [MESSAGE][PASSED] - Execute JavaScript 'alert('*****This is an alert***** ')' successfully

2019-05-18 09:52:54 - [TEST_STEP][PASSED] - image = Robot().createScreenCapture(new java.awt.Rectangle(java.awt.Toolkit.getDefaultToolkit().getScreenSize())): null

2019-05-18 09:52:55 - [TEST_STEP][PASSED] - ImageIO.write(image, "png", new java.io.File(path)): null

2019-05-18 09:52:56 - [TEST_STEP][PASSED] - delay(2): Delayed 2 second(s)

2019-05-18 09:52:58 - [MESSAGE][PASSED] - Delayed 2 second(s)

2019-05-18 09:52:58 - [TEST_STEP][PASSED] - prefix = SimpleDateFormat(yyyy_MM_dd_HH_mm_).format(new java.util.Date()): null

2019-05-18 09:52:58 - [TEST_STEP][PASSED] - input = new java.io.File(path): null

2019-05-18 09:52:58 - [TEST_STEP][PASSED] - bufImage = ImageIO.read(input): null

2019-05-18 09:52:58 - [TEST_STEP][PASSED] - delay(3): Delayed 3 second(s)

2019-05-18 09:53:01 - [MESSAGE][PASSED] - Delayed 3 second(s)

2019-05-18 09:53:01 - [TEST_STEP][PASSED] - scaledConvertedImagePath = "C:\Users\fitim\.git\KatalonProject\images\" + prefix + "Google.png": null

2019-05-18 09:53:01 - [TEST_STEP][PASSED] - scaledBufImage = readImageText.readImage.resized(bufImage, 1066, 468): readImageText.readImage.resized is PASSED

2019-05-18 09:53:01 - [MESSAGE][PASSED] - readImageText.readImage.resized is PASSED

2019-05-18 09:53:01 - [TEST_STEP][PASSED] - convertBufImage = readImageText.readImage.convert(scaledBufImage): readImageText.readImage.convert is PASSED

2019-05-18 09:53:01 - [MESSAGE][PASSED] - readImageText.readImage.convert is PASSED

2019-05-18 09:53:01 - [TEST_STEP][PASSED] - ImageIO.write(convertBufImage, "png", new java.io.File(scaledConvertedImagePath)): null

2019-05-18 09:53:02 - [TEST_STEP][PASSED] - res = readImageText.readImage.readImageText(scaledConvertedImagePath): readImageText.readImage.readImageText is PASSED

2019-05-18 09:53:04 - [MESSAGE][PASSED] - readImageText.readImage.readImageText is PASSED

2019-05-18 09:53:04 - [TEST_STEP][PASSED] - out.print(res): null

2019-05-18 09:53:04 - [TEST_STEP][PASSED] - logger.logDebug(res): 

2019-05-18 09:53:04 - [MESSAGE][INFO] - 

2019-05-18 09:53:04 - [TEST_STEP][PASSED] - delay(2): Delayed 2 second(s)

2019-05-18 09:53:06 - [MESSAGE][PASSED] - Delayed 2 second(s)]]></system-out>
         <system-err><![CDATA[]]></system-err>
      </testcase>
      <testcase name="Test Cases/GetAttributeValue/getAttribute" classname="Test Cases/GetAttributeValue/getAttribute" status="PASSED">
         <system-out><![CDATA[2019-05-18 09:53:06 - [TEST_CASE][PASSED] - Test Cases/GetAttributeValue/getAttribute: Test Cases/GetAttributeValue/getAttribute

2019-05-18 09:53:06 - [TEST_STEP][PASSED] - Start listener action : sampleBeforeTestCase: null

2019-05-18 09:53:06 - [TEST_STEP][PASSED] - println(testCaseContext.getTestCaseId()): null

2019-05-18 09:53:06 - [TEST_STEP][PASSED] - println(testCaseContext.getTestCaseVariables()): null

2019-05-18 09:53:08 - [TEST_STEP][PASSED] - log = new com.kms.katalon.core.util.KeywordUtil(): null

2019-05-18 09:53:08 - [TEST_STEP][PASSED] - openBrowser(""): Browser is opened with url: ''

2019-05-18 09:53:08 - [MESSAGE][WARNING] - A browser is already opened. Closing browser and opening a new one

2019-05-18 09:53:08 - [MESSAGE][INFO] - Starting 'Chrome' driver

2019-05-18 09:53:08 - [MESSAGE][INFO] - User set preference: ['args', '[--disable-infobars, --no-sandbox]']

2019-05-18 09:53:12 - [MESSAGE][PASSED] - Browser is opened with url: ''

2019-05-18 09:53:12 - [TEST_STEP][PASSED] - setViewPortSize(700, 500): Viewport is set to new size with width = 700 and height = 500

2019-05-18 09:53:15 - [MESSAGE][PASSED] - Viewport is set to new size with width = 700 and height = 500

2019-05-18 09:53:15 - [TEST_STEP][PASSED] - navigateToUrl("http://demoaut.katalon.com/"): Navigate to 'http://demoaut.katalon.com/' successfully

2019-05-18 09:53:18 - [MESSAGE][PASSED] - Navigate to 'http://demoaut.katalon.com/' successfully

2019-05-18 09:53:18 - [TEST_STEP][PASSED] - attribute = getAttribute(findTestObject("katalon_5_3_katalon_demo/Page_CURAHealthcareService/a_MakeAppointment"), "class"): Attribute 'class' of object 'Object Repository/katalon_5_3_katalon_demo/Page_CURAHealthcareService/a_MakeAppointment' is: 'btn btn-dark btn-lg'

2019-05-18 09:53:18 - [MESSAGE][PASSED] - Attribute 'class' of object 'Object Repository/katalon_5_3_katalon_demo/Page_CURAHealthcareService/a_MakeAppointment' is: 'btn btn-dark btn-lg'

2019-05-18 09:53:18 - [TEST_STEP][PASSED] - verifyMatch(attribute, "btn btn-dark btn-lg", false): Actual text 'btn btn-dark btn-lg' and expected text 'btn btn-dark btn-lg' are matched 

2019-05-18 09:53:18 - [MESSAGE][PASSED] - Actual text 'btn btn-dark btn-lg' and expected text 'btn btn-dark btn-lg' are matched 

2019-05-18 09:53:18 - [TEST_STEP][PASSED] - click(findTestObject("katalon_5_3_katalon_demo/Page_CURAHealthcareService/a_MakeAppointment")): Object: 'Object Repository/katalon_5_3_katalon_demo/Page_CURAHealthcareService/a_MakeAppointment' is clicked on

2019-05-18 09:53:19 - [MESSAGE][PASSED] - Object: 'Object Repository/katalon_5_3_katalon_demo/Page_CURAHealthcareService/a_MakeAppointment' is clicked on

2019-05-18 09:53:19 - [TEST_STEP][PASSED] - setText(findTestObject("katalon_5_3_katalon_demo/Page_CURAHealthcareService/input_username"), username): Text 'John Doe' is set on object 'Object Repository/katalon_5_3_katalon_demo/Page_CURAHealthcareService/input_username'

2019-05-18 09:53:20 - [MESSAGE][PASSED] - Text 'John Doe' is set on object 'Object Repository/katalon_5_3_katalon_demo/Page_CURAHealthcareService/input_username'

2019-05-18 09:53:20 - [TEST_STEP][PASSED] - setEncryptedText(findTestObject("katalon_5_3_katalon_demo/Page_CURAHealthcareService/input_password"), pass): Text ****** has been set on object 'Object Repository/katalon_5_3_katalon_demo/Page_CURAHealthcareService/input_password'

2019-05-18 09:53:20 - [MESSAGE][PASSED] - Text ****** has been set on object 'Object Repository/katalon_5_3_katalon_demo/Page_CURAHealthcareService/input_password'

2019-05-18 09:53:20 - [TEST_STEP][PASSED] - click(findTestObject("katalon_5_3_katalon_demo/Page_CURAHealthcareService/button_Login")): Object: 'Object Repository/katalon_5_3_katalon_demo/Page_CURAHealthcareService/button_Login' is clicked on

2019-05-18 09:53:21 - [MESSAGE][PASSED] - Object: 'Object Repository/katalon_5_3_katalon_demo/Page_CURAHealthcareService/button_Login' is clicked on

2019-05-18 09:53:21 - [TEST_STEP][PASSED] - driver = getWebDriver(): null

2019-05-18 09:53:21 - [TEST_STEP][PASSED] - allFormChildElements = driver.findElements(By.className("form-control")): null

2019-05-18 09:53:21 - [TEST_STEP][PASSED] - println(allFormChildElements.size()=$allFormChildElements.size()): null

2019-05-18 09:53:21 - [TEST_STEP][PASSED] - println(allFormChildElements): null

2019-05-18 09:53:21 - [TEST_STEP][PASSED] - elements = driver.findElements(By.xpath("//button")): null

2019-05-18 09:53:21 - [TEST_STEP][PASSED] - for (org.openqa.selenium.WebElement el : elements): null

2019-05-18 09:53:21 - [TEST_STEP][PASSED] - println($el.getTagName()): null

2019-05-18 09:53:21 - [TEST_STEP][PASSED] - println($el.getText()): null

2019-05-18 09:53:21 - [TEST_STEP][PASSED] - println($el.getAttribute(value)): null

2019-05-18 09:53:21 - [TEST_STEP][PASSED] - setText(findTestObject("Object Repository/withoutSpaces/Page_CURAHealthcareService/input_VisitDate(Required)_vi"), "15/02/2090"): Text '15/02/2090' is set on object 'Object Repository/withoutSpaces/Page_CURAHealthcareService/input_VisitDate(Required)_vi'

2019-05-18 09:53:22 - [MESSAGE][PASSED] - Text '15/02/2090' is set on object 'Object Repository/withoutSpaces/Page_CURAHealthcareService/input_VisitDate(Required)_vi'

2019-05-18 09:53:22 - [TEST_STEP][PASSED] - click = driver.findElement(By.xpath("//button[contains(.,'Book Appointment')]")): null

2019-05-18 09:53:22 - [TEST_STEP][PASSED] - click.click(): null

2019-05-18 09:53:23 - [TEST_STEP][PASSED] - labels = driver.findElements(By.xpath("//label")): null

2019-05-18 09:53:23 - [TEST_STEP][PASSED] - for (org.openqa.selenium.WebElement el : labels): Comment

2019-05-18 09:53:23 - [TEST_STEP][PASSED] - log.logInfo($el.getText()): Facility

2019-05-18 09:53:23 - [MESSAGE][INFO] - Facility

2019-05-18 09:53:23 - [TEST_STEP][PASSED] - log.logInfo($el.getText()): Apply for hospital readmission

2019-05-18 09:53:23 - [MESSAGE][INFO] - Apply for hospital readmission

2019-05-18 09:53:23 - [TEST_STEP][PASSED] - log.logInfo($el.getText()): Healthcare Program

2019-05-18 09:53:23 - [MESSAGE][INFO] - Healthcare Program

2019-05-18 09:53:23 - [TEST_STEP][PASSED] - log.logInfo($el.getText()): Visit Date

2019-05-18 09:53:23 - [MESSAGE][INFO] - Visit Date

2019-05-18 09:53:23 - [TEST_STEP][PASSED] - log.logInfo($el.getText()): Comment

2019-05-18 09:53:23 - [MESSAGE][INFO] - Comment

2019-05-18 09:53:23 - [TEST_STEP][PASSED] - expectedString = "Medicare": null

2019-05-18 09:53:23 - [TEST_STEP][PASSED] - list = new java.util.ArrayList(): null

2019-05-18 09:53:23 - [TEST_STEP][PASSED] - list.add("Tokyo CURA Healthcare Center"): null

2019-05-18 09:53:23 - [TEST_STEP][PASSED] - list.add("Medicare"): null

2019-05-18 09:53:23 - [TEST_STEP][PASSED] - array = new java.util.ArrayList(): null

2019-05-18 09:53:23 - [TEST_STEP][PASSED] - ids = driver.findElements(By.tagName("p")): null

2019-05-18 09:53:23 - [TEST_STEP][PASSED] - for (org.openqa.selenium.WebElement el : ids): null

2019-05-18 09:53:23 - [TEST_STEP][PASSED] - array.add($el.getText()): null

2019-05-18 09:53:23 - [TEST_STEP][PASSED] - array.add($el.getText()): null

2019-05-18 09:53:23 - [TEST_STEP][PASSED] - array.add($el.getText()): null

2019-05-18 09:53:23 - [TEST_STEP][PASSED] - array.add($el.getText()): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - array.add($el.getText()): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - array.add($el.getText()): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - array.add($el.getText()): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - array.add($el.getText()): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - array.add($el.getText()): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - for ([x = 0, x < array.size(), (x++)]): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - if (array[x].equals(expectedString)): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - else: null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - println("page has not text!"): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - break: null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - s1 = new java.util.HashSet(java.util.Arrays.asList(array)): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - out.println(s1): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - s1.removeAll(Arrays.asList(list)): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - println(s1): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - sb = new java.lang.StringBuilder(): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - for (String s : array): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - sb.append(s): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - sb.append(s): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - sb.append(s): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - sb.append(s): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - sb.append(s): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - sb.append(s): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - sb.append(s): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - sb.append(s): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - sb.append(s): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - log.logInfo(sb.toString()): Please be informed that your appointment has been booked as following:Tokyo CURA Healthcare CenterNoMedicare15/02/2090Go to HomepageAtlanta 550 Pharr Road NE Suite 525
Atlanta, GA 30305Copyright © CURA Healthcare Service 2019

2019-05-18 09:53:24 - [MESSAGE][INFO] - Please be informed that your appointment has been booked as following:Tokyo CURA Healthcare CenterNoMedicare15/02/2090Go to HomepageAtlanta 550 Pharr Road NE Suite 525
Atlanta, GA 30305Copyright © CURA Healthcare Service 2019

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - sb2 = new java.lang.StringBuilder(): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - for (String s : list): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - sb2.append(s): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - sb2.append(s): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - log.logInfo(sb2.toString()): Tokyo CURA Healthcare CenterMedicare

2019-05-18 09:53:24 - [MESSAGE][INFO] - Tokyo CURA Healthcare CenterMedicare

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - diff1 = readPdfFile.verifyPdfContent.findNotMatching(sb.toString(), sb2.toString()): readPdfFile.verifyPdfContent.findNotMatching is PASSED

2019-05-18 09:53:24 - [MESSAGE][PASSED] - readPdfFile.verifyPdfContent.findNotMatching is PASSED

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - diff2 = readPdfFile.verifyPdfContent.findNotMatching(sb2.toString(), sb.toString()): readPdfFile.verifyPdfContent.findNotMatching is PASSED

2019-05-18 09:53:24 - [MESSAGE][PASSED] - readPdfFile.verifyPdfContent.findNotMatching is PASSED

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - log.logInfo("pages have differences file1 have words " + diff1 + " which are not in file2, file2 instead have " + diff2): pages have differences file1 have words [Please, be, informed, that, your, appointment, has, been, booked, as, following:Tokyo, CenterNoMedicare15/02/2090Go, to, HomepageAtlanta, 550, Pharr, Road, NE, Suite, 525
Atlanta,, GA, 30305Copyright, ©, Service, 2019] which are not in file2, file2 instead have [Tokyo, CenterMedicare]

2019-05-18 09:53:24 - [MESSAGE][INFO] - pages have differences file1 have words [Please, be, informed, that, your, appointment, has, been, booked, as, following:Tokyo, CenterNoMedicare15/02/2090Go, to, HomepageAtlanta, 550, Pharr, Road, NE, Suite, 525
Atlanta,, GA, 30305Copyright, ©, Service, 2019] which are not in file2, file2 instead have [Tokyo, CenterMedicare]

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - ret = strDiffChop(sb.toString(), sb2.toString()): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - if (s1.length() > s2.length()): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - return s1.substring((s2.length() - 1)): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - log.logInfo(ret): tment has been booked as following:Tokyo CURA Healthcare CenterNoMedicare15/02/2090Go to HomepageAtlanta 550 Pharr Road NE Suite 525
Atlanta, GA 30305Copyright © CURA Healthcare Service 2019

2019-05-18 09:53:24 - [MESSAGE][INFO] - tment has been booked as following:Tokyo CURA Healthcare CenterNoMedicare15/02/2090Go to HomepageAtlanta 550 Pharr Road NE Suite 525
Atlanta, GA 30305Copyright © CURA Healthcare Service 2019

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - cards = new java.util.ArrayList(): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - cards.add("VISA"): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - cards.add("MAESTRO"): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - cards.add("MASTER CARD"): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - cards.add("VISA ELECTRON"): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - page = new java.util.ArrayList(): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - page.add("VISA"): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - page.add("MASTER CARD"): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - page.add("DINERS"): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - page.add("VISA ELECTRON"): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - page.add("VISA KULTA"): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - newAddedElementsList = new java.util.ArrayList(): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - removedElementsList = new java.util.ArrayList(): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - for (String ele : cards): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - if (page.contains(ele)): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - <not implemented yet for class: org.codehaus.groovy.ast.stmt.ContinueStatement>: null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - if (page.contains(ele)): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - else: null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - removedElementsList.add(ele): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - if (page.contains(ele)): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - <not implemented yet for class: org.codehaus.groovy.ast.stmt.ContinueStatement>: null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - if (page.contains(ele)): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - <not implemented yet for class: org.codehaus.groovy.ast.stmt.ContinueStatement>: null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - println(removedElementsList): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - for (String ele : page): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - if (cards.contains(ele)): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - <not implemented yet for class: org.codehaus.groovy.ast.stmt.ContinueStatement>: null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - if (cards.contains(ele)): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - <not implemented yet for class: org.codehaus.groovy.ast.stmt.ContinueStatement>: null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - if (cards.contains(ele)): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - else: null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - newAddedElementsList.add(ele): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - if (cards.contains(ele)): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - <not implemented yet for class: org.codehaus.groovy.ast.stmt.ContinueStatement>: null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - if (cards.contains(ele)): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - else: null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - newAddedElementsList.add(ele): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - println(CollectionUtils.isEqualCollection(newAddedElementsList, cards)): null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - message = "page have " + newAddedElementsList + " which not in data " + cards: null

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - if (!(CollectionUtils.isEqualCollection(newAddedElementsList, cards))): page have [DINERS, VISA KULTA] which not in data [VISA, MAESTRO, MASTER CARD, VISA ELECTRON]

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - log.logInfo("page have " + newAddedElementsList + " which not in data " + cards): page have [DINERS, VISA KULTA] which not in data [VISA, MAESTRO, MASTER CARD, VISA ELECTRON]

2019-05-18 09:53:24 - [MESSAGE][INFO] - page have [DINERS, VISA KULTA] which not in data [VISA, MAESTRO, MASTER CARD, VISA ELECTRON]

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - log.markWarning(message): page have [DINERS, VISA KULTA] which not in data [VISA, MAESTRO, MASTER CARD, VISA ELECTRON]

2019-05-18 09:53:24 - [MESSAGE][WARNING] - page have [DINERS, VISA KULTA] which not in data [VISA, MAESTRO, MASTER CARD, VISA ELECTRON]

2019-05-18 09:53:24 - [TEST_STEP][PASSED] - delay(3): Delayed 3 second(s)

2019-05-18 09:53:27 - [MESSAGE][PASSED] - Delayed 3 second(s)

2019-05-18 09:53:27 - [TEST_STEP][PASSED] - closeBrowser(): Browser is closed

2019-05-18 09:53:28 - [MESSAGE][PASSED] - Browser is closed]]></system-out>
         <system-err><![CDATA[]]></system-err>
      </testcase>
      <testcase name="Test Cases/HtmlTableValues/TableValues" classname="Test Cases/HtmlTableValues/TableValues" status="PASSED">
         <system-out><![CDATA[2019-05-18 09:53:28 - [TEST_CASE][PASSED] - Test Cases/HtmlTableValues/TableValues: Test Cases/HtmlTableValues/TableValues

2019-05-18 09:53:28 - [TEST_STEP][PASSED] - Start listener action : sampleBeforeTestCase: null

2019-05-18 09:53:28 - [TEST_STEP][PASSED] - println(testCaseContext.getTestCaseId()): null

2019-05-18 09:53:28 - [TEST_STEP][PASSED] - println(testCaseContext.getTestCaseVariables()): null

2019-05-18 09:53:29 - [TEST_STEP][PASSED] - openBrowser(""): Browser is opened with url: ''

2019-05-18 09:53:29 - [MESSAGE][INFO] - Starting 'Chrome' driver

2019-05-18 09:53:29 - [MESSAGE][INFO] - User set preference: ['args', '[--disable-infobars, --no-sandbox]']

2019-05-18 09:53:34 - [MESSAGE][PASSED] - Browser is opened with url: ''

2019-05-18 09:53:34 - [TEST_STEP][PASSED] - navigateToUrl("https://datatables.net/examples/data_sources/dom"): Navigate to 'https://datatables.net/examples/data_sources/dom' successfully

2019-05-18 09:53:40 - [MESSAGE][PASSED] - Navigate to 'https://datatables.net/examples/data_sources/dom' successfully

2019-05-18 09:53:40 - [TEST_STEP][PASSED] - driver3 = getWebDriver(): null

2019-05-18 09:53:40 - [TEST_STEP][PASSED] - table = driver3.findElement(By.xpath("//table/tbody")): null

2019-05-18 09:53:40 - [TEST_STEP][PASSED] - table = kms.turing.katalon.plugins.helper.table.HTMLTableHelper.identifyTableByColumnHeaders(["Name", "Position", "Office", "Age", "Start date", "Salary"], 10, CONTINUE_ON_FAILURE): kms.turing.katalon.plugins.helper.table.HTMLTableHelper.identifyTableByColumnHeaders is PASSED

2019-05-18 09:53:40 - [MESSAGE][INFO] - identify web table using headers: [Name, Position, Office, Age, Start date, Salary]

2019-05-18 09:53:41 - [MESSAGE][PASSED] - kms.turing.katalon.plugins.helper.table.HTMLTableHelper.identifyTableByColumnHeaders is PASSED

2019-05-18 09:53:41 - [TEST_STEP][PASSED] - println(table): null

2019-05-18 09:53:41 - [TEST_STEP][PASSED] - closeBrowser(): Browser is closed

2019-05-18 09:53:41 - [MESSAGE][PASSED] - Browser is closed

2019-05-18 09:53:41 - [TEST_STEP][PASSED] - ExpectedValue = "Airi Satou": null

2019-05-18 09:53:41 - [TEST_STEP][PASSED] - page1 = new java.util.ArrayList(): null

2019-05-18 09:53:41 - [TEST_STEP][PASSED] - page2 = new java.util.ArrayList(): null

2019-05-18 09:53:41 - [TEST_STEP][PASSED] - page3 = new java.util.ArrayList(): null

2019-05-18 09:53:41 - [TEST_STEP][PASSED] - page4 = new java.util.ArrayList(): null

2019-05-18 09:53:41 - [TEST_STEP][PASSED] - page5 = new java.util.ArrayList(): null

2019-05-18 09:53:41 - [TEST_STEP][PASSED] - page6 = new java.util.ArrayList(): null

2019-05-18 09:53:41 - [TEST_STEP][PASSED] - lArray = new java.util.ArrayList(): null

2019-05-18 09:53:41 - [TEST_STEP][PASSED] - lArray.add(page1): null

2019-05-18 09:53:41 - [TEST_STEP][PASSED] - lArray.add(page2): null

2019-05-18 09:53:41 - [TEST_STEP][PASSED] - lArray.add(page3): null

2019-05-18 09:53:41 - [TEST_STEP][PASSED] - lArray.add(page4): null

2019-05-18 09:53:41 - [TEST_STEP][PASSED] - lArray.add(page5): null

2019-05-18 09:53:41 - [TEST_STEP][PASSED] - lArray.add(page6): null

2019-05-18 09:53:41 - [TEST_STEP][PASSED] - myObject = new com.kms.katalon.core.testobject.TestObject(myObject): null

2019-05-18 09:53:41 - [TEST_STEP][PASSED] - pagi = 1: null

2019-05-18 09:53:41 - [TEST_STEP][PASSED] - index = 0: null

2019-05-18 09:53:41 - [TEST_STEP][PASSED] - list2 = new java.util.ArrayList(): null

2019-05-18 09:53:41 - [TEST_STEP][PASSED] - openBrowser(""): Browser is opened with url: ''

2019-05-18 09:53:41 - [MESSAGE][INFO] - Starting 'Chrome' driver

2019-05-18 09:53:41 - [MESSAGE][INFO] - User set preference: ['args', '[--disable-infobars, --no-sandbox]']

2019-05-18 09:53:46 - [MESSAGE][PASSED] - Browser is opened with url: ''

2019-05-18 09:53:46 - [TEST_STEP][PASSED] - navigateToUrl("https://datatables.net/examples/data_sources/dom"): Navigate to 'https://datatables.net/examples/data_sources/dom' successfully

2019-05-18 09:53:53 - [MESSAGE][PASSED] - Navigate to 'https://datatables.net/examples/data_sources/dom' successfully

2019-05-18 09:53:53 - [TEST_STEP][PASSED] - driver2 = getWebDriver(): null

2019-05-18 09:53:53 - [TEST_STEP][PASSED] - list2 = driver2.findElements(By.xpath("//a[contains(@class, 'paginate_button')]")): null

2019-05-18 09:53:53 - [TEST_STEP][PASSED] - println(list2.size()): null

2019-05-18 09:53:53 - [TEST_STEP][PASSED] - count = list2.size() - 2: null

2019-05-18 09:53:53 - [TEST_STEP][PASSED] - closeBrowser(): Browser is closed

2019-05-18 09:53:54 - [MESSAGE][PASSED] - Browser is closed

2019-05-18 09:53:54 - [TEST_STEP][PASSED] - for ([i = 0, i < count, (i++)]): Delayed 10 second(s)

2019-05-18 09:53:54 - [TEST_STEP][PASSED] - openBrowser(""): Browser is opened with url: ''

2019-05-18 09:53:54 - [MESSAGE][INFO] - Starting 'Chrome' driver

2019-05-18 09:53:54 - [MESSAGE][INFO] - User set preference: ['args', '[--disable-infobars, --no-sandbox]']

2019-05-18 09:53:58 - [MESSAGE][PASSED] - Browser is opened with url: ''

2019-05-18 09:53:58 - [TEST_STEP][PASSED] - navigateToUrl("https://datatables.net/examples/data_sources/dom"): Navigate to 'https://datatables.net/examples/data_sources/dom' successfully

2019-05-18 09:54:06 - [MESSAGE][PASSED] - Navigate to 'https://datatables.net/examples/data_sources/dom' successfully

2019-05-18 09:54:06 - [TEST_STEP][PASSED] - listHref = getAllLinksOnCurrentPage(true, []): Found 140 unique links on the page https://datatables.net/examples/data_sources/dom

2019-05-18 09:54:09 - [MESSAGE][PASSED] - Found 140 unique links on the page https://datatables.net/examples/data_sources/dom

2019-05-18 09:54:09 - [TEST_STEP][PASSED] - println(listHref): null

2019-05-18 09:54:09 - [TEST_STEP][PASSED] - path = "//div[@id='example_paginate']/span/a[" + pagi + "]": null

2019-05-18 09:54:09 - [TEST_STEP][PASSED] - myObject.addProperty("xpath", EQUALS, path, true): null

2019-05-18 09:54:09 - [TEST_STEP][PASSED] - click(myObject): Object: 'myObject' is clicked on

2019-05-18 09:54:09 - [MESSAGE][PASSED] - Object: 'myObject' is clicked on

2019-05-18 09:54:09 - [TEST_STEP][PASSED] - delay(1): Delayed 1 second(s)

2019-05-18 09:54:10 - [MESSAGE][PASSED] - Delayed 1 second(s)

2019-05-18 09:54:10 - [TEST_STEP][PASSED] - driver = getWebDriver(): null

2019-05-18 09:54:10 - [TEST_STEP][PASSED] - Table = driver.findElement(By.xpath("//table/tbody")): null

2019-05-18 09:54:10 - [TEST_STEP][PASSED] - rows_table = Table.findElements(By.tagName("tr")): null

2019-05-18 09:54:10 - [TEST_STEP][PASSED] - rows_count = rows_table.size(): null

2019-05-18 09:54:10 - [TEST_STEP][PASSED] - for ([row = 0, row < rows_count, (row++)]): null

2019-05-18 09:54:10 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:54:10 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:54:10 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:54:10 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:10 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:10 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:10 - [TEST_STEP][PASSED] - println("Text present in row number 3 is: " + get(2).getText()): null

2019-05-18 09:54:10 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:11 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:11 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:11 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:11 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:11 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:11 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:11 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:11 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:11 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:11 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:11 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:11 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:11 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:11 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:11 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:54:11 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:54:11 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:54:11 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:11 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:11 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:11 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:11 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:11 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:11 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:11 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:11 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:11 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:11 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:11 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:11 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:11 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:11 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:11 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:11 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:11 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:11 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:54:11 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:54:11 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:54:11 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:11 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:11 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:11 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:12 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:12 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:12 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:12 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:12 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:12 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:12 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:12 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:12 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:12 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:12 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:12 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:12 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:12 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:12 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:54:12 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:54:12 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:54:12 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:12 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:12 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:12 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:12 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:12 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:12 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:12 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:12 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:12 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:12 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:12 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:12 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:12 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:12 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:12 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:12 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:12 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:12 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:54:12 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:54:12 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:54:12 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:12 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:12 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:12 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:12 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:12 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:12 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:13 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:13 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:13 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:13 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:13 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:13 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:13 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:13 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:13 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:13 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:13 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:13 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:54:13 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:54:13 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:54:13 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:13 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:13 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:13 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:13 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:13 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:13 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:13 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:13 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:13 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:13 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:13 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:13 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:13 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:13 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:13 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:13 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:13 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:13 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:54:13 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:54:13 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:54:13 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:13 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:13 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:13 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:14 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:14 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:14 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:14 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:14 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:14 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:14 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:14 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:14 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:14 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:14 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:14 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:14 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:14 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:14 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:54:14 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:54:14 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:54:14 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:14 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:14 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:14 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:14 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:14 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:14 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:14 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:14 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:14 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:14 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:14 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:14 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:14 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:14 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:14 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:14 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:14 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:14 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:54:14 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:54:14 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:54:14 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:15 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:15 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:15 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:15 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:15 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:15 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:15 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:15 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:15 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:15 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:15 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:15 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:15 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:15 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:15 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:15 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:15 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:15 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:54:15 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:54:15 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:54:15 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:15 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:15 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:15 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:15 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:15 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:15 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:15 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:15 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:15 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:15 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:15 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:15 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:15 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:15 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:15 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:15 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:15 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:15 - [TEST_STEP][PASSED] - (pagi++): null

2019-05-18 09:54:15 - [TEST_STEP][PASSED] - (index++): null

2019-05-18 09:54:15 - [TEST_STEP][PASSED] - delay(10): Delayed 10 second(s)

2019-05-18 09:54:25 - [MESSAGE][PASSED] - Delayed 10 second(s)

2019-05-18 09:54:25 - [TEST_STEP][PASSED] - closeBrowser(): Browser is closed

2019-05-18 09:54:26 - [MESSAGE][PASSED] - Browser is closed

2019-05-18 09:54:26 - [TEST_STEP][PASSED] - delay(10): Delayed 10 second(s)

2019-05-18 09:54:36 - [MESSAGE][PASSED] - Delayed 10 second(s)

2019-05-18 09:54:36 - [TEST_STEP][PASSED] - openBrowser(""): Browser is opened with url: ''

2019-05-18 09:54:36 - [MESSAGE][INFO] - Starting 'Chrome' driver

2019-05-18 09:54:36 - [MESSAGE][INFO] - User set preference: ['args', '[--disable-infobars, --no-sandbox]']

2019-05-18 09:54:41 - [MESSAGE][PASSED] - Browser is opened with url: ''

2019-05-18 09:54:41 - [TEST_STEP][PASSED] - navigateToUrl("https://datatables.net/examples/data_sources/dom"): Navigate to 'https://datatables.net/examples/data_sources/dom' successfully

2019-05-18 09:54:47 - [MESSAGE][PASSED] - Navigate to 'https://datatables.net/examples/data_sources/dom' successfully

2019-05-18 09:54:47 - [TEST_STEP][PASSED] - listHref = getAllLinksOnCurrentPage(true, []): Found 140 unique links on the page https://datatables.net/examples/data_sources/dom

2019-05-18 09:54:50 - [MESSAGE][PASSED] - Found 140 unique links on the page https://datatables.net/examples/data_sources/dom

2019-05-18 09:54:50 - [TEST_STEP][PASSED] - println(listHref): null

2019-05-18 09:54:50 - [TEST_STEP][PASSED] - path = "//div[@id='example_paginate']/span/a[" + pagi + "]": null

2019-05-18 09:54:50 - [TEST_STEP][PASSED] - myObject.addProperty("xpath", EQUALS, path, true): null

2019-05-18 09:54:50 - [TEST_STEP][PASSED] - click(myObject): Object: 'myObject' is clicked on

2019-05-18 09:54:50 - [MESSAGE][PASSED] - Object: 'myObject' is clicked on

2019-05-18 09:54:50 - [TEST_STEP][PASSED] - delay(1): Delayed 1 second(s)

2019-05-18 09:54:51 - [MESSAGE][PASSED] - Delayed 1 second(s)

2019-05-18 09:54:51 - [TEST_STEP][PASSED] - driver = getWebDriver(): null

2019-05-18 09:54:51 - [TEST_STEP][PASSED] - Table = driver.findElement(By.xpath("//table/tbody")): null

2019-05-18 09:54:51 - [TEST_STEP][PASSED] - rows_table = Table.findElements(By.tagName("tr")): null

2019-05-18 09:54:51 - [TEST_STEP][PASSED] - rows_count = rows_table.size(): null

2019-05-18 09:54:51 - [TEST_STEP][PASSED] - for ([row = 0, row < rows_count, (row++)]): null

2019-05-18 09:54:51 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:54:51 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:54:51 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:54:51 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:51 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:51 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:51 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:51 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:51 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:51 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:51 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:51 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:51 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:51 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:51 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:51 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:51 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:51 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:51 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:52 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:53 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:53 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:53 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:53 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:53 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:53 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:53 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:53 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:53 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:54:53 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:54:53 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:54:53 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:53 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:53 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:53 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:53 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:53 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:53 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:53 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:53 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:53 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:53 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:53 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:53 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:53 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:53 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:53 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:53 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:53 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:53 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:54:53 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:54:53 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:54:53 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:53 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:53 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:53 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:53 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:53 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:53 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:53 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:53 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:53 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:53 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:53 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:53 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:53 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:53 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:53 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:54 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:55 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:55 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:55 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:55 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:55 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:55 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:55 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:55 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:55 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:54:55 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:54:55 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:54:55 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:55 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:55 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:55 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:55 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:55 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:55 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:55 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:55 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:55 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:55 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:55 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:55 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:55 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:55 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:55 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:54:55 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:54:55 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:54:55 - [TEST_STEP][PASSED] - (pagi++): null

2019-05-18 09:54:55 - [TEST_STEP][PASSED] - (index++): null

2019-05-18 09:54:55 - [TEST_STEP][PASSED] - delay(10): Delayed 10 second(s)

2019-05-18 09:55:05 - [MESSAGE][PASSED] - Delayed 10 second(s)

2019-05-18 09:55:05 - [TEST_STEP][PASSED] - closeBrowser(): Browser is closed

2019-05-18 09:55:06 - [MESSAGE][PASSED] - Browser is closed

2019-05-18 09:55:06 - [TEST_STEP][PASSED] - delay(10): Delayed 10 second(s)

2019-05-18 09:55:16 - [MESSAGE][PASSED] - Delayed 10 second(s)

2019-05-18 09:55:16 - [TEST_STEP][PASSED] - openBrowser(""): Browser is opened with url: ''

2019-05-18 09:55:16 - [MESSAGE][INFO] - Starting 'Chrome' driver

2019-05-18 09:55:16 - [MESSAGE][INFO] - User set preference: ['args', '[--disable-infobars, --no-sandbox]']

2019-05-18 09:55:21 - [MESSAGE][PASSED] - Browser is opened with url: ''

2019-05-18 09:55:21 - [TEST_STEP][PASSED] - navigateToUrl("https://datatables.net/examples/data_sources/dom"): Navigate to 'https://datatables.net/examples/data_sources/dom' successfully

2019-05-18 09:55:27 - [MESSAGE][PASSED] - Navigate to 'https://datatables.net/examples/data_sources/dom' successfully

2019-05-18 09:55:27 - [TEST_STEP][PASSED] - listHref = getAllLinksOnCurrentPage(true, []): Found 140 unique links on the page https://datatables.net/examples/data_sources/dom

2019-05-18 09:55:31 - [MESSAGE][PASSED] - Found 140 unique links on the page https://datatables.net/examples/data_sources/dom

2019-05-18 09:55:31 - [TEST_STEP][PASSED] - println(listHref): null

2019-05-18 09:55:31 - [TEST_STEP][PASSED] - path = "//div[@id='example_paginate']/span/a[" + pagi + "]": null

2019-05-18 09:55:31 - [TEST_STEP][PASSED] - myObject.addProperty("xpath", EQUALS, path, true): null

2019-05-18 09:55:31 - [TEST_STEP][PASSED] - click(myObject): Object: 'myObject' is clicked on

2019-05-18 09:55:31 - [MESSAGE][PASSED] - Object: 'myObject' is clicked on

2019-05-18 09:55:31 - [TEST_STEP][PASSED] - delay(1): Delayed 1 second(s)

2019-05-18 09:55:32 - [MESSAGE][PASSED] - Delayed 1 second(s)

2019-05-18 09:55:32 - [TEST_STEP][PASSED] - driver = getWebDriver(): null

2019-05-18 09:55:32 - [TEST_STEP][PASSED] - Table = driver.findElement(By.xpath("//table/tbody")): null

2019-05-18 09:55:32 - [TEST_STEP][PASSED] - rows_table = Table.findElements(By.tagName("tr")): null

2019-05-18 09:55:32 - [TEST_STEP][PASSED] - rows_count = rows_table.size(): null

2019-05-18 09:55:32 - [TEST_STEP][PASSED] - for ([row = 0, row < rows_count, (row++)]): null

2019-05-18 09:55:32 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:55:33 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:55:33 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:55:33 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:33 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:33 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:33 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:33 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:33 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:33 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:33 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:33 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:33 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:33 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:33 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:33 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:33 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:33 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:33 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:33 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:33 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:33 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:55:33 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:55:33 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:55:33 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:33 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:33 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:33 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:33 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:33 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:33 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:33 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:33 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:33 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:33 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:33 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:33 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:33 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:33 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:33 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:33 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:33 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:33 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:55:34 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:55:34 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:55:34 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:34 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:34 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:34 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:34 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:34 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:34 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:34 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:34 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:34 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:34 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:34 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:34 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:34 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:34 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:34 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:34 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:34 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:34 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:55:34 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:55:34 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:55:34 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:34 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:34 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:34 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:34 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:34 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:34 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:34 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:34 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:34 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:34 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:34 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:34 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:34 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:34 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:34 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:34 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:34 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:34 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:55:34 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:55:34 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:55:34 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:34 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:34 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:34 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:34 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:34 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:34 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:35 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:35 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:35 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:35 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:35 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:35 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:35 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:35 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:35 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:35 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:35 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:35 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:55:35 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:55:35 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:55:35 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:35 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:35 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:35 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:35 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:35 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:35 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:35 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:35 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:35 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:35 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:35 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:35 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:35 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:35 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:35 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:35 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:35 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:35 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:55:35 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:55:35 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:55:35 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:35 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:35 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:35 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:35 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:35 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:35 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:35 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:35 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:35 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:36 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:36 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:36 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:36 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:36 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:36 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:36 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:36 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:36 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:55:36 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:55:36 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:55:36 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:36 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:36 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:36 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:36 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:36 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:36 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:36 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:36 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:36 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:36 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:36 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:36 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:36 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:36 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:36 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:36 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:36 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:36 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:55:36 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:55:36 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:55:36 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:36 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:36 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:36 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:36 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:36 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:36 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:36 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:36 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:36 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:36 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:36 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:36 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:37 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:37 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:37 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:37 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:37 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:37 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:55:37 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:55:37 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:55:37 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:37 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:37 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:37 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:37 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:37 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:37 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:37 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:37 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:37 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:37 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:37 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:37 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:37 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:37 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:37 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:55:37 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:55:37 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:55:37 - [TEST_STEP][PASSED] - (pagi++): null

2019-05-18 09:55:37 - [TEST_STEP][PASSED] - (index++): null

2019-05-18 09:55:37 - [TEST_STEP][PASSED] - delay(10): Delayed 10 second(s)

2019-05-18 09:55:47 - [MESSAGE][PASSED] - Delayed 10 second(s)

2019-05-18 09:55:47 - [TEST_STEP][PASSED] - closeBrowser(): Browser is closed

2019-05-18 09:55:48 - [MESSAGE][PASSED] - Browser is closed

2019-05-18 09:55:48 - [TEST_STEP][PASSED] - delay(10): Delayed 10 second(s)

2019-05-18 09:55:58 - [MESSAGE][PASSED] - Delayed 10 second(s)

2019-05-18 09:55:58 - [TEST_STEP][PASSED] - openBrowser(""): Browser is opened with url: ''

2019-05-18 09:55:58 - [MESSAGE][INFO] - Starting 'Chrome' driver

2019-05-18 09:55:58 - [MESSAGE][INFO] - User set preference: ['args', '[--disable-infobars, --no-sandbox]']

2019-05-18 09:56:02 - [MESSAGE][PASSED] - Browser is opened with url: ''

2019-05-18 09:56:02 - [TEST_STEP][PASSED] - navigateToUrl("https://datatables.net/examples/data_sources/dom"): Navigate to 'https://datatables.net/examples/data_sources/dom' successfully

2019-05-18 09:56:08 - [MESSAGE][PASSED] - Navigate to 'https://datatables.net/examples/data_sources/dom' successfully

2019-05-18 09:56:08 - [TEST_STEP][PASSED] - listHref = getAllLinksOnCurrentPage(true, []): Found 140 unique links on the page https://datatables.net/examples/data_sources/dom

2019-05-18 09:56:12 - [MESSAGE][PASSED] - Found 140 unique links on the page https://datatables.net/examples/data_sources/dom

2019-05-18 09:56:12 - [TEST_STEP][PASSED] - println(listHref): null

2019-05-18 09:56:12 - [TEST_STEP][PASSED] - path = "//div[@id='example_paginate']/span/a[" + pagi + "]": null

2019-05-18 09:56:12 - [TEST_STEP][PASSED] - myObject.addProperty("xpath", EQUALS, path, true): null

2019-05-18 09:56:12 - [TEST_STEP][PASSED] - click(myObject): Object: 'myObject' is clicked on

2019-05-18 09:56:12 - [MESSAGE][PASSED] - Object: 'myObject' is clicked on

2019-05-18 09:56:12 - [TEST_STEP][PASSED] - delay(1): Delayed 1 second(s)

2019-05-18 09:56:13 - [MESSAGE][PASSED] - Delayed 1 second(s)

2019-05-18 09:56:13 - [TEST_STEP][PASSED] - driver = getWebDriver(): null

2019-05-18 09:56:13 - [TEST_STEP][PASSED] - Table = driver.findElement(By.xpath("//table/tbody")): null

2019-05-18 09:56:13 - [TEST_STEP][PASSED] - rows_table = Table.findElements(By.tagName("tr")): null

2019-05-18 09:56:13 - [TEST_STEP][PASSED] - rows_count = rows_table.size(): null

2019-05-18 09:56:13 - [TEST_STEP][PASSED] - for ([row = 0, row < rows_count, (row++)]): null

2019-05-18 09:56:13 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:56:13 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:56:13 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:56:13 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:13 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:13 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:13 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:13 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:13 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:13 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:13 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:13 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:13 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:13 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:13 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:13 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:13 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:13 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:13 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:13 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:13 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:13 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:56:13 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:56:13 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:56:13 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:13 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:13 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:13 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:13 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:13 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:13 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:14 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:14 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:14 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:14 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:14 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:14 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:14 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:14 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:14 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:14 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:14 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:14 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:56:14 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:56:14 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:56:14 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:14 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:14 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:14 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:14 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:14 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:14 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:14 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:14 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:14 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:14 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:14 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:14 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:14 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:14 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:14 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:14 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:14 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:14 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:56:14 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:56:14 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:56:14 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:14 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:14 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:14 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:14 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:14 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:14 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:15 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:15 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:15 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:15 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:15 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:15 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:15 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:15 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:15 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:15 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:15 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:15 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:56:15 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:56:15 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:56:15 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:15 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:15 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:15 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:15 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:15 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:15 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:15 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:15 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:15 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:15 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:15 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:15 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:15 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:15 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:15 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:15 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:15 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:15 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:56:15 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:56:15 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:56:15 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:15 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:15 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:15 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:16 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:16 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:16 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:16 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:16 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:16 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:16 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:16 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:16 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:16 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:16 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:16 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:16 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:16 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:16 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:56:16 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:56:16 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:56:16 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:16 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:16 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:16 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:16 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:16 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:16 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:16 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:16 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:16 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:16 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:16 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:16 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:16 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:16 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:16 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:16 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:16 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:16 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:56:16 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:56:16 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:56:16 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:16 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:16 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:16 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:16 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:16 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:16 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - (pagi++): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - (index++): null

2019-05-18 09:56:17 - [TEST_STEP][PASSED] - delay(10): Delayed 10 second(s)

2019-05-18 09:56:27 - [MESSAGE][PASSED] - Delayed 10 second(s)

2019-05-18 09:56:27 - [TEST_STEP][PASSED] - closeBrowser(): Browser is closed

2019-05-18 09:56:28 - [MESSAGE][PASSED] - Browser is closed

2019-05-18 09:56:28 - [TEST_STEP][PASSED] - delay(10): Delayed 10 second(s)

2019-05-18 09:56:38 - [MESSAGE][PASSED] - Delayed 10 second(s)

2019-05-18 09:56:38 - [TEST_STEP][PASSED] - openBrowser(""): Browser is opened with url: ''

2019-05-18 09:56:38 - [MESSAGE][INFO] - Starting 'Chrome' driver

2019-05-18 09:56:38 - [MESSAGE][INFO] - User set preference: ['args', '[--disable-infobars, --no-sandbox]']

2019-05-18 09:56:43 - [MESSAGE][PASSED] - Browser is opened with url: ''

2019-05-18 09:56:43 - [TEST_STEP][PASSED] - navigateToUrl("https://datatables.net/examples/data_sources/dom"): Navigate to 'https://datatables.net/examples/data_sources/dom' successfully

2019-05-18 09:56:47 - [MESSAGE][PASSED] - Navigate to 'https://datatables.net/examples/data_sources/dom' successfully

2019-05-18 09:56:47 - [TEST_STEP][PASSED] - listHref = getAllLinksOnCurrentPage(true, []): Found 140 unique links on the page https://datatables.net/examples/data_sources/dom

2019-05-18 09:56:50 - [MESSAGE][PASSED] - Found 140 unique links on the page https://datatables.net/examples/data_sources/dom

2019-05-18 09:56:50 - [TEST_STEP][PASSED] - println(listHref): null

2019-05-18 09:56:50 - [TEST_STEP][PASSED] - path = "//div[@id='example_paginate']/span/a[" + pagi + "]": null

2019-05-18 09:56:50 - [TEST_STEP][PASSED] - myObject.addProperty("xpath", EQUALS, path, true): null

2019-05-18 09:56:50 - [TEST_STEP][PASSED] - click(myObject): Object: 'myObject' is clicked on

2019-05-18 09:56:50 - [MESSAGE][PASSED] - Object: 'myObject' is clicked on

2019-05-18 09:56:50 - [TEST_STEP][PASSED] - delay(1): Delayed 1 second(s)

2019-05-18 09:56:51 - [MESSAGE][PASSED] - Delayed 1 second(s)

2019-05-18 09:56:51 - [TEST_STEP][PASSED] - driver = getWebDriver(): null

2019-05-18 09:56:51 - [TEST_STEP][PASSED] - Table = driver.findElement(By.xpath("//table/tbody")): null

2019-05-18 09:56:51 - [TEST_STEP][PASSED] - rows_table = Table.findElements(By.tagName("tr")): null

2019-05-18 09:56:51 - [TEST_STEP][PASSED] - rows_count = rows_table.size(): null

2019-05-18 09:56:51 - [TEST_STEP][PASSED] - for ([row = 0, row < rows_count, (row++)]): null

2019-05-18 09:56:51 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:52 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:53 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:54 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:55 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:55 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:55 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:55 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:55 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:55 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:55 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:55 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:55 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:55 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:55 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:55 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:56:55 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:56:55 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:56:55 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:55 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:55 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:55 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:55 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:55 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:55 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:55 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:55 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:55 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:55 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:55 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:55 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:55 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:55 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:55 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:56:55 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:56:55 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:56:55 - [TEST_STEP][PASSED] - (pagi++): null

2019-05-18 09:56:55 - [TEST_STEP][PASSED] - (index++): null

2019-05-18 09:56:55 - [TEST_STEP][PASSED] - delay(10): Delayed 10 second(s)

2019-05-18 09:57:05 - [MESSAGE][PASSED] - Delayed 10 second(s)

2019-05-18 09:57:05 - [TEST_STEP][PASSED] - closeBrowser(): Browser is closed

2019-05-18 09:57:06 - [MESSAGE][PASSED] - Browser is closed

2019-05-18 09:57:06 - [TEST_STEP][PASSED] - delay(10): Delayed 10 second(s)

2019-05-18 09:57:16 - [MESSAGE][PASSED] - Delayed 10 second(s)

2019-05-18 09:57:16 - [TEST_STEP][PASSED] - openBrowser(""): Browser is opened with url: ''

2019-05-18 09:57:16 - [MESSAGE][INFO] - Starting 'Chrome' driver

2019-05-18 09:57:16 - [MESSAGE][INFO] - User set preference: ['args', '[--disable-infobars, --no-sandbox]']

2019-05-18 09:57:19 - [MESSAGE][PASSED] - Browser is opened with url: ''

2019-05-18 09:57:19 - [TEST_STEP][PASSED] - navigateToUrl("https://datatables.net/examples/data_sources/dom"): Navigate to 'https://datatables.net/examples/data_sources/dom' successfully

2019-05-18 09:57:25 - [MESSAGE][PASSED] - Navigate to 'https://datatables.net/examples/data_sources/dom' successfully

2019-05-18 09:57:25 - [TEST_STEP][PASSED] - listHref = getAllLinksOnCurrentPage(true, []): Found 140 unique links on the page https://datatables.net/examples/data_sources/dom

2019-05-18 09:57:28 - [MESSAGE][PASSED] - Found 140 unique links on the page https://datatables.net/examples/data_sources/dom

2019-05-18 09:57:28 - [TEST_STEP][PASSED] - println(listHref): null

2019-05-18 09:57:28 - [TEST_STEP][PASSED] - path = "//div[@id='example_paginate']/span/a[" + pagi + "]": null

2019-05-18 09:57:28 - [TEST_STEP][PASSED] - myObject.addProperty("xpath", EQUALS, path, true): null

2019-05-18 09:57:28 - [TEST_STEP][PASSED] - click(myObject): Object: 'myObject' is clicked on

2019-05-18 09:57:28 - [MESSAGE][PASSED] - Object: 'myObject' is clicked on

2019-05-18 09:57:28 - [TEST_STEP][PASSED] - delay(1): Delayed 1 second(s)

2019-05-18 09:57:29 - [MESSAGE][PASSED] - Delayed 1 second(s)

2019-05-18 09:57:29 - [TEST_STEP][PASSED] - driver = getWebDriver(): null

2019-05-18 09:57:29 - [TEST_STEP][PASSED] - Table = driver.findElement(By.xpath("//table/tbody")): null

2019-05-18 09:57:29 - [TEST_STEP][PASSED] - rows_table = Table.findElements(By.tagName("tr")): null

2019-05-18 09:57:29 - [TEST_STEP][PASSED] - rows_count = rows_table.size(): null

2019-05-18 09:57:29 - [TEST_STEP][PASSED] - for ([row = 0, row < rows_count, (row++)]): null

2019-05-18 09:57:29 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:57:29 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:57:29 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:57:29 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:57:29 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:57:29 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:57:29 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:57:29 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:57:29 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:57:29 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:57:29 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:57:29 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:57:29 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:57:29 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:57:29 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:57:29 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:57:29 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:57:29 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:57:29 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:57:30 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:57:30 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:57:30 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:57:30 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:57:30 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:57:30 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:57:30 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:57:30 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:57:30 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:57:30 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:57:30 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:57:30 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:57:30 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:57:30 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:57:30 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:57:30 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:57:30 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:57:30 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:57:30 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:57:30 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:57:30 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:57:30 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:57:30 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:57:30 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:57:30 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:57:30 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:57:30 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:57:30 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:57:30 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:57:30 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:57:30 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:57:30 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:57:30 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:57:30 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:57:30 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:57:30 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:57:30 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:57:30 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:57:30 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:57:30 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:57:30 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:57:30 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:57:30 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:57:30 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:57:30 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:57:30 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:57:30 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:57:30 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:57:31 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:57:31 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:57:31 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:57:31 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:57:31 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:57:31 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:57:31 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:57:31 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:57:31 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:57:31 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:57:31 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:57:31 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:57:31 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:57:31 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:57:31 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:57:31 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:57:31 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:57:31 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:57:31 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:57:31 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:57:31 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:57:31 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:57:31 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:57:31 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:57:31 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:57:31 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:57:31 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:57:31 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:57:31 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:57:31 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:57:31 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:57:31 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:57:31 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:57:31 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:57:31 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:57:31 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:57:31 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:57:31 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:57:31 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:57:31 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:57:31 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:57:31 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:57:31 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:57:31 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:57:31 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:57:31 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:57:31 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:57:31 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:57:31 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:57:31 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:57:31 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:57:32 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:57:32 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:57:32 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:57:32 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:57:32 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:57:32 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:57:32 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:57:32 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:57:32 - [TEST_STEP][PASSED] - Columns_row = get(row).findElements(By.tagName("td")): null

2019-05-18 09:57:32 - [TEST_STEP][PASSED] - columns_count = Columns_row.size(): null

2019-05-18 09:57:32 - [TEST_STEP][PASSED] - for ([column = 0, column < columns_count, (column++)]): null

2019-05-18 09:57:32 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:57:32 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:57:32 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:57:32 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:57:32 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:57:32 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:57:32 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:57:32 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:57:32 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:57:32 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:57:32 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:57:32 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:57:32 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:57:32 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:57:32 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:57:32 - [TEST_STEP][PASSED] - celltext = get(column).getText(): null

2019-05-18 09:57:32 - [TEST_STEP][PASSED] - get(index).add(celltext): null

2019-05-18 09:57:32 - [TEST_STEP][PASSED] - if (celltext == ExpectedValue): null

2019-05-18 09:57:32 - [TEST_STEP][PASSED] - (pagi++): null

2019-05-18 09:57:32 - [TEST_STEP][PASSED] - (index++): null

2019-05-18 09:57:32 - [TEST_STEP][PASSED] - delay(10): Delayed 10 second(s)

2019-05-18 09:57:42 - [MESSAGE][PASSED] - Delayed 10 second(s)

2019-05-18 09:57:42 - [TEST_STEP][PASSED] - closeBrowser(): Browser is closed

2019-05-18 09:57:48 - [MESSAGE][PASSED] - Browser is closed

2019-05-18 09:57:48 - [TEST_STEP][PASSED] - delay(10): Delayed 10 second(s)

2019-05-18 09:57:58 - [MESSAGE][PASSED] - Delayed 10 second(s)

2019-05-18 09:57:58 - [TEST_STEP][PASSED] - println(page1): null

2019-05-18 09:57:58 - [TEST_STEP][PASSED] - println(page2): null

2019-05-18 09:57:58 - [TEST_STEP][PASSED] - println(page3): null

2019-05-18 09:57:58 - [TEST_STEP][PASSED] - println(page4): null

2019-05-18 09:57:58 - [TEST_STEP][PASSED] - println(page5): null

2019-05-18 09:57:58 - [TEST_STEP][PASSED] - println(page6): null

2019-05-18 09:57:58 - [TEST_STEP][PASSED] - ans = page1.contains("Ashton Cox"): null

2019-05-18 09:57:58 - [TEST_STEP][PASSED] - if (ans): null]]></system-out>
         <system-err><![CDATA[]]></system-err>
      </testcase>
      <testcase name="Test Cases/IniFileUtil/iniFile" classname="Test Cases/IniFileUtil/iniFile" status="PASSED">
         <system-out><![CDATA[2019-05-18 09:57:58 - [TEST_CASE][PASSED] - Test Cases/IniFileUtil/iniFile: Test Cases/IniFileUtil/iniFile

2019-05-18 09:57:58 - [TEST_STEP][PASSED] - Start listener action : sampleBeforeTestCase: null

2019-05-18 09:57:58 - [TEST_STEP][PASSED] - println(testCaseContext.getTestCaseId()): null

2019-05-18 09:57:58 - [TEST_STEP][PASSED] - println(testCaseContext.getTestCaseVariables()): null

2019-05-18 09:57:59 - [TEST_STEP][PASSED] - com.global.variables.CreateGlobalVariables.addGlobalVariable("localURL", "katalon.com"): com.global.variables.CreateGlobalVariables.addGlobalVariable is PASSED

2019-05-18 09:57:59 - [MESSAGE][PASSED] - com.global.variables.CreateGlobalVariables.addGlobalVariable is PASSED

2019-05-18 09:57:59 - [TEST_STEP][PASSED] - println(localURL): null

2019-05-18 09:57:59 - [TEST_STEP][PASSED] - com.global.variables.CreateGlobalVariables.addGlobalVariable("age", 53): com.global.variables.CreateGlobalVariables.addGlobalVariable is PASSED

2019-05-18 09:57:59 - [MESSAGE][PASSED] - com.global.variables.CreateGlobalVariables.addGlobalVariable is PASSED

2019-05-18 09:57:59 - [TEST_STEP][PASSED] - println(age): null

2019-05-18 09:57:59 - [TEST_STEP][PASSED] - com.global.variables.CreateGlobalVariables.addGlobalVariable("salary", 5800.99): com.global.variables.CreateGlobalVariables.addGlobalVariable is PASSED

2019-05-18 09:58:00 - [MESSAGE][PASSED] - com.global.variables.CreateGlobalVariables.addGlobalVariable is PASSED

2019-05-18 09:58:00 - [TEST_STEP][PASSED] - println(salary): null

2019-05-18 09:58:00 - [TEST_STEP][PASSED] - ret = new java.util.ArrayList(): null

2019-05-18 09:58:00 - [TEST_STEP][PASSED] - ret = com.ini.IniUtil.readInitFile(): com.ini.IniUtil.readInitFile is PASSED

2019-05-18 09:58:00 - [MESSAGE][PASSED] - com.ini.IniUtil.readInitFile is PASSED

2019-05-18 09:58:00 - [TEST_STEP][PASSED] - checkValue = 24: null

2019-05-18 09:58:00 - [TEST_STEP][PASSED] - for (def r : ret): null

2019-05-18 09:58:00 - [TEST_STEP][PASSED] - out.print("Value: " + r + "
"): null

2019-05-18 09:58:00 - [TEST_STEP][PASSED] - if (r.equals(checkValue)): null

2019-05-18 09:58:00 - [TEST_STEP][PASSED] - print("value is in .ini file"): null

2019-05-18 09:58:00 - [TEST_STEP][PASSED] - break: null

2019-05-18 09:58:00 - [TEST_STEP][PASSED] - com.ini.IniUtil.simpleIni(): com.ini.IniUtil.simpleIni is PASSED

2019-05-18 09:58:00 - [MESSAGE][PASSED] - com.ini.IniUtil.simpleIni is PASSED

2019-05-18 09:58:00 - [TEST_STEP][PASSED] - com.ini.IniUtil.HierarchicalINIConfigurationExample(): com.ini.IniUtil.HierarchicalINIConfigurationExample is PASSED

2019-05-18 09:58:01 - [MESSAGE][PASSED] - com.ini.IniUtil.HierarchicalINIConfigurationExample is PASSED]]></system-out>
         <system-err><![CDATA[]]></system-err>
      </testcase>
      <testcase name="Test Cases/PdfUtil/mergePdfFiles" classname="Test Cases/PdfUtil/mergePdfFiles" status="PASSED">
         <system-out><![CDATA[2019-05-18 09:58:01 - [TEST_CASE][PASSED] - Test Cases/PdfUtil/mergePdfFiles: Test Cases/PdfUtil/mergePdfFiles

2019-05-18 09:58:01 - [TEST_STEP][PASSED] - Start listener action : sampleBeforeTestCase: null

2019-05-18 09:58:01 - [TEST_STEP][PASSED] - println(testCaseContext.getTestCaseId()): null

2019-05-18 09:58:01 - [TEST_STEP][PASSED] - println(testCaseContext.getTestCaseVariables()): null

2019-05-18 09:58:03 - [TEST_STEP][PASSED] - pdfDir = getProjectDir() + "/pdfFiles/": null

2019-05-18 09:58:03 - [TEST_STEP][PASSED] - dateFormat = new java.text.SimpleDateFormat(yyyy-MM-dd_HH-mm-ss): null

2019-05-18 09:58:03 - [TEST_STEP][PASSED] - string = dateFormat.format(new java.util.Date()): null

2019-05-18 09:58:03 - [TEST_STEP][PASSED] - out.println(string): null

2019-05-18 09:58:03 - [TEST_STEP][PASSED] - try: com.pdf.util.MergePdfFiles.mergePdfFiles is PASSED

2019-05-18 09:58:03 - [TEST_STEP][PASSED] - inputPdfList = new java.util.ArrayList(): null

2019-05-18 09:58:03 - [TEST_STEP][PASSED] - inputPdfList.add(new java.io.FileInputStream((pdfDir + file1.pdf))): null

2019-05-18 09:58:03 - [TEST_STEP][PASSED] - inputPdfList.add(new java.io.FileInputStream((pdfDir + file2.pdf))): null

2019-05-18 09:58:03 - [TEST_STEP][PASSED] - outputStream = new java.io.FileOutputStream((((pdfDir + ) + string) + .pdf)): null

2019-05-18 09:58:03 - [TEST_STEP][PASSED] - com.pdf.util.MergePdfFiles.mergePdfFiles(inputPdfList, outputStream): com.pdf.util.MergePdfFiles.mergePdfFiles is PASSED

2019-05-18 09:58:04 - [MESSAGE][PASSED] - com.pdf.util.MergePdfFiles.mergePdfFiles is PASSED]]></system-out>
         <system-err><![CDATA[]]></system-err>
      </testcase>
      <testcase name="Test Cases/GnerateSIN/generateSin" classname="Test Cases/GnerateSIN/generateSin" status="PASSED">
         <system-out><![CDATA[2019-05-18 09:58:05 - [TEST_CASE][PASSED] - Test Cases/GnerateSIN/generateSin: Test Cases/GnerateSIN/generateSin

2019-05-18 09:58:05 - [TEST_STEP][PASSED] - Start listener action : sampleBeforeTestCase: null

2019-05-18 09:58:05 - [TEST_STEP][PASSED] - println(testCaseContext.getTestCaseId()): null

2019-05-18 09:58:05 - [TEST_STEP][PASSED] - println(testCaseContext.getTestCaseVariables()): null

2019-05-18 09:58:07 - [TEST_STEP][PASSED] - openBrowser(""): Browser is opened with url: ''

2019-05-18 09:58:07 - [MESSAGE][INFO] - Starting 'Chrome' driver

2019-05-18 09:58:07 - [MESSAGE][INFO] - User set preference: ['args', '[--disable-infobars, --no-sandbox]']

2019-05-18 09:58:15 - [MESSAGE][PASSED] - Browser is opened with url: ''

2019-05-18 09:58:15 - [TEST_STEP][PASSED] - sin = sin.generation.JavaSinGenerator.getSinAsString(): sin.generation.JavaSinGenerator.getSinAsString is PASSED

2019-05-18 09:58:15 - [MESSAGE][PASSED] - Execute JavaScript '{var validPrefix = new Array(1, 2, 3, 4, 5, 6, 7, 9);var length = 9;var sin = new Array(length);sin[0] = validPrefix[Math.floor(Math.random() * validPrefix.length)];var index = 1;while (index < length - 1) {sin[index] = Math.floor(Math.random() * 9);index++;} var sum = 0;var pos = 1; while (pos < length - 1){var odd = sin[pos] * 2;sum += odd > 9 ? odd - 9 : odd;sum += sin[pos - 1]; pos += 2;}var checkdigit = ((Math.floor(sum / 10) + 1) * 10 - sum) % 10;sin[length - 1] = checkdigit;var MySin = (sin.join(""));return MySin;}' successfully

2019-05-18 09:58:15 - [MESSAGE][PASSED] - sin.generation.JavaSinGenerator.getSinAsString is PASSED

2019-05-18 09:58:15 - [TEST_STEP][PASSED] - println("JavaSin: " + sin): null

2019-05-18 09:58:15 - [TEST_STEP][PASSED] - closeBrowser(): Browser is closed

2019-05-18 09:58:16 - [MESSAGE][PASSED] - Browser is closed]]></system-out>
         <system-err><![CDATA[]]></system-err>
      </testcase>
      <testcase name="Test Cases/ReadYAML/readyaml" classname="Test Cases/ReadYAML/readyaml" status="PASSED">
         <system-out><![CDATA[2019-05-18 09:58:16 - [TEST_CASE][PASSED] - Test Cases/ReadYAML/readyaml: Test Cases/ReadYAML/readyaml

2019-05-18 09:58:16 - [TEST_STEP][PASSED] - Start listener action : sampleBeforeTestCase: null

2019-05-18 09:58:16 - [TEST_STEP][PASSED] - println(testCaseContext.getTestCaseId()): null

2019-05-18 09:58:16 - [TEST_STEP][PASSED] - println(testCaseContext.getTestCaseVariables()): null

2019-05-18 09:58:18 - [TEST_STEP][PASSED] - reader = new com.esotericsoftware.yamlbeans.YamlReader(new java.io.FileReader(C:\Users\fitim\IdeaProjects\cygwin\src\main\resources\contact.yaml)): null

2019-05-18 09:58:19 - [TEST_STEP][PASSED] - object = reader.read(): null

2019-05-18 09:58:19 - [TEST_STEP][PASSED] - out.println(object): null

2019-05-18 09:58:19 - [TEST_STEP][PASSED] - map = object: null

2019-05-18 09:58:19 - [TEST_STEP][PASSED] - out.println(map.get("address")): null

2019-05-18 09:58:19 - [TEST_STEP][PASSED] - out.println(map.get("name")): null

2019-05-18 09:58:19 - [TEST_STEP][PASSED] - out.println(map.get("phone numbers")): null

2019-05-18 09:58:19 - [TEST_STEP][PASSED] - reader2 = new com.esotericsoftware.yamlbeans.YamlReader(new java.io.FileReader(C:\Users\fitim\.git\KatalonProject\Include\USERS\users.yaml)): null

2019-05-18 09:58:19 - [TEST_STEP][PASSED] - object2 = reader2.read(): null

2019-05-18 09:58:19 - [TEST_STEP][PASSED] - out.println(object2): null

2019-05-18 09:58:19 - [TEST_STEP][PASSED] - map2 = object2: null

2019-05-18 09:58:19 - [TEST_STEP][PASSED] - out.println(map2.get("url1")): null

2019-05-18 09:58:19 - [TEST_STEP][PASSED] - out.println(map2.get("user1")): null

2019-05-18 09:58:19 - [TEST_STEP][PASSED] - out.println(map2.get("pass1")): null]]></system-out>
         <system-err><![CDATA[]]></system-err>
      </testcase>
      <testcase name="Test Cases/PropertiesFile/properties" classname="Test Cases/PropertiesFile/properties" status="PASSED">
         <system-out><![CDATA[2019-05-18 09:58:19 - [TEST_CASE][PASSED] - Test Cases/PropertiesFile/properties: Test Cases/PropertiesFile/properties

2019-05-18 09:58:19 - [TEST_STEP][PASSED] - Start listener action : sampleBeforeTestCase: null

2019-05-18 09:58:19 - [TEST_STEP][PASSED] - println(testCaseContext.getTestCaseId()): null

2019-05-18 09:58:19 - [TEST_STEP][PASSED] - println(testCaseContext.getTestCaseVariables()): null

2019-05-18 09:58:20 - [TEST_STEP][PASSED] - expectedValue = "user4": null

2019-05-18 09:58:20 - [TEST_STEP][PASSED] - prop = com.properties.PropertiesUtil.GetProperty(expectedValue): com.properties.PropertiesUtil.GetProperty is PASSED

2019-05-18 09:58:20 - [MESSAGE][PASSED] - com.properties.PropertiesUtil.GetProperty is PASSED

2019-05-18 09:58:20 - [TEST_STEP][PASSED] - println("property fetch " + prop): null

2019-05-18 09:58:20 - [TEST_STEP][PASSED] - props = new java.util.Properties(): null

2019-05-18 09:58:20 - [TEST_STEP][PASSED] - props = com.properties.PropertiesUtil.GetAllProperties(): com.properties.PropertiesUtil.GetAllProperties is PASSED

2019-05-18 09:58:20 - [MESSAGE][PASSED] - com.properties.PropertiesUtil.GetAllProperties is PASSED

2019-05-18 09:58:20 - [TEST_STEP][PASSED] - sortedMap = new java.util.TreeMap(props): null

2019-05-18 09:58:20 - [TEST_STEP][PASSED] - for (String key : sortedMap.keySet()): null

2019-05-18 09:58:20 - [TEST_STEP][PASSED] - out.println(key + "=" + sortedMap.get(key)): null

2019-05-18 09:58:20 - [TEST_STEP][PASSED] - out.println(key + "=" + sortedMap.get(key)): null

2019-05-18 09:58:20 - [TEST_STEP][PASSED] - out.println(key + "=" + sortedMap.get(key)): null

2019-05-18 09:58:20 - [TEST_STEP][PASSED] - out.println(key + "=" + sortedMap.get(key)): null

2019-05-18 09:58:20 - [TEST_STEP][PASSED] - out.println(key + "=" + sortedMap.get(key)): null

2019-05-18 09:58:20 - [TEST_STEP][PASSED] - out.println(key + "=" + sortedMap.get(key)): null

2019-05-18 09:58:20 - [TEST_STEP][PASSED] - out.println(key + "=" + sortedMap.get(key)): null

2019-05-18 09:58:20 - [TEST_STEP][PASSED] - out.println(key + "=" + sortedMap.get(key)): null

2019-05-18 09:58:20 - [TEST_STEP][PASSED] - out.println(key + "=" + sortedMap.get(key)): null

2019-05-18 09:58:20 - [TEST_STEP][PASSED] - out.println(key + "=" + sortedMap.get(key)): null

2019-05-18 09:58:20 - [TEST_STEP][PASSED] - out.println(key + "=" + sortedMap.get(key)): null

2019-05-18 09:58:20 - [TEST_STEP][PASSED] - out.println(key + "=" + sortedMap.get(key)): null

2019-05-18 09:58:20 - [TEST_STEP][PASSED] - out.println(key + "=" + sortedMap.get(key)): null

2019-05-18 09:58:20 - [TEST_STEP][PASSED] - out.println(key + "=" + sortedMap.get(key)): null]]></system-out>
         <system-err><![CDATA[]]></system-err>
      </testcase>
      <testcase name="Test Cases/IsFileDownloaded/fileDownload" classname="Test Cases/IsFileDownloaded/fileDownload" status="PASSED">
         <system-out><![CDATA[2019-05-18 09:58:20 - [TEST_CASE][PASSED] - Test Cases/IsFileDownloaded/fileDownload: Test Cases/IsFileDownloaded/fileDownload

2019-05-18 09:58:20 - [TEST_STEP][PASSED] - Start listener action : sampleBeforeTestCase: null

2019-05-18 09:58:20 - [TEST_STEP][PASSED] - println(testCaseContext.getTestCaseId()): null

2019-05-18 09:58:20 - [TEST_STEP][PASSED] - println(testCaseContext.getTestCaseVariables()): null

2019-05-18 09:58:25 - [TEST_STEP][PASSED] - options = new org.openqa.selenium.chrome.ChromeOptions(): null

2019-05-18 09:58:25 - [TEST_STEP][PASSED] - downloadPath = "C:\Users\fitim\Desktop\data": null

2019-05-18 09:58:25 - [TEST_STEP][PASSED] - chromePrefs = new java.util.HashMap(): null

2019-05-18 09:58:25 - [TEST_STEP][PASSED] - chromePrefs.put("profile.default_content_settings.popups", 0): null

2019-05-18 09:58:25 - [TEST_STEP][PASSED] - chromePrefs.put("download.default_directory", downloadPath): null

2019-05-18 09:58:25 - [TEST_STEP][PASSED] - chromePrefs.put("download.prompt_for_download", false): null

2019-05-18 09:58:25 - [TEST_STEP][PASSED] - chromePrefs.put("plugins.plugins_disabled", "Chrome PDF Viewer"): null

2019-05-18 09:58:25 - [TEST_STEP][PASSED] - options.addArguments("--window-size=1920,1080"): null

2019-05-18 09:58:25 - [TEST_STEP][PASSED] - options.addArguments("--test-type"): null

2019-05-18 09:58:25 - [TEST_STEP][PASSED] - options.addArguments("--disable-gpu"): null

2019-05-18 09:58:25 - [TEST_STEP][PASSED] - options.addArguments("--no-sandbox"): null

2019-05-18 09:58:25 - [TEST_STEP][PASSED] - options.addArguments("--disable-dev-shm-usage"): null

2019-05-18 09:58:25 - [TEST_STEP][PASSED] - options.addArguments("--disable-software-rasterizer"): null

2019-05-18 09:58:25 - [TEST_STEP][PASSED] - options.addArguments("--disable-popup-blocking"): null

2019-05-18 09:58:25 - [TEST_STEP][PASSED] - options.addArguments("--disable-extensions"): null

2019-05-18 09:58:25 - [TEST_STEP][PASSED] - options.setExperimentalOption("prefs", chromePrefs): null

2019-05-18 09:58:25 - [TEST_STEP][PASSED] - cap = DesiredCapabilities.chrome(): null

2019-05-18 09:58:25 - [TEST_STEP][PASSED] - cap.setCapability(CAPABILITY, options): null

2019-05-18 09:58:25 - [TEST_STEP][PASSED] - cap.setCapability(ACCEPT_SSL_CERTS, true): null

2019-05-18 09:58:25 - [TEST_STEP][PASSED] - System.setProperty("webdriver.chrome.driver", getChromeDriverPath()): null

2019-05-18 09:58:25 - [TEST_STEP][PASSED] - driver = new org.openqa.selenium.chrome.ChromeDriver(cap): null

2019-05-18 09:58:32 - [TEST_STEP][PASSED] - driver.get("http://spreadsheetpage.com/index.php/file/C35/P10/"): null

2019-05-18 09:58:40 - [TEST_STEP][PASSED] - xls")).click(): null

2019-05-18 09:58:41 - [TEST_STEP][PASSED] - delay(10): Delayed 10 second(s)

2019-05-18 09:58:51 - [MESSAGE][PASSED] - Delayed 10 second(s)

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - Assert.assertEquals(isFileDownloaded(downloadPath, "smilechart.xls"), "true"): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - flag = "false": null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - dir = new java.io.File(downloadPath): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - dirContents = dir.listFiles(): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - println("Total Files Available in the folder are : " + length): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - for ([i = 0, i < length, (i++)]): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - println("File Name at 0 is : " + dirContents[i].getName()): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - if (getName().equals(fileName)): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - println("File Name at 0 is : " + dirContents[i].getName()): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - if (getName().equals(fileName)): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - println("File Name at 0 is : " + dirContents[i].getName()): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - if (getName().equals(fileName)): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - println("File Name at 0 is : " + dirContents[i].getName()): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - if (getName().equals(fileName)): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - println("File Name at 0 is : " + dirContents[i].getName()): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - if (getName().equals(fileName)): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - println("File Name at 0 is : " + dirContents[i].getName()): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - if (getName().equals(fileName)): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - println("File Name at 0 is : " + dirContents[i].getName()): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - if (getName().equals(fileName)): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - println("File Name at 0 is : " + dirContents[i].getName()): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - if (getName().equals(fileName)): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - println("File Name at 0 is : " + dirContents[i].getName()): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - if (getName().equals(fileName)): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - println("File Name at 0 is : " + dirContents[i].getName()): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - if (getName().equals(fileName)): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - println("File Name at 0 is : " + dirContents[i].getName()): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - if (getName().equals(fileName)): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - println("File Name at 0 is : " + dirContents[i].getName()): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - if (getName().equals(fileName)): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - println("File Name at 0 is : " + dirContents[i].getName()): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - if (getName().equals(fileName)): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - println("File Name at 0 is : " + dirContents[i].getName()): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - if (getName().equals(fileName)): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - println("File Name at 0 is : " + dirContents[i].getName()): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - if (getName().equals(fileName)): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - println("File Name at 0 is : " + dirContents[i].getName()): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - if (getName().equals(fileName)): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - println("File Name at 0 is : " + dirContents[i].getName()): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - if (getName().equals(fileName)): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - println("File Name at 0 is : " + dirContents[i].getName()): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - if (getName().equals(fileName)): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - println("File Name at 0 is : " + dirContents[i].getName()): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - if (getName().equals(fileName)): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - println("File Name at 0 is : " + dirContents[i].getName()): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - if (getName().equals(fileName)): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - println("File Name at 0 is : " + dirContents[i].getName()): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - if (getName().equals(fileName)): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - println("File Name at 0 is : " + dirContents[i].getName()): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - if (getName().equals(fileName)): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - println("File Name at 0 is : " + dirContents[i].getName()): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - if (getName().equals(fileName)): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - println("File Name at 0 is : " + dirContents[i].getName()): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - if (getName().equals(fileName)): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - println("File Name at 0 is : " + dirContents[i].getName()): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - if (getName().equals(fileName)): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - println("File Name at 0 is : " + dirContents[i].getName()): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - if (getName().equals(fileName)): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - println("File Name at 0 is : " + dirContents[i].getName()): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - if (getName().equals(fileName)): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - println("File Name at 0 is : " + dirContents[i].getName()): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - if (getName().equals(fileName)): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - println("File Name at 0 is : " + dirContents[i].getName()): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - if (getName().equals(fileName)): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - println("File Name at 0 is : " + dirContents[i].getName()): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - if (getName().equals(fileName)): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - println("File Name at 0 is : " + dirContents[i].getName()): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - if (getName().equals(fileName)): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - println("File Name at 0 is : " + dirContents[i].getName()): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - if (getName().equals(fileName)): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - println("File Name at 0 is : " + dirContents[i].getName()): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - if (getName().equals(fileName)): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - println("File Name at 0 is : " + dirContents[i].getName()): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - if (getName().equals(fileName)): null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - flag = "true": null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - return flag: null

2019-05-18 09:58:51 - [TEST_STEP][PASSED] - driver.close(): null

2019-05-18 09:58:53 - [TEST_STEP][PASSED] - f = getLastDownloadedFile(downloadPath): null

2019-05-18 09:58:53 - [TEST_STEP][PASSED] - latest = null: null

2019-05-18 09:58:53 - [TEST_STEP][PASSED] - try: null

2019-05-18 09:58:53 - [TEST_STEP][PASSED] - fl = new java.io.File(downloadPath): null

2019-05-18 09:58:53 - [TEST_STEP][PASSED] - files = fl.listFiles(new Script1556691764411$2(this)): null

2019-05-18 09:58:53 - [TEST_STEP][PASSED] - return file.isFile(): null

2019-05-18 09:58:53 - [TEST_STEP][PASSED] - return file.isFile(): null

2019-05-18 09:58:53 - [TEST_STEP][PASSED] - return file.isFile(): null

2019-05-18 09:58:53 - [TEST_STEP][PASSED] - return file.isFile(): null

2019-05-18 09:58:53 - [TEST_STEP][PASSED] - return file.isFile(): null

2019-05-18 09:58:53 - [TEST_STEP][PASSED] - return file.isFile(): null

2019-05-18 09:58:53 - [TEST_STEP][PASSED] - return file.isFile(): null

2019-05-18 09:58:53 - [TEST_STEP][PASSED] - return file.isFile(): null

2019-05-18 09:58:53 - [TEST_STEP][PASSED] - return file.isFile(): null

2019-05-18 09:58:53 - [TEST_STEP][PASSED] - return file.isFile(): null

2019-05-18 09:58:53 - [TEST_STEP][PASSED] - return file.isFile(): null

2019-05-18 09:58:53 - [TEST_STEP][PASSED] - return file.isFile(): null

2019-05-18 09:58:53 - [TEST_STEP][PASSED] - return file.isFile(): null

2019-05-18 09:58:53 - [TEST_STEP][PASSED] - return file.isFile(): null

2019-05-18 09:58:53 - [TEST_STEP][PASSED] - return file.isFile(): null

2019-05-18 09:58:53 - [TEST_STEP][PASSED] - return file.isFile(): null

2019-05-18 09:58:53 - [TEST_STEP][PASSED] - return file.isFile(): null

2019-05-18 09:58:53 - [TEST_STEP][PASSED] - return file.isFile(): null

2019-05-18 09:58:53 - [TEST_STEP][PASSED] - return file.isFile(): null

2019-05-18 09:58:53 - [TEST_STEP][PASSED] - return file.isFile(): null

2019-05-18 09:58:53 - [TEST_STEP][PASSED] - return file.isFile(): null

2019-05-18 09:58:53 - [TEST_STEP][PASSED] - return file.isFile(): null

2019-05-18 09:58:53 - [TEST_STEP][PASSED] - return file.isFile(): null

2019-05-18 09:58:53 - [TEST_STEP][PASSED] - return file.isFile(): null

2019-05-18 09:58:53 - [TEST_STEP][PASSED] - return file.isFile(): null

2019-05-18 09:58:53 - [TEST_STEP][PASSED] - return file.isFile(): null

2019-05-18 09:58:53 - [TEST_STEP][PASSED] - return file.isFile(): null

2019-05-18 09:58:53 - [TEST_STEP][PASSED] - return file.isFile(): null

2019-05-18 09:58:53 - [TEST_STEP][PASSED] - return file.isFile(): null

2019-05-18 09:58:53 - [TEST_STEP][PASSED] - return file.isFile(): null

2019-05-18 09:58:53 - [TEST_STEP][PASSED] - return file.isFile(): null

2019-05-18 09:58:53 - [TEST_STEP][PASSED] - return file.isFile(): null

2019-05-18 09:58:53 - [TEST_STEP][PASSED] - return file.isFile(): null

2019-05-18 09:58:53 - [TEST_STEP][PASSED] - return file.isFile(): null

2019-05-18 09:58:53 - [TEST_STEP][PASSED] - return file.isFile(): null

2019-05-18 09:58:53 - [TEST_STEP][PASSED] - return file.isFile(): null

2019-05-18 09:58:53 - [TEST_STEP][PASSED] - return file.isFile(): null

2019-05-18 09:58:53 - [TEST_STEP][PASSED] - return file.isFile(): null

2019-05-18 09:58:53 - [TEST_STEP][PASSED] - return file.isFile(): null

2019-05-18 09:58:53 - [TEST_STEP][PASSED] - return file.isFile(): null

2019-05-18 09:58:53 - [TEST_STEP][PASSED] - return file.isFile(): null

2019-05-18 09:58:53 - [TEST_STEP][PASSED] - return file.isFile(): null

2019-05-18 09:58:53 - [TEST_STEP][PASSED] - return file.isFile(): null

2019-05-18 09:58:53 - [TEST_STEP][PASSED] - return file.isFile(): null

2019-05-18 09:58:53 - [TEST_STEP][PASSED] - return file.isFile(): null

2019-05-18 09:58:53 - [TEST_STEP][PASSED] - Thread.sleep(10000): null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - lastMod = MIN_VALUE: null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - for (File file : files): null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - if (file.lastModified() > lastMod): null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - latest = file: null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - lastMod = file.lastModified(): null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - if (file.lastModified() > lastMod): null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - latest = file: null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - lastMod = file.lastModified(): null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - if (file.lastModified() > lastMod): null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - if (file.lastModified() > lastMod): null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - if (file.lastModified() > lastMod): null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - if (file.lastModified() > lastMod): null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - if (file.lastModified() > lastMod): null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - if (file.lastModified() > lastMod): null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - if (file.lastModified() > lastMod): null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - if (file.lastModified() > lastMod): null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - if (file.lastModified() > lastMod): null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - if (file.lastModified() > lastMod): null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - if (file.lastModified() > lastMod): null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - if (file.lastModified() > lastMod): null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - if (file.lastModified() > lastMod): null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - latest = file: null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - lastMod = file.lastModified(): null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - if (file.lastModified() > lastMod): null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - if (file.lastModified() > lastMod): null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - if (file.lastModified() > lastMod): null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - if (file.lastModified() > lastMod): null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - if (file.lastModified() > lastMod): null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - if (file.lastModified() > lastMod): null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - if (file.lastModified() > lastMod): null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - if (file.lastModified() > lastMod): null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - if (file.lastModified() > lastMod): null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - if (file.lastModified() > lastMod): null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - if (file.lastModified() > lastMod): null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - if (file.lastModified() > lastMod): null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - if (file.lastModified() > lastMod): null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - if (file.lastModified() > lastMod): null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - latest = file: null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - lastMod = file.lastModified(): null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - if (file.lastModified() > lastMod): null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - if (file.lastModified() > lastMod): null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - if (file.lastModified() > lastMod): null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - if (file.lastModified() > lastMod): null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - if (file.lastModified() > lastMod): null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - if (file.lastModified() > lastMod): null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - if (file.lastModified() > lastMod): null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - if (file.lastModified() > lastMod): null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - if (file.lastModified() > lastMod): null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - if (file.lastModified() > lastMod): null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - println("The last downloaded file is " + latest.getPath()): null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - return latest: null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - println("latest downloaded file name is: " + f.getName()): null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - Assert.assertEquals(f.getName(), "smilechart.xls", "true"): null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - Assert.assertEquals(deleteFile(downloadPath, "smilechart.xls"), "true"): null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - flag = "false": null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - file = new java.io.File(((downloadPath + \) + fileName)): null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - if (file.delete()): null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - out.println("File deleted successfully"): null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - flag = "true": null

2019-05-18 09:59:03 - [TEST_STEP][PASSED] - return flag: null]]></system-out>
         <system-err><![CDATA[]]></system-err>
      </testcase>
      <testcase name="Test Cases/TestCaseParameters/dataBinding" classname="Test Cases/TestCaseParameters/dataBinding" status="PASSED">
         <system-out><![CDATA[2019-05-18 09:59:03 - [TEST_CASE][PASSED] - Test Cases/TestCaseParameters/dataBinding: Test Cases/TestCaseParameters/dataBinding

2019-05-18 09:59:04 - [TEST_STEP][PASSED] - Start listener action : sampleBeforeTestCase: null

2019-05-18 09:59:04 - [TEST_STEP][PASSED] - println(testCaseContext.getTestCaseId()): null

2019-05-18 09:59:04 - [TEST_STEP][PASSED] - println(testCaseContext.getTestCaseVariables()): null

2019-05-18 09:59:05 - [TEST_STEP][PASSED] - openBrowser(""): Browser is opened with url: ''

2019-05-18 09:59:05 - [MESSAGE][INFO] - Starting 'Chrome' driver

2019-05-18 09:59:05 - [MESSAGE][INFO] - User set preference: ['args', '[--disable-infobars, --no-sandbox]']

2019-05-18 09:59:11 - [MESSAGE][PASSED] - Browser is opened with url: ''

2019-05-18 09:59:11 - [TEST_STEP][PASSED] - deleteAllCookies(STOP_ON_FAILURE): Delete all cookies successfully

2019-05-18 09:59:13 - [MESSAGE][PASSED] - Delete all cookies successfully

2019-05-18 09:59:13 - [TEST_STEP][PASSED] - println("Cleared all the caches"): null

2019-05-18 09:59:13 - [TEST_STEP][PASSED] - navigateToUrl("http://www.google.com"): Navigate to 'http://www.google.com' successfully

2019-05-18 09:59:18 - [MESSAGE][PASSED] - Navigate to 'http://www.google.com' successfully

2019-05-18 09:59:18 - [TEST_STEP][PASSED] - setText(findTestObject("Object Repository/DatePicker/Page_/REMOVE/Page_Google/search"), Parameters): Text 'Selenium' is set on object 'Object Repository/DatePicker/Page_/REMOVE/Page_Google/search'

2019-05-18 09:59:19 - [MESSAGE][PASSED] - Text 'Selenium' is set on object 'Object Repository/DatePicker/Page_/REMOVE/Page_Google/search'

2019-05-18 09:59:19 - [TEST_STEP][PASSED] - delay(4): Delayed 4 second(s)

2019-05-18 09:59:23 - [MESSAGE][PASSED] - Delayed 4 second(s)]]></system-out>
         <system-err><![CDATA[]]></system-err>
      </testcase>
      <testcase name="Test Cases/TestCaseParameters/dataBinding" classname="Test Cases/TestCaseParameters/dataBinding" status="PASSED">
         <system-out><![CDATA[2019-05-18 09:59:23 - [TEST_CASE][PASSED] - Test Cases/TestCaseParameters/dataBinding: Test Cases/TestCaseParameters/dataBinding

2019-05-18 09:59:23 - [TEST_STEP][PASSED] - Start listener action : sampleBeforeTestCase: null

2019-05-18 09:59:23 - [TEST_STEP][PASSED] - println(testCaseContext.getTestCaseId()): null

2019-05-18 09:59:23 - [TEST_STEP][PASSED] - println(testCaseContext.getTestCaseVariables()): null

2019-05-18 09:59:23 - [TEST_STEP][PASSED] - openBrowser(""): Browser is opened with url: ''

2019-05-18 09:59:23 - [MESSAGE][WARNING] - A browser is already opened. Closing browser and opening a new one

2019-05-18 09:59:24 - [MESSAGE][INFO] - Starting 'Chrome' driver

2019-05-18 09:59:24 - [MESSAGE][INFO] - User set preference: ['args', '[--disable-infobars, --no-sandbox]']

2019-05-18 09:59:30 - [MESSAGE][PASSED] - Browser is opened with url: ''

2019-05-18 09:59:30 - [TEST_STEP][PASSED] - deleteAllCookies(STOP_ON_FAILURE): Delete all cookies successfully

2019-05-18 09:59:32 - [MESSAGE][PASSED] - Delete all cookies successfully

2019-05-18 09:59:32 - [TEST_STEP][PASSED] - println("Cleared all the caches"): null

2019-05-18 09:59:32 - [TEST_STEP][PASSED] - navigateToUrl("http://www.google.com"): Navigate to 'http://www.google.com' successfully

2019-05-18 09:59:36 - [MESSAGE][PASSED] - Navigate to 'http://www.google.com' successfully

2019-05-18 09:59:36 - [TEST_STEP][PASSED] - setText(findTestObject("Object Repository/DatePicker/Page_/REMOVE/Page_Google/search"), Parameters): Text 'Webdriver' is set on object 'Object Repository/DatePicker/Page_/REMOVE/Page_Google/search'

2019-05-18 09:59:37 - [MESSAGE][PASSED] - Text 'Webdriver' is set on object 'Object Repository/DatePicker/Page_/REMOVE/Page_Google/search'

2019-05-18 09:59:37 - [TEST_STEP][PASSED] - delay(4): Delayed 4 second(s)

2019-05-18 09:59:41 - [MESSAGE][PASSED] - Delayed 4 second(s)]]></system-out>
         <system-err><![CDATA[]]></system-err>
      </testcase>
      <system-out><![CDATA[2019-05-18 09:47:36 - [TEST_SUITE][PASSED] - RegressionTestSuite: Test Cases/TestCaseParameters/dataBinding]]></system-out>
      <system-err><![CDATA[]]></system-err>
   </testsuite>
</testsuites>
